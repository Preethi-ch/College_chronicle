{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chpre\\\\OneDrive\\\\Desktop\\\\college\\\\PROJECTS\\\\miniproject\\\\college_activity\\\\src\\\\Newpost.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import \"./Newpost.css\";\n\n// const NewPost = () => {\n//   const [fileNames, setFileNames] = useState([]); // Array to store file names\n//   const [title, setTitle] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [subCategory, setSubCategory] = useState(\"\");\n\n//   // Handle file selection\n//   const handleFileChange = (event) => {\n//     const file = event.target.files[0]; // Get the selected file\n//     if (file) {\n//       // Add the selected file's name to the list of file names\n//       setFileNames((prevFileNames) => [...prevFileNames, file.name]);\n//     }\n//   };\n\n//   // Handle post submission\n//   const handlePost = () => {\n//     alert(\"Post submitted successfully!\");\n//     console.log({\n//       title,\n//       description,\n//       category,\n//       subCategory,\n//       fileNames,\n//     });\n//   };\n\n//   // Handle saving the post as a draft\n//   const handleSaveDraft = () => {\n//     alert(\"Post saved as draft!\");\n//     console.log({\n//       title,\n//       description,\n//       category,\n//       subCategory,\n//       fileNames,\n//     });\n//   };\n\n//   // Remove file from the list\n//   const handleRemoveFile = (fileName) => {\n//     setFileNames((prevFileNames) => prevFileNames.filter((name) => name !== fileName));\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h2>New Post</h2>\n//       <form>\n//         {/* File upload section */}\n//         <div className=\"file-upload\">\n//           <label htmlFor=\"fileInput\">\n//             {fileNames.length > 0\n//               ? fileNames.join(\", \") // Display all uploaded file names\n//               : \"Click to browse or drop files here\"}\n//           </label>\n//           <input\n//             type=\"file\"\n//             id=\"fileInput\"\n//             onChange={handleFileChange}\n//             style={{ display: \"none\" }}\n//           />\n//         </div>\n\n//         {/* Title Input */}\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter title for the file\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           required\n//         />\n\n//         {/* Description Input */}\n//         <textarea\n//           placeholder=\"Write a description\"\n//           value={description}\n//           onChange={(e) => setDescription(e.target.value)}\n//           required\n//         ></textarea>\n\n//         {/* Category Selection */}\n//         <select\n//           value={category}\n//           onChange={(e) => setCategory(e.target.value)}\n//           required\n//         >\n//           <option value=\"\" disabled>Select a category</option>\n//           <option value=\"category1\">Category 1</option>\n//           <option value=\"category2\">Category 2</option>\n//         </select>\n\n//         {/* Subcategory Selection */}\n//         <select\n//           value={subCategory}\n//           onChange={(e) => setSubCategory(e.target.value)}\n//           required\n//         >\n//           <option value=\"\" disabled>Select a subcategory</option>\n//           <option value=\"subcategory1\">Subcategory 1</option>\n//           <option value=\"subcategory2\">Subcategory 2</option>\n//         </select>\n\n//         {/* Buttons */}\n//         <div className=\"button-container\">\n//           <button\n//             type=\"button\"\n//             className=\"save-draft\"\n//             onClick={handleSaveDraft}\n//           >\n//             Save as Draft\n//           </button>\n//           <button\n//             type=\"button\"\n//             className=\"post\"\n//             onClick={handlePost}\n//           >\n//             Post\n//           </button>\n//         </div>\n\n//         {/* Display the list of uploaded files with Remove option */}\n//         {fileNames.length > 0 && (\n//           <div className=\"uploaded-files\">\n//             <h4>Uploaded Files:</h4>\n//             <ul>\n//               {fileNames.map((fileName, index) => (\n//                 <li key={index}>\n//                   {fileName}\n//                   <span\n//                     onClick={() => handleRemoveFile(fileName)}\n//                     className=\"remove-file\"\n//                   >\n//                     Ã—\n//                   </span>\n//                 </li>\n//               ))}\n//             </ul>\n//           </div>\n//         )}\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default NewPost;\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./Upload.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadImage = () => {\n  _s();\n  const [image, setImage] = useState(null); // For storing the selected file\n  const [uploadStatus, setUploadStatus] = useState(\"\"); // For showing upload status\n\n  // Handle file selection\n  const handleFileChange = event => {\n    setImage(event.target.files[0]);\n  };\n\n  // Handle file upload\n  const handleUpload = async () => {\n    if (!image) {\n      alert(\"Please select an image to upload.\");\n      return;\n    }\n\n    // Create a FormData object for the Cloudinary upload\n    const formData = new FormData();\n    formData.append(\"file\", image);\n    formData.append(\"upload_preset\", \"YOUR_UPLOAD_PRESET\"); // Replace with your Cloudinary preset\n\n    try {\n      // Upload the image to Cloudinary\n      const cloudinaryResponse = await axios.post(\"https://api.cloudinary.com/v1_1/YOUR_CLOUD_NAME/image/upload\", formData);\n      const imageUrl = cloudinaryResponse.data.secure_url;\n\n      // Save the Cloudinary image URL to MongoDB\n      const serverResponse = await axios.post(\"http://localhost:3000/posts\", {\n        imageUrl // Send the Cloudinary URL to the backend\n      });\n      setUploadStatus(\"Image uploaded successfully!\");\n      console.log(\"Server response:\", serverResponse.data);\n    } catch (error) {\n      console.error(\"Error uploading image:\", error);\n      setUploadStatus(\"Failed to upload image.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), uploadStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: uploadStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadImage, \"GyFGrIIA+CMRzhqkCgPU2PQFRtM=\");\n_c = UploadImage;\nexport default UploadImage;\nvar _c;\n$RefreshReg$(_c, \"UploadImage\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","UploadImage","_s","image","setImage","uploadStatus","setUploadStatus","handleFileChange","event","target","files","handleUpload","alert","formData","FormData","append","cloudinaryResponse","post","imageUrl","data","secure_url","serverResponse","console","log","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/chpre/OneDrive/Desktop/college/PROJECTS/miniproject/college_activity/src/Newpost.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import \"./Newpost.css\";\r\n\r\n// const NewPost = () => {\r\n//   const [fileNames, setFileNames] = useState([]); // Array to store file names\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n//   const [category, setCategory] = useState(\"\");\r\n//   const [subCategory, setSubCategory] = useState(\"\");\r\n\r\n//   // Handle file selection\r\n//   const handleFileChange = (event) => {\r\n//     const file = event.target.files[0]; // Get the selected file\r\n//     if (file) {\r\n//       // Add the selected file's name to the list of file names\r\n//       setFileNames((prevFileNames) => [...prevFileNames, file.name]);\r\n//     }\r\n//   };\r\n\r\n//   // Handle post submission\r\n//   const handlePost = () => {\r\n//     alert(\"Post submitted successfully!\");\r\n//     console.log({\r\n//       title,\r\n//       description,\r\n//       category,\r\n//       subCategory,\r\n//       fileNames,\r\n//     });\r\n//   };\r\n\r\n//   // Handle saving the post as a draft\r\n//   const handleSaveDraft = () => {\r\n//     alert(\"Post saved as draft!\");\r\n//     console.log({\r\n//       title,\r\n//       description,\r\n//       category,\r\n//       subCategory,\r\n//       fileNames,\r\n//     });\r\n//   };\r\n\r\n//   // Remove file from the list\r\n//   const handleRemoveFile = (fileName) => {\r\n//     setFileNames((prevFileNames) => prevFileNames.filter((name) => name !== fileName));\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h2>New Post</h2>\r\n//       <form>\r\n//         {/* File upload section */}\r\n//         <div className=\"file-upload\">\r\n//           <label htmlFor=\"fileInput\">\r\n//             {fileNames.length > 0\r\n//               ? fileNames.join(\", \") // Display all uploaded file names\r\n//               : \"Click to browse or drop files here\"}\r\n//           </label>\r\n//           <input\r\n//             type=\"file\"\r\n//             id=\"fileInput\"\r\n//             onChange={handleFileChange}\r\n//             style={{ display: \"none\" }}\r\n//           />\r\n//         </div>\r\n\r\n//         {/* Title Input */}\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Enter title for the file\"\r\n//           value={title}\r\n//           onChange={(e) => setTitle(e.target.value)}\r\n//           required\r\n//         />\r\n\r\n//         {/* Description Input */}\r\n//         <textarea\r\n//           placeholder=\"Write a description\"\r\n//           value={description}\r\n//           onChange={(e) => setDescription(e.target.value)}\r\n//           required\r\n//         ></textarea>\r\n\r\n//         {/* Category Selection */}\r\n//         <select\r\n//           value={category}\r\n//           onChange={(e) => setCategory(e.target.value)}\r\n//           required\r\n//         >\r\n//           <option value=\"\" disabled>Select a category</option>\r\n//           <option value=\"category1\">Category 1</option>\r\n//           <option value=\"category2\">Category 2</option>\r\n//         </select>\r\n\r\n//         {/* Subcategory Selection */}\r\n//         <select\r\n//           value={subCategory}\r\n//           onChange={(e) => setSubCategory(e.target.value)}\r\n//           required\r\n//         >\r\n//           <option value=\"\" disabled>Select a subcategory</option>\r\n//           <option value=\"subcategory1\">Subcategory 1</option>\r\n//           <option value=\"subcategory2\">Subcategory 2</option>\r\n//         </select>\r\n\r\n//         {/* Buttons */}\r\n//         <div className=\"button-container\">\r\n//           <button\r\n//             type=\"button\"\r\n//             className=\"save-draft\"\r\n//             onClick={handleSaveDraft}\r\n//           >\r\n//             Save as Draft\r\n//           </button>\r\n//           <button\r\n//             type=\"button\"\r\n//             className=\"post\"\r\n//             onClick={handlePost}\r\n//           >\r\n//             Post\r\n//           </button>\r\n//         </div>\r\n\r\n//         {/* Display the list of uploaded files with Remove option */}\r\n//         {fileNames.length > 0 && (\r\n//           <div className=\"uploaded-files\">\r\n//             <h4>Uploaded Files:</h4>\r\n//             <ul>\r\n//               {fileNames.map((fileName, index) => (\r\n//                 <li key={index}>\r\n//                   {fileName}\r\n//                   <span\r\n//                     onClick={() => handleRemoveFile(fileName)}\r\n//                     className=\"remove-file\"\r\n//                   >\r\n//                     Ã—\r\n//                   </span>\r\n//                 </li>\r\n//               ))}\r\n//             </ul>\r\n//           </div>\r\n//         )}\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default NewPost;\r\n\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./Upload.css\";\r\n\r\nconst UploadImage = () => {\r\n  const [image, setImage] = useState(null); // For storing the selected file\r\n  const [uploadStatus, setUploadStatus] = useState(\"\"); // For showing upload status\r\n\r\n  // Handle file selection\r\n  const handleFileChange = (event) => {\r\n    setImage(event.target.files[0]);\r\n  };\r\n\r\n  // Handle file upload\r\n  const handleUpload = async () => {\r\n    if (!image) {\r\n      alert(\"Please select an image to upload.\");\r\n      return;\r\n    }\r\n\r\n    // Create a FormData object for the Cloudinary upload\r\n    const formData = new FormData();\r\n    formData.append(\"file\", image);\r\n    formData.append(\"upload_preset\", \"YOUR_UPLOAD_PRESET\"); // Replace with your Cloudinary preset\r\n\r\n    try {\r\n      // Upload the image to Cloudinary\r\n      const cloudinaryResponse = await axios.post(\r\n        \"https://api.cloudinary.com/v1_1/YOUR_CLOUD_NAME/image/upload\",\r\n        formData\r\n      );\r\n\r\n      const imageUrl = cloudinaryResponse.data.secure_url;\r\n\r\n      // Save the Cloudinary image URL to MongoDB\r\n      const serverResponse = await axios.post(\"http://localhost:3000/posts\", {\r\n        imageUrl, // Send the Cloudinary URL to the backend\r\n      });\r\n\r\n      setUploadStatus(\"Image uploaded successfully!\");\r\n      console.log(\"Server response:\", serverResponse.data);\r\n    } catch (error) {\r\n      console.error(\"Error uploading image:\", error);\r\n      setUploadStatus(\"Failed to upload image.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"upload-container\">\r\n      <h2>Upload Image</h2>\r\n      <input type=\"file\" accept=\"image/*\" onChange={handleFileChange} />\r\n      <button onClick={handleUpload}>Upload</button>\r\n      {uploadStatus && <p>{uploadStatus}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadImage;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEtD;EACA,MAAMU,gBAAgB,GAAIC,KAAK,IAAK;IAClCJ,QAAQ,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EACjC,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAACR,KAAK,EAAE;MACVS,KAAK,CAAC,mCAAmC,CAAC;MAC1C;IACF;;IAEA;IACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEZ,KAAK,CAAC;IAC9BU,QAAQ,CAACE,MAAM,CAAC,eAAe,EAAE,oBAAoB,CAAC,CAAC,CAAC;;IAExD,IAAI;MACF;MACA,MAAMC,kBAAkB,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CACzC,8DAA8D,EAC9DJ,QACF,CAAC;MAED,MAAMK,QAAQ,GAAGF,kBAAkB,CAACG,IAAI,CAACC,UAAU;;MAEnD;MACA,MAAMC,cAAc,GAAG,MAAMvB,KAAK,CAACmB,IAAI,CAAC,6BAA6B,EAAE;QACrEC,QAAQ,CAAE;MACZ,CAAC,CAAC;MAEFZ,eAAe,CAAC,8BAA8B,CAAC;MAC/CgB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,cAAc,CAACF,IAAI,CAAC;IACtD,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9ClB,eAAe,CAAC,yBAAyB,CAAC;IAC5C;EACF,CAAC;EAED,oBACEN,OAAA;IAAKyB,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC/B1B,OAAA;MAAA0B,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrB9B,OAAA;MAAO+B,IAAI,EAAC,MAAM;MAACC,MAAM,EAAC,SAAS;MAACC,QAAQ,EAAE1B;IAAiB;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClE9B,OAAA;MAAQkC,OAAO,EAAEvB,YAAa;MAAAe,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC7CzB,YAAY,iBAAIL,OAAA;MAAA0B,QAAA,EAAIrB;IAAY;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEV,CAAC;AAAC5B,EAAA,CAnDID,WAAW;AAAAkC,EAAA,GAAXlC,WAAW;AAqDjB,eAAeA,WAAW;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}