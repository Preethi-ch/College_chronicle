{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chpre\\\\OneDrive\\\\Desktop\\\\college\\\\PROJECTS\\\\miniproject\\\\college_activity\\\\src\\\\Newpost.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import \"./Newpost.css\";\n\n// const NewPost = ({ userEmail }) => {\n//   const [title, setTitle] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [subCategory, setSubCategory] = useState(\"\");\n//   const [link, setLink] = useState(\"\"); // State for link field\n//   const [files, setFiles] = useState([]);\n//   const [filePreviews, setFilePreviews] = useState([]);\n\n//   const subCategoriesMap = {\n//     clubs: [\"RMF\", \"Splashout\", \"VPOD\", \"Rhythmic Thunders\", \"Happy Club\"],\n//     academics: [\"First Year\", \"Second Year\", \"Third Year\", \"Fourth Year\"],\n//     skillhub: [\"Hackathons\", \"Coding Contests\", \"Training Programs\"],\n//   };\n\n//   const handleFileChange = (event) => {\n//     const selectedFiles = Array.from(event.target.files);\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\n\n//     const previews = selectedFiles.map((file) => ({\n//       name: file.name,\n//       url: URL.createObjectURL(file),\n//     }));\n\n//     setFilePreviews((prevPreviews) => [...prevPreviews, ...previews]);\n//   };\n\n//   const handleFileRemove = (index) => {\n//     setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));\n//     setFilePreviews((prevPreviews) => prevPreviews.filter((_, i) => i !== index));\n//   };\n\n//   const resetForm = () => {\n//     setTitle(\"\");\n//     setDescription(\"\");\n//     setCategory(\"\");\n//     setSubCategory(\"\");\n//     setLink(\"\");\n//     setFiles([]);\n//     setFilePreviews([]);\n//   };\n\n//   const handleSubmit = async (isDraft = false) => {\n//     if (!title || !description || !category) {\n//       alert(\"Please fill all the required fields!\");\n//       return;\n//     }\n\n//     if (!userEmail) {\n//       alert(\"Error: User email is missing!\");\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append(\"title\", title);\n//     formData.append(\"description\", description);\n//     formData.append(\"category\", category);\n//     formData.append(\"subCategory\", subCategory);\n//     formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\n//     formData.append(\"uploaderEmail\", userEmail);\n//     formData.append(\"link\", link);\n\n//     // Append media only if files are selected\n//     if (files.length > 0) {\n//       files.forEach((file) => {\n//         formData.append(\"media\", file);\n//       });\n//     }\n\n//     try {\n//       const response = await fetch(\"http://localhost:3000/posts/create-post\", {\n//         method: \"POST\",\n//         body: formData,\n//       });\n\n//       if (response.ok) {\n//         alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\n//         resetForm();\n//       } else {\n//         const error = await response.json();\n//         alert( `Error: ${error.error}`);\n//       }\n//     } catch (error) {\n//       console.error(\"Error submitting post:\", error);\n//       alert(\"Failed to submit post. Please try again later.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h2>New Post</h2>\n//       <form>\n//         {/* File Upload Section */}\n//         <div className=\"file-upload\">\n//           <label htmlFor=\"fileInput\">\n//             {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\n//           </label>\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\n//         </div>\n\n//         {/* Display Uploaded Files (Show File Names) */}\n//         <div className=\"uploaded-files\">\n//           {filePreviews.map((file, index) => (\n//             <div key={index} className=\"file-item\">\n//               <a href={file.url} target=\"_blank\" rel=\"noopener noreferrer\">{file.name}</a>\n//               <button type=\"button\" className=\"remove-button\" onClick={() => handleFileRemove(index)}>‚ùå</button>\n//             </div>\n//           ))}\n//         </div>\n\n//         {/* Text Fields */}\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter title\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           required\n//         />\n//         <textarea\n//           placeholder=\"Write a description\"\n//           value={description}\n//           onChange={(e) => setDescription(e.target.value)}\n//           required\n//         ></textarea>\n\n//         {/* Link Field */}\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter link (if any)\"\n//           value={link}\n//           onChange={(e) => setLink(e.target.value)}\n//         />\n\n//         {/* Category Selection */}\n//         <select\n//           value={category}\n//           onChange={(e) => {\n//             setCategory(e.target.value);\n//             setSubCategory(\"\");\n//           }}\n//           required\n//         >\n//           <option value=\"\" disabled>\n//             Select a category\n//           </option>\n//           <option value=\"events\">Events</option>\n//           <option value=\"clubs\">Clubs</option>\n//           <option value=\"academics\">Academics</option>\n//           <option value=\"notices\">Notices</option>\n//           <option value=\"skillhub\">Skillhub</option>\n//           <option value=\"placements\">Placements</option>\n//         </select>\n\n//         {/* Subcategory Dropdown */}\n//         {category && subCategoriesMap[category]?.length > 0 && (\n//           <select value={subCategory} onChange={(e) => setSubCategory(e.target.value)}>\n//             <option value=\"\" disabled>\n//               Select a subcategory\n//             </option>\n//             {subCategoriesMap[category].map((sub, index) => (\n//               <option key={index} value={sub.toLowerCase()}>\n//                 {sub}\n//               </option>\n//             ))}\n//           </select>\n//         )}\n\n//         {/* Buttons */}\n//         <div className=\"button-container\">\n//           <button type=\"button\" onClick={() => handleSubmit(false)}>\n//             Submit Post\n//           </button>\n//           <button type=\"button\" onClick={() => handleSubmit(true)}>\n//             Save as Draft\n//           </button>\n//           <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>\n//             Cancel\n//           </button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default NewPost;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import \"./Newpost.css\";\n\n// const NewPost = ({ userEmail }) => {\n//   const [draftId, setDraftId] = useState(null);\n//   const [title, setTitle] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [subCategory, setSubCategory] = useState(\"\");\n//   const [link, setLink] = useState(\"\");\n//   const [files, setFiles] = useState([]);\n//   const [existingMedia, setExistingMedia] = useState([]);\n//   const navigate = useNavigate();\n//   const location = useLocation();\n\n//   useEffect(() => {\n//     const queryParams = new URLSearchParams(location.search);\n//     const draftIdFromParams = queryParams.get(\"draftId\");\n\n//     if (draftIdFromParams) {\n//       setDraftId(draftIdFromParams);\n//       fetchDraftData(draftIdFromParams);\n//     }\n//   }, [location.search]);\n\n//   const fetchDraftData = async (id) => {\n//     try {\n//       const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\n//       if (!response.ok) throw new Error(\"Failed to fetch draft\");\n\n//       const draft = await response.json();\n//       setTitle(draft.title);\n//       setDescription(draft.description);\n//       setCategory(draft.category);\n//       setSubCategory(draft.subCategory || \"\");\n//       setLink(draft.link || \"\");\n//       setExistingMedia(draft.media || []);\n//     } catch (error) {\n//       console.error(\"Error fetching draft:\", error);\n//       alert(\"Could not load draft. Please try again.\");\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const selectedFiles = Array.from(event.target.files);\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\n//   };\n\n//   const resetForm = () => {\n//     setTitle(\"\");\n//     setDescription(\"\");\n//     setCategory(\"\");\n//     setSubCategory(\"\");\n//     setLink(\"\");\n//     setFiles([]);\n//     setExistingMedia([]);\n//     setDraftId(null);\n//     navigate(\"/drafts\");\n//   };\n\n//   const handleSubmit = async (isDraft = false) => {\n//     if (!title || !description || !category) {\n//       alert(\"Please fill all required fields!\");\n//       return;\n//     }\n\n//     if (!userEmail) {\n//       alert(\"Error: User email is missing!\");\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append(\"title\", title);\n//     formData.append(\"description\", description);\n//     formData.append(\"category\", category);\n//     formData.append(\"subCategory\", subCategory);\n//     formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\n//     formData.append(\"uploaderEmail\", userEmail);\n//     formData.append(\"link\", link);\n\n//     files.forEach((file) => {\n//       formData.append(\"media\", file);\n//     });\n\n//     try {\n//       const url = draftId\n//         ? `http://localhost:3000/draftsview/update/${draftId}`\n//         : \"http://localhost:3000/posts/create-post\";\n\n//       const response = await fetch(url, {\n//         method: draftId ? \"PUT\" : \"POST\",\n//         body: formData,\n//       });\n\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         throw new Error(errorData.error || \"Unknown error\");\n//       }\n\n//       alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\n//       resetForm();\n//     } catch (error) {\n//       console.error(\"Error submitting post:\", error);\n//       alert(\"Submission failed. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h2>{draftId ? \"Edit Draft\" : \"New Post\"}</h2>\n//       <form>\n//         <div className=\"file-upload\">\n//           <label htmlFor=\"fileInput\">\n//             {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\n//           </label>\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\n//         </div>\n\n//         <div className=\"uploaded-files\">\n//           {existingMedia.map((media, index) => (\n//             <div key={index} className=\"file-item\">\n//               <a href={media.url} target=\"_blank\" rel=\"noopener noreferrer\">\n//                 {media.url}\n//               </a>\n//             </div>\n//           ))}\n//         </div>\n\n//         <input type=\"text\" placeholder=\"Enter title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\n//         <textarea placeholder=\"Write a description\" value={description} onChange={(e) => setDescription(e.target.value)} required></textarea>\n//         <input type=\"text\" placeholder=\"Enter link (if any)\" value={link} onChange={(e) => setLink(e.target.value)} />\n\n//         <select value={category} onChange={(e) => { setCategory(e.target.value); setSubCategory(\"\"); }} required>\n//           <option value=\"\" disabled>Select a category</option>\n//           <option value=\"events\">Events</option>\n//           <option value=\"clubs\">Clubs</option>\n//           <option value=\"academics\">Academics</option>\n//           <option value=\"notices\">Notices</option>\n//           <option value=\"skillhub\">Skillhub</option>\n//           <option value=\"placements\">Placements</option>\n//         </select>\n\n//         <div className=\"button-container\">\n//           <button type=\"button\" onClick={() => handleSubmit(false)}>Submit Post</button>\n//           <button type=\"button\" onClick={() => handleSubmit(true)}>Save as Draft</button>\n//           <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>Cancel</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default NewPost;\n\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport \"./Newpost.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewPost = ({\n  userEmail\n}) => {\n  _s();\n  const [draftId, setDraftId] = useState(null);\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [subCategory, setSubCategory] = useState(\"\");\n  const [link, setLink] = useState(\"\");\n  const [files, setFiles] = useState([]);\n  const [existingMedia, setExistingMedia] = useState([]);\n  const location = useLocation();\n\n  // Subcategories based on category selection\n  const subCategoriesMap = {\n    clubs: [\"RMF\", \"Splashout\", \"VPOD\", \"Rhythmic Thunders\", \"Happy Club\"],\n    academics: [\"First Year\", \"Second Year\", \"Third Year\", \"Fourth Year\"],\n    skillhub: [\"Hackathons\", \"Coding Contests\", \"Training Programs\"]\n  };\n  useEffect(() => {\n    const queryParams = new URLSearchParams(location.search);\n    const draftIdFromParams = queryParams.get(\"draftId\");\n    if (draftIdFromParams) {\n      setDraftId(draftIdFromParams);\n      fetchDraftData(draftIdFromParams);\n    }\n  }, [location.search]);\n  const fetchDraftData = async id => {\n    try {\n      const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\n      if (!response.ok) throw new Error(\"Failed to fetch draft\");\n      const draft = await response.json();\n      setTitle(draft.title);\n      setDescription(draft.description);\n      setCategory(draft.category);\n      setSubCategory(draft.subCategory || \"\");\n      setLink(draft.link || \"\");\n      setExistingMedia(draft.media || []);\n    } catch (error) {\n      console.error(\"Error fetching draft:\", error);\n      alert(\"Could not load draft. Please try again.\");\n    }\n  };\n  const handleFileChange = event => {\n    const selectedFiles = Array.from(event.target.files);\n    setFiles(prevFiles => [...prevFiles, ...selectedFiles]);\n  };\n  const resetForm = () => {\n    setTitle(\"\");\n    setDescription(\"\");\n    setCategory(\"\");\n    setSubCategory(\"\");\n    setLink(\"\");\n    setFiles([]);\n    setExistingMedia([]);\n    setDraftId(null);\n  };\n  const handleSubmit = async (isDraft = false) => {\n    if (!title || !description || !category) {\n      alert(\"Please fill all required fields!\");\n      return;\n    }\n    if (!userEmail) {\n      alert(\"Error: User email is missing!\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"title\", title);\n    formData.append(\"description\", description);\n    formData.append(\"category\", category);\n    formData.append(\"subCategory\", subCategory);\n    formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\n    formData.append(\"uploaderEmail\", userEmail);\n    formData.append(\"link\", link);\n    files.forEach(file => formData.append(\"media\", file));\n    try {\n      const url = draftId ? `http://localhost:3000/posts/update/${draftId}` : \"http://localhost:3000/posts/create-post\";\n      const response = await fetch(url, {\n        method: draftId ? \"PUT\" : \"POST\",\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Unknown error\");\n      }\n      alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\n      if (!isDraft && draftId) {\n        await fetch(`http://localhost:3000/draftsview/delete/${draftId}`, {\n          method: \"DELETE\"\n        });\n      }\n      resetForm();\n    } catch (error) {\n      console.error(\"Error submitting post:\", error);\n      alert(\"Submission failed. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: draftId ? \"Edit Draft\" : \"New Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-upload\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"fileInput\",\n          children: files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          id: \"fileInput\",\n          onChange: handleFileChange,\n          multiple: true,\n          style: {\n            display: \"none\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"uploaded-files\",\n        children: existingMedia.map((media, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-item\",\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: media.url,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: media.url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter title\",\n        value: title,\n        onChange: e => setTitle(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Write a description\",\n        value: description,\n        onChange: e => setDescription(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter link (if any)\",\n        value: link,\n        onChange: e => setLink(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: category,\n        onChange: e => {\n          setCategory(e.target.value);\n          setSubCategory(\"\");\n        },\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select a category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"events\",\n          children: \"Events\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"clubs\",\n          children: \"Clubs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"academics\",\n          children: \"Academics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"notices\",\n          children: \"Notices\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"skillhub\",\n          children: \"Skillhub\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"placements\",\n          children: \"Placements\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 9\n      }, this), category && subCategoriesMap[category] ? /*#__PURE__*/_jsxDEV(\"select\", {\n        value: subCategory,\n        onChange: e => setSubCategory(e.target.value),\n        disabled: !category,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select a subcategory\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 13\n        }, this), subCategoriesMap[category].map((sub, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: sub,\n          children: sub\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => handleSubmit(false),\n          children: \"Submit Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => handleSubmit(true),\n          children: \"Save as Draft\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"cancel-button\",\n          onClick: resetForm,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 467,\n    columnNumber: 5\n  }, this);\n};\n_s(NewPost, \"HZpVmIpJDHhtWfYzhXONsp37ocA=\", false, function () {\n  return [useLocation];\n});\n_c = NewPost;\nexport default NewPost;\nvar _c;\n$RefreshReg$(_c, \"NewPost\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","jsxDEV","_jsxDEV","NewPost","userEmail","_s","draftId","setDraftId","title","setTitle","description","setDescription","category","setCategory","subCategory","setSubCategory","link","setLink","files","setFiles","existingMedia","setExistingMedia","location","subCategoriesMap","clubs","academics","skillhub","queryParams","URLSearchParams","search","draftIdFromParams","get","fetchDraftData","id","response","fetch","ok","Error","draft","json","media","error","console","alert","handleFileChange","event","selectedFiles","Array","from","target","prevFiles","resetForm","handleSubmit","isDraft","formData","FormData","append","forEach","file","url","method","body","errorData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","length","type","onChange","multiple","style","display","map","index","href","rel","placeholder","value","e","required","disabled","sub","onClick","_c","$RefreshReg$"],"sources":["C:/Users/chpre/OneDrive/Desktop/college/PROJECTS/miniproject/college_activity/src/Newpost.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import \"./Newpost.css\";\r\n\r\n\r\n// const NewPost = ({ userEmail }) => {\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n//   const [category, setCategory] = useState(\"\");\r\n//   const [subCategory, setSubCategory] = useState(\"\");\r\n//   const [link, setLink] = useState(\"\"); // State for link field\r\n//   const [files, setFiles] = useState([]);\r\n//   const [filePreviews, setFilePreviews] = useState([]);\r\n\r\n//   const subCategoriesMap = {\r\n//     clubs: [\"RMF\", \"Splashout\", \"VPOD\", \"Rhythmic Thunders\", \"Happy Club\"],\r\n//     academics: [\"First Year\", \"Second Year\", \"Third Year\", \"Fourth Year\"],\r\n//     skillhub: [\"Hackathons\", \"Coding Contests\", \"Training Programs\"],\r\n//   };\r\n\r\n//   const handleFileChange = (event) => {\r\n//     const selectedFiles = Array.from(event.target.files);\r\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\r\n\r\n//     const previews = selectedFiles.map((file) => ({\r\n//       name: file.name,\r\n//       url: URL.createObjectURL(file),\r\n//     }));\r\n\r\n//     setFilePreviews((prevPreviews) => [...prevPreviews, ...previews]);\r\n//   };\r\n\r\n//   const handleFileRemove = (index) => {\r\n//     setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));\r\n//     setFilePreviews((prevPreviews) => prevPreviews.filter((_, i) => i !== index));\r\n//   };\r\n\r\n//   const resetForm = () => {\r\n//     setTitle(\"\");\r\n//     setDescription(\"\");\r\n//     setCategory(\"\");\r\n//     setSubCategory(\"\");\r\n//     setLink(\"\");\r\n//     setFiles([]);\r\n//     setFilePreviews([]);\r\n//   };\r\n\r\n//   const handleSubmit = async (isDraft = false) => {\r\n//     if (!title || !description || !category) {\r\n//       alert(\"Please fill all the required fields!\");\r\n//       return;\r\n//     }\r\n  \r\n//     if (!userEmail) {\r\n//       alert(\"Error: User email is missing!\");\r\n//       return;\r\n//     }\r\n  \r\n//     const formData = new FormData();\r\n//     formData.append(\"title\", title);\r\n//     formData.append(\"description\", description);\r\n//     formData.append(\"category\", category);\r\n//     formData.append(\"subCategory\", subCategory);\r\n//     formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\r\n//     formData.append(\"uploaderEmail\", userEmail);\r\n//     formData.append(\"link\", link);\r\n  \r\n//     // Append media only if files are selected\r\n//     if (files.length > 0) {\r\n//       files.forEach((file) => {\r\n//         formData.append(\"media\", file);\r\n//       });\r\n//     }\r\n  \r\n//     try {\r\n//       const response = await fetch(\"http://localhost:3000/posts/create-post\", {\r\n//         method: \"POST\",\r\n//         body: formData,\r\n//       });\r\n  \r\n//       if (response.ok) {\r\n//         alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\r\n//         resetForm();\r\n//       } else {\r\n//         const error = await response.json();\r\n//         alert( `Error: ${error.error}`);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error submitting post:\", error);\r\n//       alert(\"Failed to submit post. Please try again later.\");\r\n//     }\r\n//   };\r\n  \r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h2>New Post</h2>\r\n//       <form>\r\n//         {/* File Upload Section */}\r\n//         <div className=\"file-upload\">\r\n//           <label htmlFor=\"fileInput\">\r\n//             {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\r\n//           </label>\r\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\r\n//         </div>\r\n\r\n//         {/* Display Uploaded Files (Show File Names) */}\r\n//         <div className=\"uploaded-files\">\r\n//           {filePreviews.map((file, index) => (\r\n//             <div key={index} className=\"file-item\">\r\n//               <a href={file.url} target=\"_blank\" rel=\"noopener noreferrer\">{file.name}</a>\r\n//               <button type=\"button\" className=\"remove-button\" onClick={() => handleFileRemove(index)}>‚ùå</button>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n\r\n//         {/* Text Fields */}\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Enter title\"\r\n//           value={title}\r\n//           onChange={(e) => setTitle(e.target.value)}\r\n//           required\r\n//         />\r\n//         <textarea\r\n//           placeholder=\"Write a description\"\r\n//           value={description}\r\n//           onChange={(e) => setDescription(e.target.value)}\r\n//           required\r\n//         ></textarea>\r\n\r\n//         {/* Link Field */}\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Enter link (if any)\"\r\n//           value={link}\r\n//           onChange={(e) => setLink(e.target.value)}\r\n//         />\r\n\r\n//         {/* Category Selection */}\r\n//         <select\r\n//           value={category}\r\n//           onChange={(e) => {\r\n//             setCategory(e.target.value);\r\n//             setSubCategory(\"\");\r\n//           }}\r\n//           required\r\n//         >\r\n//           <option value=\"\" disabled>\r\n//             Select a category\r\n//           </option>\r\n//           <option value=\"events\">Events</option>\r\n//           <option value=\"clubs\">Clubs</option>\r\n//           <option value=\"academics\">Academics</option>\r\n//           <option value=\"notices\">Notices</option>\r\n//           <option value=\"skillhub\">Skillhub</option>\r\n//           <option value=\"placements\">Placements</option>\r\n//         </select>\r\n\r\n//         {/* Subcategory Dropdown */}\r\n//         {category && subCategoriesMap[category]?.length > 0 && (\r\n//           <select value={subCategory} onChange={(e) => setSubCategory(e.target.value)}>\r\n//             <option value=\"\" disabled>\r\n//               Select a subcategory\r\n//             </option>\r\n//             {subCategoriesMap[category].map((sub, index) => (\r\n//               <option key={index} value={sub.toLowerCase()}>\r\n//                 {sub}\r\n//               </option>\r\n//             ))}\r\n//           </select>\r\n//         )}\r\n\r\n//         {/* Buttons */}\r\n//         <div className=\"button-container\">\r\n//           <button type=\"button\" onClick={() => handleSubmit(false)}>\r\n//             Submit Post\r\n//           </button>\r\n//           <button type=\"button\" onClick={() => handleSubmit(true)}>\r\n//             Save as Draft\r\n//           </button>\r\n//           <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>\r\n//             Cancel\r\n//           </button>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default NewPost;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useLocation, useNavigate } from \"react-router-dom\";\r\n// import \"./Newpost.css\";\r\n\r\n// const NewPost = ({ userEmail }) => {\r\n//   const [draftId, setDraftId] = useState(null);\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n//   const [category, setCategory] = useState(\"\");\r\n//   const [subCategory, setSubCategory] = useState(\"\");\r\n//   const [link, setLink] = useState(\"\");\r\n//   const [files, setFiles] = useState([]);\r\n//   const [existingMedia, setExistingMedia] = useState([]);\r\n//   const navigate = useNavigate();\r\n//   const location = useLocation();\r\n\r\n//   useEffect(() => {\r\n//     const queryParams = new URLSearchParams(location.search);\r\n//     const draftIdFromParams = queryParams.get(\"draftId\");\r\n\r\n//     if (draftIdFromParams) {\r\n//       setDraftId(draftIdFromParams);\r\n//       fetchDraftData(draftIdFromParams);\r\n//     }\r\n//   }, [location.search]);\r\n\r\n//   const fetchDraftData = async (id) => {\r\n//     try {\r\n//       const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\r\n//       if (!response.ok) throw new Error(\"Failed to fetch draft\");\r\n\r\n//       const draft = await response.json();\r\n//       setTitle(draft.title);\r\n//       setDescription(draft.description);\r\n//       setCategory(draft.category);\r\n//       setSubCategory(draft.subCategory || \"\");\r\n//       setLink(draft.link || \"\");\r\n//       setExistingMedia(draft.media || []);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching draft:\", error);\r\n//       alert(\"Could not load draft. Please try again.\");\r\n//     }\r\n//   };\r\n\r\n//   const handleFileChange = (event) => {\r\n//     const selectedFiles = Array.from(event.target.files);\r\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\r\n//   };\r\n\r\n//   const resetForm = () => {\r\n//     setTitle(\"\");\r\n//     setDescription(\"\");\r\n//     setCategory(\"\");\r\n//     setSubCategory(\"\");\r\n//     setLink(\"\");\r\n//     setFiles([]);\r\n//     setExistingMedia([]);\r\n//     setDraftId(null);\r\n//     navigate(\"/drafts\");\r\n//   };\r\n\r\n//   const handleSubmit = async (isDraft = false) => {\r\n//     if (!title || !description || !category) {\r\n//       alert(\"Please fill all required fields!\");\r\n//       return;\r\n//     }\r\n\r\n//     if (!userEmail) {\r\n//       alert(\"Error: User email is missing!\");\r\n//       return;\r\n//     }\r\n\r\n//     const formData = new FormData();\r\n//     formData.append(\"title\", title);\r\n//     formData.append(\"description\", description);\r\n//     formData.append(\"category\", category);\r\n//     formData.append(\"subCategory\", subCategory);\r\n//     formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\r\n//     formData.append(\"uploaderEmail\", userEmail);\r\n//     formData.append(\"link\", link);\r\n\r\n//     files.forEach((file) => {\r\n//       formData.append(\"media\", file);\r\n//     });\r\n\r\n//     try {\r\n//       const url = draftId\r\n//         ? `http://localhost:3000/draftsview/update/${draftId}`\r\n//         : \"http://localhost:3000/posts/create-post\";\r\n\r\n//       const response = await fetch(url, {\r\n//         method: draftId ? \"PUT\" : \"POST\",\r\n//         body: formData,\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         const errorData = await response.json();\r\n//         throw new Error(errorData.error || \"Unknown error\");\r\n//       }\r\n\r\n//       alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\r\n//       resetForm();\r\n//     } catch (error) {\r\n//       console.error(\"Error submitting post:\", error);\r\n//       alert(\"Submission failed. Please try again.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h2>{draftId ? \"Edit Draft\" : \"New Post\"}</h2>\r\n//       <form>\r\n//         <div className=\"file-upload\">\r\n//           <label htmlFor=\"fileInput\">\r\n//             {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\r\n//           </label>\r\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\r\n//         </div>\r\n\r\n//         <div className=\"uploaded-files\">\r\n//           {existingMedia.map((media, index) => (\r\n//             <div key={index} className=\"file-item\">\r\n//               <a href={media.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n//                 {media.url}\r\n//               </a>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n\r\n//         <input type=\"text\" placeholder=\"Enter title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\r\n//         <textarea placeholder=\"Write a description\" value={description} onChange={(e) => setDescription(e.target.value)} required></textarea>\r\n//         <input type=\"text\" placeholder=\"Enter link (if any)\" value={link} onChange={(e) => setLink(e.target.value)} />\r\n\r\n//         <select value={category} onChange={(e) => { setCategory(e.target.value); setSubCategory(\"\"); }} required>\r\n//           <option value=\"\" disabled>Select a category</option>\r\n//           <option value=\"events\">Events</option>\r\n//           <option value=\"clubs\">Clubs</option>\r\n//           <option value=\"academics\">Academics</option>\r\n//           <option value=\"notices\">Notices</option>\r\n//           <option value=\"skillhub\">Skillhub</option>\r\n//           <option value=\"placements\">Placements</option>\r\n//         </select>\r\n\r\n//         <div className=\"button-container\">\r\n//           <button type=\"button\" onClick={() => handleSubmit(false)}>Submit Post</button>\r\n//           <button type=\"button\" onClick={() => handleSubmit(true)}>Save as Draft</button>\r\n//           <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>Cancel</button>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default NewPost;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport \"./Newpost.css\";\r\n\r\nconst NewPost = ({ userEmail }) => {\r\n  const [draftId, setDraftId] = useState(null);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const [subCategory, setSubCategory] = useState(\"\");\r\n  const [link, setLink] = useState(\"\");\r\n  const [files, setFiles] = useState([]);\r\n  const [existingMedia, setExistingMedia] = useState([]);\r\n  const location = useLocation();\r\n\r\n  // Subcategories based on category selection\r\n  const subCategoriesMap = {\r\n    clubs: [\"RMF\", \"Splashout\", \"VPOD\", \"Rhythmic Thunders\", \"Happy Club\"],\r\n    academics: [\"First Year\", \"Second Year\", \"Third Year\", \"Fourth Year\"],\r\n    skillhub: [\"Hackathons\", \"Coding Contests\", \"Training Programs\"],\r\n  };\r\n\r\n  useEffect(() => {\r\n    const queryParams = new URLSearchParams(location.search);\r\n    const draftIdFromParams = queryParams.get(\"draftId\");\r\n\r\n    if (draftIdFromParams) {\r\n      setDraftId(draftIdFromParams);\r\n      fetchDraftData(draftIdFromParams);\r\n    }\r\n  }, [location.search]);\r\n\r\n  const fetchDraftData = async (id) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\r\n      if (!response.ok) throw new Error(\"Failed to fetch draft\");\r\n\r\n      const draft = await response.json();\r\n      setTitle(draft.title);\r\n      setDescription(draft.description);\r\n      setCategory(draft.category);\r\n      setSubCategory(draft.subCategory || \"\");\r\n      setLink(draft.link || \"\");\r\n      setExistingMedia(draft.media || []);\r\n    } catch (error) {\r\n      console.error(\"Error fetching draft:\", error);\r\n      alert(\"Could not load draft. Please try again.\");\r\n    }\r\n  };\r\n\r\n  const handleFileChange = (event) => {\r\n    const selectedFiles = Array.from(event.target.files);\r\n    setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setTitle(\"\");\r\n    setDescription(\"\");\r\n    setCategory(\"\");\r\n    setSubCategory(\"\");\r\n    setLink(\"\");\r\n    setFiles([]);\r\n    setExistingMedia([]);\r\n    setDraftId(null);\r\n  };\r\n\r\n  const handleSubmit = async (isDraft = false) => {\r\n    if (!title || !description || !category) {\r\n      alert(\"Please fill all required fields!\");\r\n      return;\r\n    }\r\n\r\n    if (!userEmail) {\r\n      alert(\"Error: User email is missing!\");\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"title\", title);\r\n    formData.append(\"description\", description);\r\n    formData.append(\"category\", category);\r\n    formData.append(\"subCategory\", subCategory);\r\n    formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\r\n    formData.append(\"uploaderEmail\", userEmail);\r\n    formData.append(\"link\", link);\r\n    \r\n    files.forEach((file) => formData.append(\"media\", file));\r\n\r\n    try {\r\n      const url = draftId\r\n        ? `http://localhost:3000/posts/update/${draftId}`\r\n        : \"http://localhost:3000/posts/create-post\";\r\n\r\n      const response = await fetch(url, {\r\n        method: draftId ? \"PUT\" : \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || \"Unknown error\");\r\n      }\r\n\r\n      alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\r\n      \r\n      if (!isDraft && draftId) {\r\n        await fetch(`http://localhost:3000/draftsview/delete/${draftId}`, { method: \"DELETE\" });\r\n      }\r\n\r\n      resetForm();\r\n    } catch (error) {\r\n      console.error(\"Error submitting post:\", error);\r\n      alert(\"Submission failed. Please try again.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>{draftId ? \"Edit Draft\" : \"New Post\"}</h2>\r\n      <form>\r\n        {/* File Upload */}\r\n        <div className=\"file-upload\">\r\n          <label htmlFor=\"fileInput\">\r\n            {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\r\n          </label>\r\n          <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\r\n        </div>\r\n\r\n        {/* Display Uploaded Files */}\r\n        <div className=\"uploaded-files\">\r\n          {existingMedia.map((media, index) => (\r\n            <div key={index} className=\"file-item\">\r\n              <a href={media.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                {media.url}\r\n              </a>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Form Fields */}\r\n        <input type=\"text\" placeholder=\"Enter title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\r\n        <textarea placeholder=\"Write a description\" value={description} onChange={(e) => setDescription(e.target.value)} required></textarea>\r\n        <input type=\"text\" placeholder=\"Enter link (if any)\" value={link} onChange={(e) => setLink(e.target.value)} />\r\n\r\n        {/* Category Selection */}\r\n        <select value={category} onChange={(e) => { setCategory(e.target.value); setSubCategory(\"\"); }} required>\r\n          <option value=\"\" disabled>Select a category</option>\r\n          <option value=\"events\">Events</option>\r\n          <option value=\"clubs\">Clubs</option>\r\n          <option value=\"academics\">Academics</option>\r\n          <option value=\"notices\">Notices</option>\r\n          <option value=\"skillhub\">Skillhub</option>\r\n          <option value=\"placements\">Placements</option>\r\n        </select>\r\n\r\n        {/* Subcategory Selection */}\r\n        {category && subCategoriesMap[category] ? (\r\n          <select value={subCategory} onChange={(e) => setSubCategory(e.target.value)} disabled={!category}>\r\n            <option value=\"\" disabled>Select a subcategory</option>\r\n            {subCategoriesMap[category].map((sub, index) => (\r\n              <option key={index} value={sub}>{sub}</option>\r\n            ))}\r\n          </select>\r\n        ) : null}\r\n\r\n        {/* Buttons */}\r\n        <div className=\"button-container\">\r\n          <button type=\"button\" onClick={() => handleSubmit(false)}>Submit Post</button>\r\n          <button type=\"button\" onClick={() => handleSubmit(true)}>Save as Draft</button>\r\n          <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>Cancel</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPost;\r\n"],"mappings":";;AAAA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}