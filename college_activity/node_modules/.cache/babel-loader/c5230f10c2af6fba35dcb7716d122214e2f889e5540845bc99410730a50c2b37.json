{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import axiosInstance from \"./api/axiosfetch\"; // Axios instance for API calls\n// import \"./StudentProfile.css\";\n\n// const StudentProfile = () => {\n//   const [profile, setProfile] = useState({\n//     name: \"N/A\",\n//     email: \"N/A\",\n//     studentid: \"N/A\",\n//     branch: \"N/A\",\n//     phoneno: \"N/A\",\n//   });\n\n//   const [profileImage, setProfileImage] = useState(\n//     \"https://via.placeholder.com/100\" // Default placeholder image\n//   );\n\n//   const [showOptions, setShowOptions] = useState(false);\n//   const userEmail = localStorage.getItem(\"userEmail\"); // ✅ Just use localStorage directly\n\n//   useEffect(() => {\n//     console.log(\"Retrieved userEmail from localStorage:\", userEmail); // ✅ Debugging log\n\n//     if (!userEmail) {\n//       console.error(\"❌ No user email found in localStorage. Please log in.\");\n//       return;\n//     }\n\n//     const fetchProfileData = async () => {\n//       try {\n//         // Update API URL to fetch data based on the user's email\n//         const response = await axiosInstance.get(`/studentinfo/${userEmail}`);\n//         console.log(\"✅ API Response:\", response.data);\n\n//         if (!response.data) {\n//           console.error(\"❌ No user data received.\");\n//           return;\n//         }\n\n//         const data = response.data;\n//         setProfile({\n//           name: data.name || \"N/A\",\n//           email: data.email || \"N/A\",\n//           studentid: data.studentid || \"N/A\",\n//           branch: data.branch || \"N/A\",\n//           phoneno: data.phoneno || \"N/A\",\n//         });\n\n//         if (data.image) {\n//           setProfileImage(data.image); // Assuming image is stored as a base64 string\n//         }\n//       } catch (err) {\n//         console.error(\"❌ Error fetching profile data:\", err);\n//       }\n//     };\n\n//     fetchProfileData();\n//   }, [userEmail]); // ✅ Now updates dynamically when userEmail changes\n\n//   const handleImageUpload = (e) => {\n//     const file = e.target.files[0];\n//     if (file) {\n//       const reader = new FileReader();\n//       reader.onload = () => {\n//         setProfileImage(reader.result);\n//       };\n//       reader.readAsDataURL(file);\n//     }\n//     setShowOptions(false);\n//   };\n\n//   const handleCaptureImage = async () => {\n//     try {\n//       const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n//       const video = document.createElement(\"video\");\n//       video.srcObject = stream;\n//       video.play();\n\n//       await new Promise((resolve) => (video.onloadedmetadata = resolve));\n\n//       const canvas = document.createElement(\"canvas\");\n//       canvas.width = video.videoWidth;\n//       canvas.height = video.videoHeight;\n//       const context = canvas.getContext(\"2d\");\n//       context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n//       stream.getTracks().forEach((track) => track.stop());\n//       setProfileImage(canvas.toDataURL());\n//     } catch (error) {\n//       console.error(\"❌ Error accessing the webcam:\", error);\n//     }\n//     setShowOptions(false);\n//   };\n\n//   const handleDeleteImage = () => {\n//     setProfileImage(\"https://via.placeholder.com/100\");\n//     setShowOptions(false);\n//   };\n\n//   return (\n//     <div className=\"profile-container\">\n//       <div className=\"profile-card\">\n//         <div className=\"profile-image-container\">\n//           <img src={profileImage} alt=\"Profile\" className=\"profile-image\" />\n//           <button\n//             onClick={() => setShowOptions(!showOptions)}\n//             className=\"camera-icon-button\"\n//           >\n//             <img\n//               src=\"/images/camera-icon.jpg\"\n//               alt=\"Camera Icon\"\n//               className=\"camera-icon\"\n//             />\n//           </button>\n//         </div>\n//         <h2 className=\"profile-username\">{profile.name}</h2>\n//         <p className=\"profile-role\">Student</p>\n//         <div className=\"profile-details\">\n//           <p>\n//             <strong>Name:</strong> {profile.name}\n//           </p>\n//           <p>\n//             <strong>Email:</strong> {profile.email}\n//           </p>\n//           <p>\n//             <strong>Registration No:</strong> {profile.studentid}\n//           </p>\n//           <p>\n//             <strong>Department:</strong> {profile.branch}\n//           </p>\n//           <p>\n//             <strong>Phone Number:</strong> {profile.phoneno}\n//           </p>\n//         </div>\n//         {showOptions && (\n//           <div className=\"options-menu\">\n//             <input\n//               type=\"file\"\n//               accept=\"image/*\"\n//               onChange={handleImageUpload}\n//               className=\"upload-button\"\n//             />\n//             <div className=\"capture-delete-row\">\n//               <button onClick={handleCaptureImage} className=\"capture-button\">\n//                 Capture Image\n//               </button>\n//               <button onClick={handleDeleteImage} className=\"delete-button\">\n//                 <img\n//                   src=\"/images/delete-icon.jpg\"\n//                   alt=\"Delete\"\n//                   className=\"dustbin-icon\"\n//                 />\n//               </button>\n//             </div>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default StudentProfile;\n\nconst express = require(\"express\");\nconst router = express.Router();\nconst multer = require(\"multer\");\nconst cloudinary = require(\"cloudinary\").v2;\nconst {\n  CloudinaryStorage\n} = require(\"multer-storage-cloudinary\");\nconst Student = require(\"../models/student\");\n\n// Cloudinary configuration\ncloudinary.config({\n  cloud_name: \"YOUR_CLOUD_NAME\",\n  api_key: \"YOUR_API_KEY\",\n  api_secret: \"YOUR_API_SECRET\"\n});\n\n// Multer-Cloudinary configuration\nconst storage = new CloudinaryStorage({\n  cloudinary: cloudinary,\n  params: {\n    folder: \"student_profiles\",\n    // Folder in Cloudinary\n    allowed_formats: [\"jpg\", \"png\", \"jpeg\"] // Allowed file formats\n  }\n});\nconst upload = multer({\n  storage: storage\n});\n\n// Route to fetch student details\nrouter.get(\"/:email\", async (req, res) => {\n  const {\n    email\n  } = req.params;\n  const escapedEmail = email.replace(/\\./g, \"\\\\.\"); // Escape dots in email\n\n  try {\n    const student = await Student.findOne({\n      email: new RegExp(`^${escapedEmail}$`, \"i\")\n    });\n    if (!student) {\n      return res.status(404).json({\n        message: \"Student not found\"\n      });\n    }\n    res.json(student);\n  } catch (err) {\n    console.error(\"Error fetching student details:\", err);\n    res.status(500).json({\n      message: \"Server error\"\n    });\n  }\n});\n\n// Route to upload and update student's profile image\nrouter.post(\"/:email/upload-image\", upload.single(\"image\"), async (req, res) => {\n  const {\n    email\n  } = req.params;\n  try {\n    if (!req.file || !req.file.path) {\n      return res.status(400).json({\n        message: \"Image upload failed\"\n      });\n    }\n    const imageUrl = req.file.path;\n    const student = await Student.findOneAndUpdate({\n      email: new RegExp(`^${email}$`, \"i\")\n    }, {\n      image: imageUrl\n    }, {\n      new: true\n    });\n    if (!student) {\n      return res.status(404).json({\n        message: \"Student not found\"\n      });\n    }\n    res.json({\n      message: \"Image uploaded successfully\",\n      student\n    });\n  } catch (err) {\n    console.error(\"Error uploading image:\", err);\n    res.status(500).json({\n      message: \"Server error\"\n    });\n  }\n});\n\n// Route to delete student's profile image\nrouter.delete(\"/:email/delete-image\", async (req, res) => {\n  const {\n    email\n  } = req.params;\n  try {\n    const student = await Student.findOneAndUpdate({\n      email: new RegExp(`^${email}$`, \"i\")\n    }, {\n      image: null\n    }, {\n      new: true\n    });\n    if (!student) {\n      return res.status(404).json({\n        message: \"Student not found\"\n      });\n    }\n    res.json({\n      message: \"Image deleted successfully\",\n      student\n    });\n  } catch (err) {\n    console.error(\"Error deleting image:\", err);\n    res.status(500).json({\n      message: \"Server error\"\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","multer","cloudinary","v2","CloudinaryStorage","Student","config","cloud_name","api_key","api_secret","storage","params","folder","allowed_formats","upload","get","req","res","email","escapedEmail","replace","student","findOne","RegExp","status","json","message","err","console","error","post","single","file","path","imageUrl","findOneAndUpdate","image","new","delete","module","exports"],"sources":["C:/Users/chpre/OneDrive/Desktop/college/PROJECTS/miniproject/college_activity/src/studentprofile.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import axiosInstance from \"./api/axiosfetch\"; // Axios instance for API calls\r\n// import \"./StudentProfile.css\";\r\n\r\n// const StudentProfile = () => {\r\n//   const [profile, setProfile] = useState({\r\n//     name: \"N/A\",\r\n//     email: \"N/A\",\r\n//     studentid: \"N/A\",\r\n//     branch: \"N/A\",\r\n//     phoneno: \"N/A\",\r\n//   });\r\n\r\n//   const [profileImage, setProfileImage] = useState(\r\n//     \"https://via.placeholder.com/100\" // Default placeholder image\r\n//   );\r\n\r\n//   const [showOptions, setShowOptions] = useState(false);\r\n//   const userEmail = localStorage.getItem(\"userEmail\"); // ✅ Just use localStorage directly\r\n\r\n//   useEffect(() => {\r\n//     console.log(\"Retrieved userEmail from localStorage:\", userEmail); // ✅ Debugging log\r\n\r\n//     if (!userEmail) {\r\n//       console.error(\"❌ No user email found in localStorage. Please log in.\");\r\n//       return;\r\n//     }\r\n\r\n//     const fetchProfileData = async () => {\r\n//       try {\r\n//         // Update API URL to fetch data based on the user's email\r\n//         const response = await axiosInstance.get(`/studentinfo/${userEmail}`);\r\n//         console.log(\"✅ API Response:\", response.data);\r\n\r\n//         if (!response.data) {\r\n//           console.error(\"❌ No user data received.\");\r\n//           return;\r\n//         }\r\n\r\n//         const data = response.data;\r\n//         setProfile({\r\n//           name: data.name || \"N/A\",\r\n//           email: data.email || \"N/A\",\r\n//           studentid: data.studentid || \"N/A\",\r\n//           branch: data.branch || \"N/A\",\r\n//           phoneno: data.phoneno || \"N/A\",\r\n//         });\r\n\r\n//         if (data.image) {\r\n//           setProfileImage(data.image); // Assuming image is stored as a base64 string\r\n//         }\r\n//       } catch (err) {\r\n//         console.error(\"❌ Error fetching profile data:\", err);\r\n//       }\r\n//     };\r\n\r\n//     fetchProfileData();\r\n//   }, [userEmail]); // ✅ Now updates dynamically when userEmail changes\r\n\r\n//   const handleImageUpload = (e) => {\r\n//     const file = e.target.files[0];\r\n//     if (file) {\r\n//       const reader = new FileReader();\r\n//       reader.onload = () => {\r\n//         setProfileImage(reader.result);\r\n//       };\r\n//       reader.readAsDataURL(file);\r\n//     }\r\n//     setShowOptions(false);\r\n//   };\r\n\r\n//   const handleCaptureImage = async () => {\r\n//     try {\r\n//       const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n//       const video = document.createElement(\"video\");\r\n//       video.srcObject = stream;\r\n//       video.play();\r\n\r\n//       await new Promise((resolve) => (video.onloadedmetadata = resolve));\r\n\r\n//       const canvas = document.createElement(\"canvas\");\r\n//       canvas.width = video.videoWidth;\r\n//       canvas.height = video.videoHeight;\r\n//       const context = canvas.getContext(\"2d\");\r\n//       context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n//       stream.getTracks().forEach((track) => track.stop());\r\n//       setProfileImage(canvas.toDataURL());\r\n//     } catch (error) {\r\n//       console.error(\"❌ Error accessing the webcam:\", error);\r\n//     }\r\n//     setShowOptions(false);\r\n//   };\r\n\r\n//   const handleDeleteImage = () => {\r\n//     setProfileImage(\"https://via.placeholder.com/100\");\r\n//     setShowOptions(false);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"profile-container\">\r\n//       <div className=\"profile-card\">\r\n//         <div className=\"profile-image-container\">\r\n//           <img src={profileImage} alt=\"Profile\" className=\"profile-image\" />\r\n//           <button\r\n//             onClick={() => setShowOptions(!showOptions)}\r\n//             className=\"camera-icon-button\"\r\n//           >\r\n//             <img\r\n//               src=\"/images/camera-icon.jpg\"\r\n//               alt=\"Camera Icon\"\r\n//               className=\"camera-icon\"\r\n//             />\r\n//           </button>\r\n//         </div>\r\n//         <h2 className=\"profile-username\">{profile.name}</h2>\r\n//         <p className=\"profile-role\">Student</p>\r\n//         <div className=\"profile-details\">\r\n//           <p>\r\n//             <strong>Name:</strong> {profile.name}\r\n//           </p>\r\n//           <p>\r\n//             <strong>Email:</strong> {profile.email}\r\n//           </p>\r\n//           <p>\r\n//             <strong>Registration No:</strong> {profile.studentid}\r\n//           </p>\r\n//           <p>\r\n//             <strong>Department:</strong> {profile.branch}\r\n//           </p>\r\n//           <p>\r\n//             <strong>Phone Number:</strong> {profile.phoneno}\r\n//           </p>\r\n//         </div>\r\n//         {showOptions && (\r\n//           <div className=\"options-menu\">\r\n//             <input\r\n//               type=\"file\"\r\n//               accept=\"image/*\"\r\n//               onChange={handleImageUpload}\r\n//               className=\"upload-button\"\r\n//             />\r\n//             <div className=\"capture-delete-row\">\r\n//               <button onClick={handleCaptureImage} className=\"capture-button\">\r\n//                 Capture Image\r\n//               </button>\r\n//               <button onClick={handleDeleteImage} className=\"delete-button\">\r\n//                 <img\r\n//                   src=\"/images/delete-icon.jpg\"\r\n//                   alt=\"Delete\"\r\n//                   className=\"dustbin-icon\"\r\n//                 />\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default StudentProfile;\r\n\r\n\r\n\r\n\r\n\r\nconst express = require(\"express\");\r\nconst router = express.Router();\r\nconst multer = require(\"multer\");\r\nconst cloudinary = require(\"cloudinary\").v2;\r\nconst { CloudinaryStorage } = require(\"multer-storage-cloudinary\");\r\nconst Student = require(\"../models/student\");\r\n\r\n// Cloudinary configuration\r\ncloudinary.config({\r\n  cloud_name: \"YOUR_CLOUD_NAME\",\r\n  api_key: \"YOUR_API_KEY\",\r\n  api_secret: \"YOUR_API_SECRET\",\r\n});\r\n\r\n// Multer-Cloudinary configuration\r\nconst storage = new CloudinaryStorage({\r\n  cloudinary: cloudinary,\r\n  params: {\r\n    folder: \"student_profiles\", // Folder in Cloudinary\r\n    allowed_formats: [\"jpg\", \"png\", \"jpeg\"], // Allowed file formats\r\n  },\r\n});\r\n\r\nconst upload = multer({ storage: storage });\r\n\r\n// Route to fetch student details\r\nrouter.get(\"/:email\", async (req, res) => {\r\n  const { email } = req.params;\r\n  const escapedEmail = email.replace(/\\./g, \"\\\\.\"); // Escape dots in email\r\n\r\n  try {\r\n    const student = await Student.findOne({\r\n      email: new RegExp(`^${escapedEmail}$`, \"i\"),\r\n    });\r\n\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n\r\n    res.json(student);\r\n  } catch (err) {\r\n    console.error(\"Error fetching student details:\", err);\r\n    res.status(500).json({ message: \"Server error\" });\r\n  }\r\n});\r\n\r\n// Route to upload and update student's profile image\r\nrouter.post(\"/:email/upload-image\", upload.single(\"image\"), async (req, res) => {\r\n  const { email } = req.params;\r\n\r\n  try {\r\n    if (!req.file || !req.file.path) {\r\n      return res.status(400).json({ message: \"Image upload failed\" });\r\n    }\r\n\r\n    const imageUrl = req.file.path;\r\n\r\n    const student = await Student.findOneAndUpdate(\r\n      { email: new RegExp(`^${email}$`, \"i\") },\r\n      { image: imageUrl },\r\n      { new: true }\r\n    );\r\n\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n\r\n    res.json({ message: \"Image uploaded successfully\", student });\r\n  } catch (err) {\r\n    console.error(\"Error uploading image:\", err);\r\n    res.status(500).json({ message: \"Server error\" });\r\n  }\r\n});\r\n\r\n// Route to delete student's profile image\r\nrouter.delete(\"/:email/delete-image\", async (req, res) => {\r\n  const { email } = req.params;\r\n\r\n  try {\r\n    const student = await Student.findOneAndUpdate(\r\n      { email: new RegExp(`^${email}$`, \"i\") },\r\n      { image: null },\r\n      { new: true }\r\n    );\r\n\r\n    if (!student) {\r\n      return res.status(404).json({ message: \"Student not found\" });\r\n    }\r\n\r\n    res.json({ message: \"Image deleted successfully\", student });\r\n  } catch (err) {\r\n    console.error(\"Error deleting image:\", err);\r\n    res.status(500).json({ message: \"Server error\" });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAMC,MAAM,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMI,UAAU,GAAGJ,OAAO,CAAC,YAAY,CAAC,CAACK,EAAE;AAC3C,MAAM;EAAEC;AAAkB,CAAC,GAAGN,OAAO,CAAC,2BAA2B,CAAC;AAClE,MAAMO,OAAO,GAAGP,OAAO,CAAC,mBAAmB,CAAC;;AAE5C;AACAI,UAAU,CAACI,MAAM,CAAC;EAChBC,UAAU,EAAE,iBAAiB;EAC7BC,OAAO,EAAE,cAAc;EACvBC,UAAU,EAAE;AACd,CAAC,CAAC;;AAEF;AACA,MAAMC,OAAO,GAAG,IAAIN,iBAAiB,CAAC;EACpCF,UAAU,EAAEA,UAAU;EACtBS,MAAM,EAAE;IACNC,MAAM,EAAE,kBAAkB;IAAE;IAC5BC,eAAe,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,CAAE;EAC3C;AACF,CAAC,CAAC;AAEF,MAAMC,MAAM,GAAGb,MAAM,CAAC;EAAES,OAAO,EAAEA;AAAQ,CAAC,CAAC;;AAE3C;AACAX,MAAM,CAACgB,GAAG,CAAC,SAAS,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACxC,MAAM;IAAEC;EAAM,CAAC,GAAGF,GAAG,CAACL,MAAM;EAC5B,MAAMQ,YAAY,GAAGD,KAAK,CAACE,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;;EAElD,IAAI;IACF,MAAMC,OAAO,GAAG,MAAMhB,OAAO,CAACiB,OAAO,CAAC;MACpCJ,KAAK,EAAE,IAAIK,MAAM,CAAC,IAAIJ,YAAY,GAAG,EAAE,GAAG;IAC5C,CAAC,CAAC;IAEF,IAAI,CAACE,OAAO,EAAE;MACZ,OAAOJ,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAoB,CAAC,CAAC;IAC/D;IAEAT,GAAG,CAACQ,IAAI,CAACJ,OAAO,CAAC;EACnB,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEF,GAAG,CAAC;IACrDV,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAe,CAAC,CAAC;EACnD;AACF,CAAC,CAAC;;AAEF;AACA3B,MAAM,CAAC+B,IAAI,CAAC,sBAAsB,EAAEhB,MAAM,CAACiB,MAAM,CAAC,OAAO,CAAC,EAAE,OAAOf,GAAG,EAAEC,GAAG,KAAK;EAC9E,MAAM;IAAEC;EAAM,CAAC,GAAGF,GAAG,CAACL,MAAM;EAE5B,IAAI;IACF,IAAI,CAACK,GAAG,CAACgB,IAAI,IAAI,CAAChB,GAAG,CAACgB,IAAI,CAACC,IAAI,EAAE;MAC/B,OAAOhB,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAsB,CAAC,CAAC;IACjE;IAEA,MAAMQ,QAAQ,GAAGlB,GAAG,CAACgB,IAAI,CAACC,IAAI;IAE9B,MAAMZ,OAAO,GAAG,MAAMhB,OAAO,CAAC8B,gBAAgB,CAC5C;MAAEjB,KAAK,EAAE,IAAIK,MAAM,CAAC,IAAIL,KAAK,GAAG,EAAE,GAAG;IAAE,CAAC,EACxC;MAAEkB,KAAK,EAAEF;IAAS,CAAC,EACnB;MAAEG,GAAG,EAAE;IAAK,CACd,CAAC;IAED,IAAI,CAAChB,OAAO,EAAE;MACZ,OAAOJ,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAoB,CAAC,CAAC;IAC/D;IAEAT,GAAG,CAACQ,IAAI,CAAC;MAAEC,OAAO,EAAE,6BAA6B;MAAEL;IAAQ,CAAC,CAAC;EAC/D,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEF,GAAG,CAAC;IAC5CV,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAe,CAAC,CAAC;EACnD;AACF,CAAC,CAAC;;AAEF;AACA3B,MAAM,CAACuC,MAAM,CAAC,sBAAsB,EAAE,OAAOtB,GAAG,EAAEC,GAAG,KAAK;EACxD,MAAM;IAAEC;EAAM,CAAC,GAAGF,GAAG,CAACL,MAAM;EAE5B,IAAI;IACF,MAAMU,OAAO,GAAG,MAAMhB,OAAO,CAAC8B,gBAAgB,CAC5C;MAAEjB,KAAK,EAAE,IAAIK,MAAM,CAAC,IAAIL,KAAK,GAAG,EAAE,GAAG;IAAE,CAAC,EACxC;MAAEkB,KAAK,EAAE;IAAK,CAAC,EACf;MAAEC,GAAG,EAAE;IAAK,CACd,CAAC;IAED,IAAI,CAAChB,OAAO,EAAE;MACZ,OAAOJ,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAoB,CAAC,CAAC;IAC/D;IAEAT,GAAG,CAACQ,IAAI,CAAC;MAAEC,OAAO,EAAE,4BAA4B;MAAEL;IAAQ,CAAC,CAAC;EAC9D,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAAC;IAC3CV,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAe,CAAC,CAAC;EACnD;AACF,CAAC,CAAC;AAEFa,MAAM,CAACC,OAAO,GAAGzC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}