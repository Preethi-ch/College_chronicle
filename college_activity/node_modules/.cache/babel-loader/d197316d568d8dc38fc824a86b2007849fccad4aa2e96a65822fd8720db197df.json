{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chpre\\\\OneDrive\\\\Desktop\\\\college\\\\PROJECTS\\\\miniproject\\\\college_activity\\\\src\\\\Newpost.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import \"./Newpost.css\";\n\n// const NewPost = ({ userEmail }) => {\n//   const [title, setTitle] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [subCategory, setSubCategory] = useState(\"\");\n//   const [link, setLink] = useState(\"\"); // State for link field\n//   const [files, setFiles] = useState([]);\n//   const [filePreviews, setFilePreviews] = useState([]);\n\n//   const subCategoriesMap = {\n//     clubs: [\"RMF\", \"Splashout\", \"VPOD\", \"Rhythmic Thunders\", \"Happy Club\"],\n//     academics: [\"First Year\", \"Second Year\", \"Third Year\", \"Fourth Year\"],\n//     skillhub: [\"Hackathons\", \"Coding Contests\", \"Training Programs\"],\n//   };\n\n//   const handleFileChange = (event) => {\n//     const selectedFiles = Array.from(event.target.files);\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\n\n//     const previews = selectedFiles.map((file) => ({\n//       name: file.name,\n//       url: URL.createObjectURL(file),\n//     \n\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import \"./Newpost.css\";\n\n// const NewPost = ({ userEmail }) => {\n//   const [draftId, setDraftId] = useState(null);\n//   const [title, setTitle] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [subCategory, setSubCategory] = useState(\"\");\n//   const [link, setLink] = useState(\"\");\n//   const [files, setFiles] = useState([]);\n//   const [existingMedia, setExistingMedia] = useState([]);\n//   const location = useLocation();\n\n//   // Subcategories based on category selection\n//   const subCategoriesMap = {\n//     clubs: [\"RMF\", \"Splashout\", \"VPOD\", \"Rhythmic Thunders\", \"Happy Club\"],\n//     academics: [\"First Year\", \"Second Year\", \"Third Year\", \"Fourth Year\"],\n//     skillhub: [\"Hackathons\", \"Coding Contests\", \"Training Programs\"],\n//   };\n\n//   useEffect(() => {\n//     const queryParams = new URLSearchParams(location.search);\n//     const draftIdFromParams = queryParams.get(\"draftId\");\n\n//     if (draftIdFromParams) {\n//       setDraftId(draftIdFromParams);\n//       fetchDraftData(draftIdFromParams);\n//     }\n//   }, [location.search]);\n\n//   const fetchDraftData = async (id) => {\n//     try {\n//       const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\n//       if (!response.ok) throw new Error(\"Failed to fetch draft\");\n\n//       const draft = await response.json();\n//       setTitle(draft.title);\n//       setDescription(draft.description);\n//       setCategory(draft.category);\n//       setSubCategory(draft.subCategory || \"\");\n//       setLink(draft.link || \"\");\n//       setExistingMedia(draft.media || []);\n//     } catch (error) {\n//       console.error(\"Error fetching draft:\", error);\n//       alert(\"Could not load draft. Please try again.\");\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const selectedFiles = Array.from(event.target.files);\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\n//   };\n\n//   const resetForm = () => {\n//     setTitle(\"\");\n//     setDescription(\"\");\n//     setCategory(\"\");\n//     setSubCategory(\"\");\n//     setLink(\"\");\n//     setFiles([]);\n//     setExistingMedia([]);\n//     setDraftId(null);\n//   };\n\n//   const handleSubmit = async (isDraft = false) => {\n//     if (!title || !description || !category) {\n//       alert(\"Please fill all required fields!\");\n//       return;\n//     }\n\n//     if (!userEmail) {\n//       alert(\"Error: User email is missing!\");\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append(\"title\", title);\n//     formData.append(\"description\", description);\n//     formData.append(\"category\", category);\n//     formData.append(\"subCategory\", subCategory);\n//     formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\n//     formData.append(\"uploaderEmail\", userEmail);\n//     formData.append(\"link\", link);\n\n//     files.forEach((file) => formData.append(\"media\", file));\n\n//     try {\n//       let url, method;\n\n//       if (draftId) {\n//         // If draft exists, update it\n//         url = `http://localhost:3000/posts/update/${draftId}`;\n//         method = \"PUT\";\n//       } else {\n//         // If it's a new post\n//         url = \"http://localhost:3000/posts/create-post\";\n//         method = \"POST\";\n//       }\n\n//       const response = await fetch(url, {\n//         method: method,\n//         body: formData,\n//       });\n\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         throw new Error(errorData.error || \"Unknown error\");\n//       }\n\n//       alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\n\n//       if (!isDraft && draftId) {\n//         // If posting, delete the draft after updating\n//         await fetch(`http://localhost:3000/draftsview/delete/${draftId}`, { method: \"DELETE\" });\n//       }\n\n//       resetForm();\n//     } catch (error) {\n//       console.error(\"Error submitting post:\", error);\n//       alert(\"Submission failed. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h2>{draftId ? \"Edit Draft\" : \"New Post\"}</h2>\n//       <form>\n//         {/* File Upload */}\n//         <div className=\"file-upload\">\n//           <label htmlFor=\"fileInput\">\n//             {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\n//           </label>\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\n//         </div>\n\n//         {/* Display Uploaded Files */}\n//         <div className=\"uploaded-files\">\n//           {existingMedia.map((media, index) => (\n//             <div key={index} className=\"file-item\">\n//               <a href={media.url} target=\"_blank\" rel=\"noopener noreferrer\">\n//                 {media.url}\n//               </a>\n//             </div>\n//           ))}\n//         </div>\n\n//         {/* Form Fields */}\n//         <input type=\"text\" placeholder=\"Enter title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\n//         <textarea placeholder=\"Write a description\" value={description} onChange={(e) => setDescription(e.target.value)} required></textarea>\n//         <input type=\"text\" placeholder=\"Enter link (if any)\" value={link} onChange={(e) => setLink(e.target.value)} />\n\n//         {/* Category Selection */}\n//         <select value={category} onChange={(e) => { setCategory(e.target.value); setSubCategory(\"\"); }} required>\n//           <option value=\"\" disabled>Select a category</option>\n//           <option value=\"events\">Events</option>\n//           <option value=\"clubs\">Clubs</option>\n//           <option value=\"academics\">Academics</option>\n//           <option value=\"notices\">Notices</option>\n//           <option value=\"skillhub\">Skillhub</option>\n//           <option value=\"placements\">Placements</option>\n//         </select>\n\n//         {/* Subcategory Selection */}\n//         {category && subCategoriesMap[category] ? (\n//           <select value={subCategory} onChange={(e) => setSubCategory(e.target.value)} disabled={!category}>\n//             <option value=\"\" disabled>Select a subcategory</option>\n//             {subCategoriesMap[category].map((sub, index) => (\n//               <option key={index} value={sub}>{sub}</option>\n//             ))}\n//           </select>\n//         ) : null}\n\n//         {/* Buttons */}\n//         <div className=\"button-container\">\n//           <button type=\"button\" onClick={() => handleSubmit(false)}>Submit Post</button>\n//           <button type=\"button\" onClick={() => handleSubmit(true)}>Save as Draft</button>\n//           <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>Cancel</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default NewPost;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import \"./Newpost.css\";\n\n// const NewPost = ({ userEmail }) => {\n//   const [draftId, setDraftId] = useState(null);\n//   const [title, setTitle] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [subCategory, setSubCategory] = useState(\"\");\n//   const [link, setLink] = useState(\"\");\n//   const [files, setFiles] = useState([]);\n//   const location = useLocation();\n\n//   useEffect(() => {\n//     const queryParams = new URLSearchParams(location.search);\n//     const draftIdFromParams = queryParams.get(\"draftId\");\n//     if (draftIdFromParams) {\n//       setDraftId(draftIdFromParams);\n//       fetchDraftData(draftIdFromParams);\n//     }\n//   }, [location.search]);\n\n//   const fetchDraftData = async (id) => {\n//     try {\n//       const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\n//       if (!response.ok) throw new Error(\"Failed to fetch draft\");\n//       const draft = await response.json();\n//       setTitle(draft.title);\n//       setDescription(draft.description);\n//       setCategory(draft.category);\n//       setSubCategory(draft.subCategory || \"\");\n//       setLink(draft.link || \"\");\n//     } catch (error) {\n//       console.error(\"Error fetching draft:\", error);\n//       alert(\"Could not load draft. Please try again.\");\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const selectedFiles = Array.from(event.target.files);\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\n//   };\n\n//   const removeFile = (index) => {\n//     setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));\n//   };\n\n//   const resetForm = () => {\n//     setTitle(\"\");\n//     setDescription(\"\");\n//     setCategory(\"\");\n//     setSubCategory(\"\");\n//     setLink(\"\");\n//     setFiles([]);\n//     setDraftId(null);\n//   };\n\n//   const handleSubmit = async (isDraft = false) => {\n//     if (!title || !description || !category) {\n//       alert(\"Please fill all required fields!\");\n//       return;\n//     }\n//     if (!userEmail) {\n//       alert(\"Error: User email is missing!\");\n//       return;\n//     }\n//     const formData = new FormData();\n//     formData.append(\"title\", title);\n//     formData.append(\"description\", description);\n//     formData.append(\"category\", category);\n//     formData.append(\"subCategory\", subCategory);\n//     formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\n//     formData.append(\"uploaderEmail\", userEmail);\n//     formData.append(\"link\", link);\n//     files.forEach((file) => formData.append(\"media\", file));\n\n//     try {\n//       let url, method;\n//       if (draftId) {\n//         url = `http://localhost:3000/draftsview/update/${draftId}`;\n//         method = \"PUT\";\n//       } else {\n//         url = \"http://localhost:3000/posts/create-post\";\n//         method = \"POST\";\n//       }\n//       const response = await fetch(url, { method, body: formData });\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         throw new Error(errorData.error || \"Unknown error\");\n//       }\n//       alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\n//       if (!isDraft && draftId) {\n//         await fetch(`http://localhost:3000/draftsview/${draftId}`, { method: \"DELETE\" });\n//       }\n//       resetForm();\n//     } catch (error) {\n//       console.error(\"Error submitting post:\", error);\n//       alert(\"Submission failed. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h2>{draftId ? \"Edit Draft\" : \"New Post\"}</h2>\n//       <form>\n//         <div className=\"file-upload\">\n//           <label htmlFor=\"fileInput\">\n//             {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\n//           </label>\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\n//         </div>\n\n//         <div className=\"uploaded-files\">\n//           {files.map((file, index) => (\n//             <div key={index} className=\"file-item\">\n//               <span>{file.name}</span>\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeFile(index)}>\n//                 X\n//               </button>\n//             </div>\n//           ))}\n//         </div>\n\n//         <input type=\"text\" placeholder=\"Enter title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\n//         <textarea placeholder=\"Write a description\" value={description} onChange={(e) => setDescription(e.target.value)} required></textarea>\n//         <input type=\"text\" placeholder=\"Enter link (if any)\" value={link} onChange={(e) => setLink(e.target.value)} />\n\n//         <select value={category} onChange={(e) => { setCategory(e.target.value); setSubCategory(\"\"); }} required>\n//           <option value=\"\" disabled>Select a category</option>\n//           <option value=\"events\">Events</option>\n//           <option value=\"clubs\">Clubs</option>\n//           <option value=\"academics\">Academics</option>\n//           <option value=\"notices\">Notices</option>\n//           <option value=\"skillhub\">Skillhub</option>\n//           <option value=\"placements\">Placements</option>\n//         </select>\n\n//         <div className=\"button-container\">\n//           <button type=\"button\" onClick={() => handleSubmit(false)}>Submit Post</button>\n//           <button type=\"button\" onClick={() => handleSubmit(true)}>Save as Draft</button>\n//           <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>Cancel</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default NewPost;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import \"./Newpost.css\";\n\n// const NewPost = ({ userEmail }) => {\n//   const [draftId, setDraftId] = useState(null);\n//   const [title, setTitle] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [subCategory, setSubCategory] = useState(\"\");\n//   const [link, setLink] = useState(\"\");\n//   const [files, setFiles] = useState([]); // For newly uploaded files\n//   const [media, setMedia] = useState([]); // For existing media from database\n//   const location = useLocation();\n\n//   useEffect(() => {\n//     const queryParams = new URLSearchParams(location.search);\n//     const draftIdFromParams = queryParams.get(\"draftId\");\n//     if (draftIdFromParams) {\n//       setDraftId(draftIdFromParams);\n//       fetchDraftData(draftIdFromParams);\n//     }\n//   }, [location.search]);\n\n//   const fetchDraftData = async (id) => {\n//     try {\n//       const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\n//       if (!response.ok) throw new Error(\"Failed to fetch draft\");\n//       const draft = await response.json();\n//       setTitle(draft.title);\n//       setDescription(draft.description);\n//       setCategory(draft.category);\n//       setSubCategory(draft.subCategory || \"\");\n//       setLink(draft.link || \"\");\n//       setMedia(draft.media || []); // Store existing media from database\n//     } catch (error) {\n//       console.error(\"Error fetching draft:\", error);\n//       alert(\"Could not load draft. Please try again.\");\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const selectedFiles = Array.from(event.target.files);\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\n//   };\n\n//   const removeFile = (index) => {\n//     setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));\n//   };\n\n//   const removeExistingFile = async (fileId) => {\n//     try {\n//       const response = await fetch(`http://localhost:3000/draftsview/remove-media/${draftId}/${fileId}`, { method: \"DELETE\" });\n//       if (!response.ok) throw new Error(\"Failed to remove media\");\n//       setMedia(media.filter((file) => file._id !== fileId));\n//     } catch (error) {\n//       console.error(\"Error removing file:\", error);\n//       alert(\"Failed to remove file.\");\n//     }\n//   };\n\n//   const resetForm = () => {\n//     setTitle(\"\");\n//     setDescription(\"\");\n//     setCategory(\"\");\n//     setSubCategory(\"\");\n//     setLink(\"\");\n//     setFiles([]);\n//     setMedia([]);\n//     setDraftId(null);\n//   };\n\n//   const handleSubmit = async (isDraft = false) => {\n//     if (!title || !description || !category) {\n//         alert(\"Please fill all required fields!\");\n//         return;\n//     }\n//     if (!userEmail) {\n//         alert(\"Error: User email is missing!\");\n//         return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append(\"title\", title);\n//     formData.append(\"description\", description);\n//     formData.append(\"category\", category);\n//     formData.append(\"subCategory\", subCategory);\n//     formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\n//     formData.append(\"uploaderEmail\", userEmail);\n//     formData.append(\"link\", link);\n//     files.forEach((file) => formData.append(\"media\", file));\n\n//     console.log(\"Submitting post...\");\n//     console.log(\"Draft ID:\", draftId);\n//     console.log(\"FormData entries:\");\n//     for (let pair of formData.entries()) {\n//         console.log(pair[0], pair[1]);\n//     }\n\n//     try {\n//         let url, method;\n//         if (draftId) {\n//             url = `http://localhost:3000/draftsview/update/${draftId}`;\n//             method = \"PUT\";\n//         } else {\n//             url = \"http://localhost:3000/posts/create-post\";\n//             method = \"POST\";\n//         }\n\n//         console.log(`Sending ${method} request to:`, url);\n\n//         const response = await fetch(url, { method, body: formData });\n//         if (!response.ok) {\n//             const errorData = await response.json();\n//             throw new Error(errorData.error || \"Unknown error\");\n//         }\n\n//         alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\n//         console.log(\"Submission successful!\");\n\n//         if (!isDraft && draftId) {\n//             console.log(`Deleting draft ${draftId} after posting.`);\n//             await fetch(`http://localhost:3000/draftsview/${draftId}`, { method: \"DELETE\" });\n//         }\n\n//         resetForm();\n//     } catch (error) {\n//         console.error(\"Error submitting post:\", error);\n//         alert(\"Submission failed. Please try again.\");\n//     }\n// };\n\n//   return (\n//     <div className=\"container\">\n//       <h2>{draftId ? \"Edit Draft\" : \"New Post\"}</h2>\n//       <form>\n//         <div className=\"file-upload\">\n//           <label htmlFor=\"fileInput\">\n//             {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\n//           </label>\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\n//         </div>\n\n//         {/* Display existing media (from database) */}\n//         <div className=\"uploaded-files\">\n//           {media.map((file) => (\n//             <div key={file._id} className=\"file-item\">\n//               <a href={file.url} target=\"_blank\" rel=\"noopener noreferrer\">{file.url}</a>\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeExistingFile(file._id)}>X</button>\n//             </div>\n//           ))}\n\n//           {/* Display newly selected files */}\n//           {files.map((file, index) => (\n//             <div key={index} className=\"file-item\">\n//               <span>{file.name}</span>\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeFile(index)}>X</button>\n//             </div>\n//           ))}\n//         </div>\n\n//         <input type=\"text\" placeholder=\"Enter title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\n//         <textarea placeholder=\"Write a description\" value={description} onChange={(e) => setDescription(e.target.value)} required></textarea>\n//         <input type=\"text\" placeholder=\"Enter link (if any)\" value={link} onChange={(e) => setLink(e.target.value)} />\n\n//         <select value={category} onChange={(e) => { setCategory(e.target.value); setSubCategory(\"\"); }} required>\n//           <option value=\"\" disabled>Select a category</option>\n//           <option value=\"events\">Events</option>\n//           <option value=\"clubs\">Clubs</option>\n//           <option value=\"academics\">Academics</option>\n//           <option value=\"notices\">Notices</option>\n//           <option value=\"skillhub\">Skillhub</option>\n//           <option value=\"placements\">Placements</option>\n//         </select>\n\n//         <div className=\"button-container\">\n//           <button type=\"button\" onClick={() => handleSubmit(false)}>Submit Post</button>\n//           <button type=\"button\" onClick={() => handleSubmit(true)}>Save as Draft</button>\n//           <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>Cancel</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default NewPost;\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Newpost = ({\n  userEmail,\n  draftData\n}) => {\n  _s();\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [subCategory, setSubCategory] = useState(\"\");\n  const [status, setStatus] = useState(\"draft\");\n  const [link, setLink] = useState(\"\");\n  const [selectedFile, setSelectedFile] = useState(null);\n  useEffect(() => {\n    if (draftData) {\n      setTitle(draftData.title || \"\");\n      setDescription(draftData.description || \"\");\n      setCategory(draftData.category || \"\");\n      setSubCategory(draftData.subCategory || \"\");\n      setStatus(draftData.status || \"draft\");\n      setLink(draftData.link || \"\");\n    }\n  }, [draftData]);\n  const handleFileChange = e => {\n    setSelectedFile(e.target.files[0]);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append(\"title\", title);\n    formData.append(\"description\", description);\n    formData.append(\"category\", category);\n    formData.append(\"subCategory\", subCategory || \"\");\n    formData.append(\"status\", status);\n    formData.append(\"uploaderEmail\", userEmail);\n    formData.append(\"link\", link || \"\");\n    if (selectedFile) {\n      formData.append(\"file\", selectedFile);\n    }\n    console.log(\"Submitting form data:\", Object.fromEntries(formData.entries()));\n    try {\n      const response = await fetch(`http://localhost:3000/draftsview/update/${draftData === null || draftData === void 0 ? void 0 : draftData._id}`, {\n        method: \"PUT\",\n        body: formData\n      });\n      const result = await response.json();\n      if (!response.ok) throw new Error(result.error || \"Failed to update draft\");\n      alert(\"Draft updated successfully!\");\n    } catch (error) {\n      console.error(\"Error updating draft:\", error);\n      alert(\"Error updating draft.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: title,\n      onChange: e => setTitle(e.target.value),\n      placeholder: \"Title\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: description,\n      onChange: e => setDescription(e.target.value),\n      placeholder: \"Description\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 692,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: category,\n      onChange: e => setCategory(e.target.value),\n      placeholder: \"Category\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: subCategory,\n      onChange: e => setSubCategory(e.target.value),\n      placeholder: \"Sub-category\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 694,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: link,\n      onChange: e => setLink(e.target.value),\n      placeholder: \"Link\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 695,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 696,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Update Draft\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 697,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 690,\n    columnNumber: 5\n  }, this);\n};\n_s(Newpost, \"TvBl9jKc97xcgp6Nho1NAcqOq/E=\");\n_c = Newpost;\nexport default Newpost;\nvar _c;\n$RefreshReg$(_c, \"Newpost\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Newpost","userEmail","draftData","_s","title","setTitle","description","setDescription","category","setCategory","subCategory","setSubCategory","status","setStatus","link","setLink","selectedFile","setSelectedFile","handleFileChange","e","target","files","handleSubmit","preventDefault","formData","FormData","append","console","log","Object","fromEntries","entries","response","fetch","_id","method","body","result","json","ok","Error","error","alert","onSubmit","children","type","value","onChange","placeholder","required","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/chpre/OneDrive/Desktop/college/PROJECTS/miniproject/college_activity/src/Newpost.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import \"./Newpost.css\";\r\n\r\n\r\n// const NewPost = ({ userEmail }) => {\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n//   const [category, setCategory] = useState(\"\");\r\n//   const [subCategory, setSubCategory] = useState(\"\");\r\n//   const [link, setLink] = useState(\"\"); // State for link field\r\n//   const [files, setFiles] = useState([]);\r\n//   const [filePreviews, setFilePreviews] = useState([]);\r\n\r\n//   const subCategoriesMap = {\r\n//     clubs: [\"RMF\", \"Splashout\", \"VPOD\", \"Rhythmic Thunders\", \"Happy Club\"],\r\n//     academics: [\"First Year\", \"Second Year\", \"Third Year\", \"Fourth Year\"],\r\n//     skillhub: [\"Hackathons\", \"Coding Contests\", \"Training Programs\"],\r\n//   };\r\n\r\n//   const handleFileChange = (event) => {\r\n//     const selectedFiles = Array.from(event.target.files);\r\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\r\n\r\n//     const previews = selectedFiles.map((file) => ({\r\n//       name: file.name,\r\n//       url: URL.createObjectURL(file),\r\n//     \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useLocation } from \"react-router-dom\";\r\n// import \"./Newpost.css\";\r\n\r\n// const NewPost = ({ userEmail }) => {\r\n//   const [draftId, setDraftId] = useState(null);\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n//   const [category, setCategory] = useState(\"\");\r\n//   const [subCategory, setSubCategory] = useState(\"\");\r\n//   const [link, setLink] = useState(\"\");\r\n//   const [files, setFiles] = useState([]);\r\n//   const [existingMedia, setExistingMedia] = useState([]);\r\n//   const location = useLocation();\r\n\r\n//   // Subcategories based on category selection\r\n//   const subCategoriesMap = {\r\n//     clubs: [\"RMF\", \"Splashout\", \"VPOD\", \"Rhythmic Thunders\", \"Happy Club\"],\r\n//     academics: [\"First Year\", \"Second Year\", \"Third Year\", \"Fourth Year\"],\r\n//     skillhub: [\"Hackathons\", \"Coding Contests\", \"Training Programs\"],\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const queryParams = new URLSearchParams(location.search);\r\n//     const draftIdFromParams = queryParams.get(\"draftId\");\r\n\r\n//     if (draftIdFromParams) {\r\n//       setDraftId(draftIdFromParams);\r\n//       fetchDraftData(draftIdFromParams);\r\n//     }\r\n//   }, [location.search]);\r\n\r\n//   const fetchDraftData = async (id) => {\r\n//     try {\r\n//       const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\r\n//       if (!response.ok) throw new Error(\"Failed to fetch draft\");\r\n\r\n//       const draft = await response.json();\r\n//       setTitle(draft.title);\r\n//       setDescription(draft.description);\r\n//       setCategory(draft.category);\r\n//       setSubCategory(draft.subCategory || \"\");\r\n//       setLink(draft.link || \"\");\r\n//       setExistingMedia(draft.media || []);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching draft:\", error);\r\n//       alert(\"Could not load draft. Please try again.\");\r\n//     }\r\n//   };\r\n\r\n//   const handleFileChange = (event) => {\r\n//     const selectedFiles = Array.from(event.target.files);\r\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\r\n//   };\r\n\r\n//   const resetForm = () => {\r\n//     setTitle(\"\");\r\n//     setDescription(\"\");\r\n//     setCategory(\"\");\r\n//     setSubCategory(\"\");\r\n//     setLink(\"\");\r\n//     setFiles([]);\r\n//     setExistingMedia([]);\r\n//     setDraftId(null);\r\n//   };\r\n\r\n//   const handleSubmit = async (isDraft = false) => {\r\n//     if (!title || !description || !category) {\r\n//       alert(\"Please fill all required fields!\");\r\n//       return;\r\n//     }\r\n  \r\n//     if (!userEmail) {\r\n//       alert(\"Error: User email is missing!\");\r\n//       return;\r\n//     }\r\n  \r\n//     const formData = new FormData();\r\n//     formData.append(\"title\", title);\r\n//     formData.append(\"description\", description);\r\n//     formData.append(\"category\", category);\r\n//     formData.append(\"subCategory\", subCategory);\r\n//     formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\r\n//     formData.append(\"uploaderEmail\", userEmail);\r\n//     formData.append(\"link\", link);\r\n    \r\n//     files.forEach((file) => formData.append(\"media\", file));\r\n  \r\n//     try {\r\n//       let url, method;\r\n  \r\n//       if (draftId) {\r\n//         // If draft exists, update it\r\n//         url = `http://localhost:3000/posts/update/${draftId}`;\r\n//         method = \"PUT\";\r\n//       } else {\r\n//         // If it's a new post\r\n//         url = \"http://localhost:3000/posts/create-post\";\r\n//         method = \"POST\";\r\n//       }\r\n  \r\n//       const response = await fetch(url, {\r\n//         method: method,\r\n//         body: formData,\r\n//       });\r\n  \r\n//       if (!response.ok) {\r\n//         const errorData = await response.json();\r\n//         throw new Error(errorData.error || \"Unknown error\");\r\n//       }\r\n  \r\n//       alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\r\n  \r\n//       if (!isDraft && draftId) {\r\n//         // If posting, delete the draft after updating\r\n//         await fetch(`http://localhost:3000/draftsview/delete/${draftId}`, { method: \"DELETE\" });\r\n//       }\r\n  \r\n//       resetForm();\r\n//     } catch (error) {\r\n//       console.error(\"Error submitting post:\", error);\r\n//       alert(\"Submission failed. Please try again.\");\r\n//     }\r\n//   };\r\n  \r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h2>{draftId ? \"Edit Draft\" : \"New Post\"}</h2>\r\n//       <form>\r\n//         {/* File Upload */}\r\n//         <div className=\"file-upload\">\r\n//           <label htmlFor=\"fileInput\">\r\n//             {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\r\n//           </label>\r\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\r\n//         </div>\r\n\r\n//         {/* Display Uploaded Files */}\r\n//         <div className=\"uploaded-files\">\r\n//           {existingMedia.map((media, index) => (\r\n//             <div key={index} className=\"file-item\">\r\n//               <a href={media.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n//                 {media.url}\r\n//               </a>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n\r\n//         {/* Form Fields */}\r\n//         <input type=\"text\" placeholder=\"Enter title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\r\n//         <textarea placeholder=\"Write a description\" value={description} onChange={(e) => setDescription(e.target.value)} required></textarea>\r\n//         <input type=\"text\" placeholder=\"Enter link (if any)\" value={link} onChange={(e) => setLink(e.target.value)} />\r\n\r\n//         {/* Category Selection */}\r\n//         <select value={category} onChange={(e) => { setCategory(e.target.value); setSubCategory(\"\"); }} required>\r\n//           <option value=\"\" disabled>Select a category</option>\r\n//           <option value=\"events\">Events</option>\r\n//           <option value=\"clubs\">Clubs</option>\r\n//           <option value=\"academics\">Academics</option>\r\n//           <option value=\"notices\">Notices</option>\r\n//           <option value=\"skillhub\">Skillhub</option>\r\n//           <option value=\"placements\">Placements</option>\r\n//         </select>\r\n\r\n//         {/* Subcategory Selection */}\r\n//         {category && subCategoriesMap[category] ? (\r\n//           <select value={subCategory} onChange={(e) => setSubCategory(e.target.value)} disabled={!category}>\r\n//             <option value=\"\" disabled>Select a subcategory</option>\r\n//             {subCategoriesMap[category].map((sub, index) => (\r\n//               <option key={index} value={sub}>{sub}</option>\r\n//             ))}\r\n//           </select>\r\n//         ) : null}\r\n\r\n//         {/* Buttons */}\r\n//         <div className=\"button-container\">\r\n//           <button type=\"button\" onClick={() => handleSubmit(false)}>Submit Post</button>\r\n//           <button type=\"button\" onClick={() => handleSubmit(true)}>Save as Draft</button>\r\n//           <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>Cancel</button>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default NewPost;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useLocation } from \"react-router-dom\";\r\n// import \"./Newpost.css\";\r\n\r\n// const NewPost = ({ userEmail }) => {\r\n//   const [draftId, setDraftId] = useState(null);\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n//   const [category, setCategory] = useState(\"\");\r\n//   const [subCategory, setSubCategory] = useState(\"\");\r\n//   const [link, setLink] = useState(\"\");\r\n//   const [files, setFiles] = useState([]);\r\n//   const location = useLocation();\r\n\r\n//   useEffect(() => {\r\n//     const queryParams = new URLSearchParams(location.search);\r\n//     const draftIdFromParams = queryParams.get(\"draftId\");\r\n//     if (draftIdFromParams) {\r\n//       setDraftId(draftIdFromParams);\r\n//       fetchDraftData(draftIdFromParams);\r\n//     }\r\n//   }, [location.search]);\r\n\r\n//   const fetchDraftData = async (id) => {\r\n//     try {\r\n//       const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\r\n//       if (!response.ok) throw new Error(\"Failed to fetch draft\");\r\n//       const draft = await response.json();\r\n//       setTitle(draft.title);\r\n//       setDescription(draft.description);\r\n//       setCategory(draft.category);\r\n//       setSubCategory(draft.subCategory || \"\");\r\n//       setLink(draft.link || \"\");\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching draft:\", error);\r\n//       alert(\"Could not load draft. Please try again.\");\r\n//     }\r\n//   };\r\n\r\n//   const handleFileChange = (event) => {\r\n//     const selectedFiles = Array.from(event.target.files);\r\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\r\n//   };\r\n\r\n//   const removeFile = (index) => {\r\n//     setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));\r\n//   };\r\n\r\n//   const resetForm = () => {\r\n//     setTitle(\"\");\r\n//     setDescription(\"\");\r\n//     setCategory(\"\");\r\n//     setSubCategory(\"\");\r\n//     setLink(\"\");\r\n//     setFiles([]);\r\n//     setDraftId(null);\r\n//   };\r\n\r\n//   const handleSubmit = async (isDraft = false) => {\r\n//     if (!title || !description || !category) {\r\n//       alert(\"Please fill all required fields!\");\r\n//       return;\r\n//     }\r\n//     if (!userEmail) {\r\n//       alert(\"Error: User email is missing!\");\r\n//       return;\r\n//     }\r\n//     const formData = new FormData();\r\n//     formData.append(\"title\", title);\r\n//     formData.append(\"description\", description);\r\n//     formData.append(\"category\", category);\r\n//     formData.append(\"subCategory\", subCategory);\r\n//     formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\r\n//     formData.append(\"uploaderEmail\", userEmail);\r\n//     formData.append(\"link\", link);\r\n//     files.forEach((file) => formData.append(\"media\", file));\r\n\r\n//     try {\r\n//       let url, method;\r\n//       if (draftId) {\r\n//         url = `http://localhost:3000/draftsview/update/${draftId}`;\r\n//         method = \"PUT\";\r\n//       } else {\r\n//         url = \"http://localhost:3000/posts/create-post\";\r\n//         method = \"POST\";\r\n//       }\r\n//       const response = await fetch(url, { method, body: formData });\r\n//       if (!response.ok) {\r\n//         const errorData = await response.json();\r\n//         throw new Error(errorData.error || \"Unknown error\");\r\n//       }\r\n//       alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\r\n//       if (!isDraft && draftId) {\r\n//         await fetch(`http://localhost:3000/draftsview/${draftId}`, { method: \"DELETE\" });\r\n//       }\r\n//       resetForm();\r\n//     } catch (error) {\r\n//       console.error(\"Error submitting post:\", error);\r\n//       alert(\"Submission failed. Please try again.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h2>{draftId ? \"Edit Draft\" : \"New Post\"}</h2>\r\n//       <form>\r\n//         <div className=\"file-upload\">\r\n//           <label htmlFor=\"fileInput\">\r\n//             {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\r\n//           </label>\r\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\r\n//         </div>\r\n\r\n//         <div className=\"uploaded-files\">\r\n//           {files.map((file, index) => (\r\n//             <div key={index} className=\"file-item\">\r\n//               <span>{file.name}</span>\r\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeFile(index)}>\r\n//                 X\r\n//               </button>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n\r\n//         <input type=\"text\" placeholder=\"Enter title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\r\n//         <textarea placeholder=\"Write a description\" value={description} onChange={(e) => setDescription(e.target.value)} required></textarea>\r\n//         <input type=\"text\" placeholder=\"Enter link (if any)\" value={link} onChange={(e) => setLink(e.target.value)} />\r\n\r\n//         <select value={category} onChange={(e) => { setCategory(e.target.value); setSubCategory(\"\"); }} required>\r\n//           <option value=\"\" disabled>Select a category</option>\r\n//           <option value=\"events\">Events</option>\r\n//           <option value=\"clubs\">Clubs</option>\r\n//           <option value=\"academics\">Academics</option>\r\n//           <option value=\"notices\">Notices</option>\r\n//           <option value=\"skillhub\">Skillhub</option>\r\n//           <option value=\"placements\">Placements</option>\r\n//         </select>\r\n\r\n//         <div className=\"button-container\">\r\n//           <button type=\"button\" onClick={() => handleSubmit(false)}>Submit Post</button>\r\n//           <button type=\"button\" onClick={() => handleSubmit(true)}>Save as Draft</button>\r\n//           <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>Cancel</button>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default NewPost;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useLocation } from \"react-router-dom\";\r\n// import \"./Newpost.css\";\r\n\r\n// const NewPost = ({ userEmail }) => {\r\n//   const [draftId, setDraftId] = useState(null);\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n//   const [category, setCategory] = useState(\"\");\r\n//   const [subCategory, setSubCategory] = useState(\"\");\r\n//   const [link, setLink] = useState(\"\");\r\n//   const [files, setFiles] = useState([]); // For newly uploaded files\r\n//   const [media, setMedia] = useState([]); // For existing media from database\r\n//   const location = useLocation();\r\n\r\n//   useEffect(() => {\r\n//     const queryParams = new URLSearchParams(location.search);\r\n//     const draftIdFromParams = queryParams.get(\"draftId\");\r\n//     if (draftIdFromParams) {\r\n//       setDraftId(draftIdFromParams);\r\n//       fetchDraftData(draftIdFromParams);\r\n//     }\r\n//   }, [location.search]);\r\n\r\n//   const fetchDraftData = async (id) => {\r\n//     try {\r\n//       const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\r\n//       if (!response.ok) throw new Error(\"Failed to fetch draft\");\r\n//       const draft = await response.json();\r\n//       setTitle(draft.title);\r\n//       setDescription(draft.description);\r\n//       setCategory(draft.category);\r\n//       setSubCategory(draft.subCategory || \"\");\r\n//       setLink(draft.link || \"\");\r\n//       setMedia(draft.media || []); // Store existing media from database\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching draft:\", error);\r\n//       alert(\"Could not load draft. Please try again.\");\r\n//     }\r\n//   };\r\n\r\n//   const handleFileChange = (event) => {\r\n//     const selectedFiles = Array.from(event.target.files);\r\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\r\n//   };\r\n\r\n//   const removeFile = (index) => {\r\n//     setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));\r\n//   };\r\n\r\n//   const removeExistingFile = async (fileId) => {\r\n//     try {\r\n//       const response = await fetch(`http://localhost:3000/draftsview/remove-media/${draftId}/${fileId}`, { method: \"DELETE\" });\r\n//       if (!response.ok) throw new Error(\"Failed to remove media\");\r\n//       setMedia(media.filter((file) => file._id !== fileId));\r\n//     } catch (error) {\r\n//       console.error(\"Error removing file:\", error);\r\n//       alert(\"Failed to remove file.\");\r\n//     }\r\n//   };\r\n\r\n//   const resetForm = () => {\r\n//     setTitle(\"\");\r\n//     setDescription(\"\");\r\n//     setCategory(\"\");\r\n//     setSubCategory(\"\");\r\n//     setLink(\"\");\r\n//     setFiles([]);\r\n//     setMedia([]);\r\n//     setDraftId(null);\r\n//   };\r\n\r\n//   const handleSubmit = async (isDraft = false) => {\r\n//     if (!title || !description || !category) {\r\n//         alert(\"Please fill all required fields!\");\r\n//         return;\r\n//     }\r\n//     if (!userEmail) {\r\n//         alert(\"Error: User email is missing!\");\r\n//         return;\r\n//     }\r\n\r\n//     const formData = new FormData();\r\n//     formData.append(\"title\", title);\r\n//     formData.append(\"description\", description);\r\n//     formData.append(\"category\", category);\r\n//     formData.append(\"subCategory\", subCategory);\r\n//     formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\r\n//     formData.append(\"uploaderEmail\", userEmail);\r\n//     formData.append(\"link\", link);\r\n//     files.forEach((file) => formData.append(\"media\", file));\r\n\r\n//     console.log(\"Submitting post...\");\r\n//     console.log(\"Draft ID:\", draftId);\r\n//     console.log(\"FormData entries:\");\r\n//     for (let pair of formData.entries()) {\r\n//         console.log(pair[0], pair[1]);\r\n//     }\r\n\r\n//     try {\r\n//         let url, method;\r\n//         if (draftId) {\r\n//             url = `http://localhost:3000/draftsview/update/${draftId}`;\r\n//             method = \"PUT\";\r\n//         } else {\r\n//             url = \"http://localhost:3000/posts/create-post\";\r\n//             method = \"POST\";\r\n//         }\r\n\r\n//         console.log(`Sending ${method} request to:`, url);\r\n\r\n//         const response = await fetch(url, { method, body: formData });\r\n//         if (!response.ok) {\r\n//             const errorData = await response.json();\r\n//             throw new Error(errorData.error || \"Unknown error\");\r\n//         }\r\n\r\n//         alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\r\n//         console.log(\"Submission successful!\");\r\n\r\n//         if (!isDraft && draftId) {\r\n//             console.log(`Deleting draft ${draftId} after posting.`);\r\n//             await fetch(`http://localhost:3000/draftsview/${draftId}`, { method: \"DELETE\" });\r\n//         }\r\n\r\n//         resetForm();\r\n//     } catch (error) {\r\n//         console.error(\"Error submitting post:\", error);\r\n//         alert(\"Submission failed. Please try again.\");\r\n//     }\r\n// };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h2>{draftId ? \"Edit Draft\" : \"New Post\"}</h2>\r\n//       <form>\r\n//         <div className=\"file-upload\">\r\n//           <label htmlFor=\"fileInput\">\r\n//             {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\r\n//           </label>\r\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\r\n//         </div>\r\n\r\n//         {/* Display existing media (from database) */}\r\n//         <div className=\"uploaded-files\">\r\n//           {media.map((file) => (\r\n//             <div key={file._id} className=\"file-item\">\r\n//               <a href={file.url} target=\"_blank\" rel=\"noopener noreferrer\">{file.url}</a>\r\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeExistingFile(file._id)}>X</button>\r\n//             </div>\r\n//           ))}\r\n\r\n//           {/* Display newly selected files */}\r\n//           {files.map((file, index) => (\r\n//             <div key={index} className=\"file-item\">\r\n//               <span>{file.name}</span>\r\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeFile(index)}>X</button>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n\r\n//         <input type=\"text\" placeholder=\"Enter title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\r\n//         <textarea placeholder=\"Write a description\" value={description} onChange={(e) => setDescription(e.target.value)} required></textarea>\r\n//         <input type=\"text\" placeholder=\"Enter link (if any)\" value={link} onChange={(e) => setLink(e.target.value)} />\r\n\r\n//         <select value={category} onChange={(e) => { setCategory(e.target.value); setSubCategory(\"\"); }} required>\r\n//           <option value=\"\" disabled>Select a category</option>\r\n//           <option value=\"events\">Events</option>\r\n//           <option value=\"clubs\">Clubs</option>\r\n//           <option value=\"academics\">Academics</option>\r\n//           <option value=\"notices\">Notices</option>\r\n//           <option value=\"skillhub\">Skillhub</option>\r\n//           <option value=\"placements\">Placements</option>\r\n//         </select>\r\n\r\n//         <div className=\"button-container\">\r\n//           <button type=\"button\" onClick={() => handleSubmit(false)}>Submit Post</button>\r\n//           <button type=\"button\" onClick={() => handleSubmit(true)}>Save as Draft</button>\r\n//           <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>Cancel</button>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default NewPost;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst Newpost = ({ userEmail, draftData }) => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const [subCategory, setSubCategory] = useState(\"\");\r\n  const [status, setStatus] = useState(\"draft\");\r\n  const [link, setLink] = useState(\"\");\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (draftData) {\r\n      setTitle(draftData.title || \"\");\r\n      setDescription(draftData.description || \"\");\r\n      setCategory(draftData.category || \"\");\r\n      setSubCategory(draftData.subCategory || \"\");\r\n      setStatus(draftData.status || \"draft\");\r\n      setLink(draftData.link || \"\");\r\n    }\r\n  }, [draftData]);\r\n\r\n  const handleFileChange = (e) => {\r\n    setSelectedFile(e.target.files[0]);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    const formData = new FormData();\r\n    formData.append(\"title\", title);\r\n    formData.append(\"description\", description);\r\n    formData.append(\"category\", category);\r\n    formData.append(\"subCategory\", subCategory || \"\");\r\n    formData.append(\"status\", status);\r\n    formData.append(\"uploaderEmail\", userEmail);\r\n    formData.append(\"link\", link || \"\");\r\n\r\n    if (selectedFile) {\r\n      formData.append(\"file\", selectedFile);\r\n    }\r\n\r\n    console.log(\"Submitting form data:\", Object.fromEntries(formData.entries()));\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/draftsview/update/${draftData?._id}`, {\r\n        method: \"PUT\",\r\n        body: formData,\r\n      });\r\n\r\n      const result = await response.json();\r\n      if (!response.ok) throw new Error(result.error || \"Failed to update draft\");\r\n\r\n      alert(\"Draft updated successfully!\");\r\n    } catch (error) {\r\n      console.error(\"Error updating draft:\", error);\r\n      alert(\"Error updating draft.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={title} onChange={(e) => setTitle(e.target.value)} placeholder=\"Title\" required />\r\n      <textarea value={description} onChange={(e) => setDescription(e.target.value)} placeholder=\"Description\" required />\r\n      <input type=\"text\" value={category} onChange={(e) => setCategory(e.target.value)} placeholder=\"Category\" required />\r\n      <input type=\"text\" value={subCategory} onChange={(e) => setSubCategory(e.target.value)} placeholder=\"Sub-category\" />\r\n      <input type=\"text\" value={link} onChange={(e) => setLink(e.target.value)} placeholder=\"Link\" />\r\n      <input type=\"file\" onChange={handleFileChange} />\r\n      <button type=\"submit\">Update Draft</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Newpost;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}