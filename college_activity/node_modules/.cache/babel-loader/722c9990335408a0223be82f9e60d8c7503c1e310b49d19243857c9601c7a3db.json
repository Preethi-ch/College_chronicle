{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chpre\\\\OneDrive\\\\Desktop\\\\college\\\\PROJECTS\\\\miniproject\\\\college_activity\\\\src\\\\Newpost.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import \"./Newpost.css\";\n\n// const NewPost = ({ userEmail }) => {\n//   const [title, setTitle] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [subCategory, setSubCategory] = useState(\"\");\n//   const [link, setLink] = useState(\"\"); // State for link field\n//   const [files, setFiles] = useState([]);\n//   const [filePreviews, setFilePreviews] = useState([]);\n\n//   const subCategoriesMap = {\n//     clubs: [\"RMF\", \"Splashout\", \"VPOD\", \"Rhythmic Thunders\", \"Happy Club\"],\n//     academics: [\"First Year\", \"Second Year\", \"Third Year\", \"Fourth Year\"],\n//     skillhub: [\"Hackathons\", \"Coding Contests\", \"Training Programs\"],\n//   };\n\n//   const handleFileChange = (event) => {\n//     const selectedFiles = Array.from(event.target.files);\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\n\n//     const previews = selectedFiles.map((file) => ({\n//       name: file.name,\n//       url: URL.createObjectURL(file),\n//     \n\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import \"./Newpost.css\";\n\n// const NewPost = ({ userEmail }) => {\n//   const [draftId, setDraftId] = useState(null);\n//   const [title, setTitle] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [subCategory, setSubCategory] = useState(\"\");\n//   const [link, setLink] = useState(\"\");\n//   const [files, setFiles] = useState([]);\n//   const [existingMedia, setExistingMedia] = useState([]);\n//   const location = useLocation();\n\n//   // Subcategories based on category selection\n//   const subCategoriesMap = {\n//     clubs: [\"RMF\", \"Splashout\", \"VPOD\", \"Rhythmic Thunders\", \"Happy Club\"],\n//     academics: [\"First Year\", \"Second Year\", \"Third Year\", \"Fourth Year\"],\n//     skillhub: [\"Hackathons\", \"Coding Contests\", \"Training Programs\"],\n//   };\n\n//   useEffect(() => {\n//     const queryParams = new URLSearchParams(location.search);\n//     const draftIdFromParams = queryParams.get(\"draftId\");\n\n//     if (draftIdFromParams) {\n//       setDraftId(draftIdFromParams);\n//       fetchDraftData(draftIdFromParams);\n//     }\n//   }, [location.search]);\n\n//   const fetchDraftData = async (id) => {\n//     try {\n//       const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\n//       if (!response.ok) throw new Error(\"Failed to fetch draft\");\n\n//       const draft = await response.json();\n//       setTitle(draft.title);\n//       setDescription(draft.description);\n//       setCategory(draft.category);\n//       setSubCategory(draft.subCategory || \"\");\n//       setLink(draft.link || \"\");\n//       setExistingMedia(draft.media || []);\n//     } catch (error) {\n//       console.error(\"Error fetching draft:\", error);\n//       alert(\"Could not load draft. Please try again.\");\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const selectedFiles = Array.from(event.target.files);\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\n//   };\n\n//   const resetForm = () => {\n//     setTitle(\"\");\n//     setDescription(\"\");\n//     setCategory(\"\");\n//     setSubCategory(\"\");\n//     setLink(\"\");\n//     setFiles([]);\n//     setExistingMedia([]);\n//     setDraftId(null);\n//   };\n\n//   const handleSubmit = async (isDraft = false) => {\n//     if (!title || !description || !category) {\n//       alert(\"Please fill all required fields!\");\n//       return;\n//     }\n\n//     if (!userEmail) {\n//       alert(\"Error: User email is missing!\");\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append(\"title\", title);\n//     formData.append(\"description\", description);\n//     formData.append(\"category\", category);\n//     formData.append(\"subCategory\", subCategory);\n//     formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\n//     formData.append(\"uploaderEmail\", userEmail);\n//     formData.append(\"link\", link);\n\n//     files.forEach((file) => formData.append(\"media\", file));\n\n//     try {\n//       let url, method;\n\n//       if (draftId) {\n//         // If draft exists, update it\n//         url = `http://localhost:3000/posts/update/${draftId}`;\n//         method = \"PUT\";\n//       } else {\n//         // If it's a new post\n//         url = \"http://localhost:3000/posts/create-post\";\n//         method = \"POST\";\n//       }\n\n//       const response = await fetch(url, {\n//         method: method,\n//         body: formData,\n//       });\n\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         throw new Error(errorData.error || \"Unknown error\");\n//       }\n\n//       alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\n\n//       if (!isDraft && draftId) {\n//         // If posting, delete the draft after updating\n//         await fetch(`http://localhost:3000/draftsview/delete/${draftId}`, { method: \"DELETE\" });\n//       }\n\n//       resetForm();\n//     } catch (error) {\n//       console.error(\"Error submitting post:\", error);\n//       alert(\"Submission failed. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h2>{draftId ? \"Edit Draft\" : \"New Post\"}</h2>\n//       <form>\n//         {/* File Upload */}\n//         <div className=\"file-upload\">\n//           <label htmlFor=\"fileInput\">\n//             {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\n//           </label>\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\n//         </div>\n\n//         {/* Display Uploaded Files */}\n//         <div className=\"uploaded-files\">\n//           {existingMedia.map((media, index) => (\n//             <div key={index} className=\"file-item\">\n//               <a href={media.url} target=\"_blank\" rel=\"noopener noreferrer\">\n//                 {media.url}\n//               </a>\n//             </div>\n//           ))}\n//         </div>\n\n//         {/* Form Fields */}\n//         <input type=\"text\" placeholder=\"Enter title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\n//         <textarea placeholder=\"Write a description\" value={description} onChange={(e) => setDescription(e.target.value)} required></textarea>\n//         <input type=\"text\" placeholder=\"Enter link (if any)\" value={link} onChange={(e) => setLink(e.target.value)} />\n\n//         {/* Category Selection */}\n//         <select value={category} onChange={(e) => { setCategory(e.target.value); setSubCategory(\"\"); }} required>\n//           <option value=\"\" disabled>Select a category</option>\n//           <option value=\"events\">Events</option>\n//           <option value=\"clubs\">Clubs</option>\n//           <option value=\"academics\">Academics</option>\n//           <option value=\"notices\">Notices</option>\n//           <option value=\"skillhub\">Skillhub</option>\n//           <option value=\"placements\">Placements</option>\n//         </select>\n\n//         {/* Subcategory Selection */}\n//         {category && subCategoriesMap[category] ? (\n//           <select value={subCategory} onChange={(e) => setSubCategory(e.target.value)} disabled={!category}>\n//             <option value=\"\" disabled>Select a subcategory</option>\n//             {subCategoriesMap[category].map((sub, index) => (\n//               <option key={index} value={sub}>{sub}</option>\n//             ))}\n//           </select>\n//         ) : null}\n\n//         {/* Buttons */}\n//         <div className=\"button-container\">\n//           <button type=\"button\" onClick={() => handleSubmit(false)}>Submit Post</button>\n//           <button type=\"button\" onClick={() => handleSubmit(true)}>Save as Draft</button>\n//           <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>Cancel</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default NewPost;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import \"./Newpost.css\";\n\n// const NewPost = ({ userEmail }) => {\n//   const [draftId, setDraftId] = useState(null);\n//   const [title, setTitle] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [subCategory, setSubCategory] = useState(\"\");\n//   const [link, setLink] = useState(\"\");\n//   const [files, setFiles] = useState([]);\n//   const location = useLocation();\n\n//   useEffect(() => {\n//     const queryParams = new URLSearchParams(location.search);\n//     const draftIdFromParams = queryParams.get(\"draftId\");\n//     if (draftIdFromParams) {\n//       setDraftId(draftIdFromParams);\n//       fetchDraftData(draftIdFromParams);\n//     }\n//   }, [location.search]);\n\n//   const fetchDraftData = async (id) => {\n//     try {\n//       const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\n//       if (!response.ok) throw new Error(\"Failed to fetch draft\");\n//       const draft = await response.json();\n//       setTitle(draft.title);\n//       setDescription(draft.description);\n//       setCategory(draft.category);\n//       setSubCategory(draft.subCategory || \"\");\n//       setLink(draft.link || \"\");\n//     } catch (error) {\n//       console.error(\"Error fetching draft:\", error);\n//       alert(\"Could not load draft. Please try again.\");\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const selectedFiles = Array.from(event.target.files);\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\n//   };\n\n//   const removeFile = (index) => {\n//     setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));\n//   };\n\n//   const resetForm = () => {\n//     setTitle(\"\");\n//     setDescription(\"\");\n//     setCategory(\"\");\n//     setSubCategory(\"\");\n//     setLink(\"\");\n//     setFiles([]);\n//     setDraftId(null);\n//   };\n\n//   const handleSubmit = async (isDraft = false) => {\n//     if (!title || !description || !category) {\n//       alert(\"Please fill all required fields!\");\n//       return;\n//     }\n//     if (!userEmail) {\n//       alert(\"Error: User email is missing!\");\n//       return;\n//     }\n//     const formData = new FormData();\n//     formData.append(\"title\", title);\n//     formData.append(\"description\", description);\n//     formData.append(\"category\", category);\n//     formData.append(\"subCategory\", subCategory);\n//     formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\n//     formData.append(\"uploaderEmail\", userEmail);\n//     formData.append(\"link\", link);\n//     files.forEach((file) => formData.append(\"media\", file));\n\n//     try {\n//       let url, method;\n//       if (draftId) {\n//         url = `http://localhost:3000/draftsview/update/${draftId}`;\n//         method = \"PUT\";\n//       } else {\n//         url = \"http://localhost:3000/posts/create-post\";\n//         method = \"POST\";\n//       }\n//       const response = await fetch(url, { method, body: formData });\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         throw new Error(errorData.error || \"Unknown error\");\n//       }\n//       alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\n//       if (!isDraft && draftId) {\n//         await fetch(`http://localhost:3000/draftsview/${draftId}`, { method: \"DELETE\" });\n//       }\n//       resetForm();\n//     } catch (error) {\n//       console.error(\"Error submitting post:\", error);\n//       alert(\"Submission failed. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h2>{draftId ? \"Edit Draft\" : \"New Post\"}</h2>\n//       <form>\n//         <div className=\"file-upload\">\n//           <label htmlFor=\"fileInput\">\n//             {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\n//           </label>\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\n//         </div>\n\n//         <div className=\"uploaded-files\">\n//           {files.map((file, index) => (\n//             <div key={index} className=\"file-item\">\n//               <span>{file.name}</span>\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeFile(index)}>\n//                 X\n//               </button>\n//             </div>\n//           ))}\n//         </div>\n\n//         <input type=\"text\" placeholder=\"Enter title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\n//         <textarea placeholder=\"Write a description\" value={description} onChange={(e) => setDescription(e.target.value)} required></textarea>\n//         <input type=\"text\" placeholder=\"Enter link (if any)\" value={link} onChange={(e) => setLink(e.target.value)} />\n\n//         <select value={category} onChange={(e) => { setCategory(e.target.value); setSubCategory(\"\"); }} required>\n//           <option value=\"\" disabled>Select a category</option>\n//           <option value=\"events\">Events</option>\n//           <option value=\"clubs\">Clubs</option>\n//           <option value=\"academics\">Academics</option>\n//           <option value=\"notices\">Notices</option>\n//           <option value=\"skillhub\">Skillhub</option>\n//           <option value=\"placements\">Placements</option>\n//         </select>\n\n//         <div className=\"button-container\">\n//           <button type=\"button\" onClick={() => handleSubmit(false)}>Submit Post</button>\n//           <button type=\"button\" onClick={() => handleSubmit(true)}>Save as Draft</button>\n//           <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>Cancel</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default NewPost;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import \"./Newpost.css\";\n\n// const NewPost = ({ userEmail }) => {\n//   const [draftId, setDraftId] = useState(null);\n//   const [title, setTitle] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [subCategory, setSubCategory] = useState(\"\");\n//   const [link, setLink] = useState(\"\");\n//   const [files, setFiles] = useState([]); // For newly uploaded files\n//   const [media, setMedia] = useState([]); // For existing media from database\n//   const location = useLocation();\n\n//   useEffect(() => {\n//     const queryParams = new URLSearchParams(location.search);\n//     const draftIdFromParams = queryParams.get(\"draftId\");\n//     if (draftIdFromParams) {\n//       setDraftId(draftIdFromParams);\n//       fetchDraftData(draftIdFromParams);\n//     }\n//   }, [location.search]);\n\n//   const fetchDraftData = async (id) => {\n//     try {\n//       const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\n//       if (!response.ok) throw new Error(\"Failed to fetch draft\");\n//       const draft = await response.json();\n//       setTitle(draft.title);\n//       setDescription(draft.description);\n//       setCategory(draft.category);\n//       setSubCategory(draft.subCategory || \"\");\n//       setLink(draft.link || \"\");\n//       setMedia(draft.media || []); // Store existing media from database\n//     } catch (error) {\n//       console.error(\"Error fetching draft:\", error);\n//       alert(\"Could not load draft. Please try again.\");\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const selectedFiles = Array.from(event.target.files);\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\n//   };\n\n//   const removeFile = (index) => {\n//     setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));\n//   };\n\n//   const removeExistingFile = async (fileId) => {\n//     try {\n//       const response = await fetch(`http://localhost:3000/draftsview/remove-media/${draftId}/${fileId}`, { method: \"DELETE\" });\n//       if (!response.ok) throw new Error(\"Failed to remove media\");\n//       setMedia(media.filter((file) => file._id !== fileId));\n//     } catch (error) {\n//       console.error(\"Error removing file:\", error);\n//       alert(\"Failed to remove file.\");\n//     }\n//   };\n\n//   const resetForm = () => {\n//     setTitle(\"\");\n//     setDescription(\"\");\n//     setCategory(\"\");\n//     setSubCategory(\"\");\n//     setLink(\"\");\n//     setFiles([]);\n//     setMedia([]);\n//     setDraftId(null);\n//   };\n\n//   const handleSubmit = async (isDraft = false) => {\n//     if (!title || !description || !category) {\n//         alert(\"Please fill all required fields!\");\n//         return;\n//     }\n//     if (!userEmail) {\n//         alert(\"Error: User email is missing!\");\n//         return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append(\"title\", title);\n//     formData.append(\"description\", description);\n//     formData.append(\"category\", category);\n//     formData.append(\"subCategory\", subCategory);\n//     formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\n//     formData.append(\"uploaderEmail\", userEmail);\n//     formData.append(\"link\", link);\n//     files.forEach((file) => formData.append(\"media\", file));\n\n//     console.log(\"Submitting post...\");\n//     console.log(\"Draft ID:\", draftId);\n//     console.log(\"FormData entries:\");\n//     for (let pair of formData.entries()) {\n//         console.log(pair[0], pair[1]);\n//     }\n\n//     try {\n//         let url, method;\n//         if (draftId) {\n//             url = `http://localhost:3000/draftsview/update/${draftId}`;\n//             method = \"PUT\";\n//         } else {\n//             url = \"http://localhost:3000/posts/create-post\";\n//             method = \"POST\";\n//         }\n\n//         console.log(`Sending ${method} request to:`, url);\n\n//         const response = await fetch(url, { method, body: formData });\n//         if (!response.ok) {\n//             const errorData = await response.json();\n//             throw new Error(errorData.error || \"Unknown error\");\n//         }\n\n//         alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\n//         console.log(\"Submission successful!\");\n\n//         if (!isDraft && draftId) {\n//             console.log(`Deleting draft ${draftId} after posting.`);\n//             await fetch(`http://localhost:3000/draftsview/${draftId}`, { method: \"DELETE\" });\n//         }\n\n//         resetForm();\n//     } catch (error) {\n//         console.error(\"Error submitting post:\", error);\n//         alert(\"Submission failed. Please try again.\");\n//     }\n// };\n\n//   return (\n//     <div className=\"container\">\n//       <h2>{draftId ? \"Edit Draft\" : \"New Post\"}</h2>\n//       <form>\n//         <div className=\"file-upload\">\n//           <label htmlFor=\"fileInput\">\n//             {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\n//           </label>\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\n//         </div>\n\n//         {/* Display existing media (from database) */}\n//         <div className=\"uploaded-files\">\n//           {media.map((file) => (\n//             <div key={file._id} className=\"file-item\">\n//               <a href={file.url} target=\"_blank\" rel=\"noopener noreferrer\">{file.url}</a>\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeExistingFile(file._id)}>X</button>\n//             </div>\n//           ))}\n\n//           {/* Display newly selected files */}\n//           {files.map((file, index) => (\n//             <div key={index} className=\"file-item\">\n//               <span>{file.name}</span>\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeFile(index)}>X</button>\n//             </div>\n//           ))}\n//         </div>\n\n//         <input type=\"text\" placeholder=\"Enter title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\n//         <textarea placeholder=\"Write a description\" value={description} onChange={(e) => setDescription(e.target.value)} required></textarea>\n//         <input type=\"text\" placeholder=\"Enter link (if any)\" value={link} onChange={(e) => setLink(e.target.value)} />\n\n//         <select value={category} onChange={(e) => { setCategory(e.target.value); setSubCategory(\"\"); }} required>\n//           <option value=\"\" disabled>Select a category</option>\n//           <option value=\"events\">Events</option>\n//           <option value=\"clubs\">Clubs</option>\n//           <option value=\"academics\">Academics</option>\n//           <option value=\"notices\">Notices</option>\n//           <option value=\"skillhub\">Skillhub</option>\n//           <option value=\"placements\">Placements</option>\n//         </select>\n\n//         <div className=\"button-container\">\n//           <button type=\"button\" onClick={() => handleSubmit(false)}>Submit Post</button>\n//           <button type=\"button\" onClick={() => handleSubmit(true)}>Save as Draft</button>\n//           <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>Cancel</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default NewPost;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import \"./Newpost.css\";\n\n// const NewPost = ({ userEmail }) => {\n//   const [draftId, setDraftId] = useState(null);\n//   const [title, setTitle] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [subCategory, setSubCategory] = useState(\"\");\n//   const [link, setLink] = useState(\"\");\n//   const [files, setFiles] = useState([]);\n//   const [media, setMedia] = useState([]);\n//   const location = useLocation();\n\n//   useEffect(() => {\n//     const queryParams = new URLSearchParams(location.search);\n//     const draftIdFromParams = queryParams.get(\"draftId\");\n//     if (draftIdFromParams) {\n//       setDraftId(draftIdFromParams);\n//       fetchDraftData(draftIdFromParams);\n//     }\n//   }, [location.search]);\n\n//   const fetchDraftData = async (id) => {\n//     try {\n//       const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\n//       if (!response.ok) throw new Error(\"Failed to fetch draft\");\n//       const draft = await response.json();\n//       setTitle(draft.title);\n//       setDescription(draft.description);\n//       setCategory(draft.category);\n//       setSubCategory(draft.subCategory || \"\");\n//       setLink(draft.link || \"\");\n//       setMedia(draft.media || []);\n//     } catch (error) {\n//       console.error(\"Error fetching draft:\", error);\n//       alert(\"Could not load draft. Please try again.\");\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const selectedFiles = Array.from(event.target.files);\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\n//   };\n\n//   const removeFile = (index) => {\n//     setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));\n//   };\n\n//   const removeExistingFile = async (fileId) => {\n//     try {\n//       const response = await fetch(`http://localhost:3000/draftsview/remove-media/${draftId}/${fileId}`, { method: \"DELETE\" });\n//       if (!response.ok) throw new Error(\"Failed to remove media\");\n//       setMedia(media.filter((file) => file._id !== fileId));\n//     } catch (error) {\n//       console.error(\"Error removing file:\", error);\n//       alert(\"Failed to remove file.\");\n//     }\n//   };\n\n//   const resetForm = () => {\n//     setTitle(\"\");\n//     setDescription(\"\");\n//     setCategory(\"\");\n//     setSubCategory(\"\");\n//     setLink(\"\");\n//     setFiles([]);\n//     setMedia([]);\n//     setDraftId(null);\n//   };\n\n//   const handleSubmit = async (isDraft = false) => {\n//     if (!title || !description || !category) {\n//       alert(\"Please fill all required fields!\");\n//       return;\n//     }\n//     if (!userEmail) {\n//       alert(\"Error: User email is missing!\");\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append(\"title\", title);\n//     formData.append(\"description\", description);\n//     formData.append(\"category\", category);\n//     formData.append(\"subCategory\", subCategory);\n//     formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\n//     formData.append(\"uploaderEmail\", userEmail);\n//     formData.append(\"link\", link);\n//     files.forEach((file) => formData.append(\"media\", file));\n\n//     try {\n//       let url, method;\n//       if (draftId) {\n//         url = `http://localhost:3000/draftsview/update/${draftId}`;\n//         method = \"PUT\";\n//       } else {\n//         url = \"http://localhost:3000/posts/create-post\";\n//         method = \"POST\";\n//       }\n\n//       const response = await fetch(url, { method, body: formData });\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         throw new Error(errorData.error || \"Unknown error\");\n//       }\n\n//       alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\n\n//       if (!isDraft && draftId) {\n//         await fetch(`http://localhost:3000/draftsview/${draftId}`, { method: \"DELETE\" });\n//       }\n\n//       resetForm();\n//     } catch (error) {\n//       console.error(\"Error submitting post:\", error);\n//       alert(\"Submission failed. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h2>{draftId ? \"Edit Draft\" : \"New Post\"}</h2>\n//       <form>\n//         <div className=\"file-upload\">\n//           <label htmlFor=\"fileInput\">\n//             {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\n//           </label>\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\n//         </div>\n\n//         <div className=\"uploaded-files\">\n//           {media.map((file) => (\n//             <div key={file._id} className=\"file-item\">\n//               <a href={file.url} target=\"_blank\" rel=\"noopener noreferrer\">{file.url}</a>\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeExistingFile(file._id)}>X</button>\n//             </div>\n//           ))}\n\n//           {files.map((file, index) => (\n//             <div key={index} className=\"file-item\">\n//               <span>{file.name}</span>\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeFile(index)}>X</button>\n//             </div>\n//           ))}\n//         </div>\n\n//         <input type=\"text\" placeholder=\"Enter title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\n//         <textarea placeholder=\"Write a description\" value={description} onChange={(e) => setDescription(e.target.value)} required></textarea>\n//         <input type=\"text\" placeholder=\"Enter link (if any)\" value={link} onChange={(e) => setLink(e.target.value)} />\n\n//         <select value={category} onChange={(e) => setCategory(e.target.value)} required>\n//           <option value=\"\" disabled>Select a category</option>\n//           <option value=\"events\">Events</option>\n//           <option value=\"clubs\">Clubs</option>\n//           <option value=\"academics\">Academics</option>\n//           <option value=\"notices\">Notices</option>\n//           <option value=\"skillhub\">Skillhub</option>\n//           <option value=\"placements\">Placements</option>\n//         </select>\n\n//         <div className=\"button-container\">\n//           <button type=\"button\" onClick={() => handleSubmit(false)}>Submit Post</button>\n//           <button type=\"button\" onClick={() => handleSubmit(true)}>Save as Draft</button>\n//           <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>Cancel</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default NewPost;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import \"./Newpost.css\";\n\n// const subCategoriesMap = {\n//   Club: [\"RMF\", \"Splash Out\", \"VPOD\", \"Rhythmic Thunders\", \"sports\"],\n//   Academics: [\"First year\", \"Second year\", \"Third year\", \"Fourth year\"],\n//   Skillhub: [\"Hackathons\", \"Coding-Contests\", \"Training Programmes\"],\n// };\n\n// const NewPost = ({ userEmail }) => {\n//   const [draftId, setDraftId] = useState(null);\n//   const [title, setTitle] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [subCategory, setSubCategory] = useState(\"\");\n//   const [link, setLink] = useState(\"\");\n//   const [files, setFiles] = useState([]);\n//   const [media, setMedia] = useState([]);\n\n//   // Optional event fields\n//   const [eventName, setEventName] = useState(\"\");\n//   const [eventDate, setEventDate] = useState(\"\");\n//   const [eventTime, setEventTime] = useState(\"\");\n//   const [location, setLocation] = useState(\"\");\n\n//   const locationHook = useLocation();\n\n//   useEffect(() => {\n//     const queryParams = new URLSearchParams(locationHook.search);\n//     const draftIdFromParams = queryParams.get(\"draftId\");\n\n//     if (draftIdFromParams) {\n//       setDraftId(draftIdFromParams);\n//       fetchDraftData(draftIdFromParams);\n//     }\n//   }, [locationHook.search]);\n\n//   const fetchDraftData = async (id) => {\n//     try {\n//       const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\n//       if (!response.ok) throw new Error(\"Failed to fetch draft\");\n//       const draft = await response.json();\n\n//       setTitle(draft.title);\n//       setDescription(draft.description);\n//       setCategory(draft.category);\n//       setSubCategory(draft.subCategory || \"\");\n//       setLink(draft.link || \"\");\n//       setMedia(draft.media || []);\n//       setEventName(draft.eventName || \"\");\n//       setEventDate(draft.eventDate || \"\");\n//       setEventTime(draft.eventTime || \"\");\n//       setLocation(draft.location || \"\");\n//     } catch (error) {\n//       alert(\"Could not load draft. Please try again.\");\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const selectedFiles = Array.from(event.target.files);\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\n//   };\n\n//   const removeFile = (index) => {\n//     setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));\n//   };\n\n//   const removeExistingFile = async (fileId) => {\n//     try {\n//       const response = await fetch(`http://localhost:3000/draftsview/remove-media/${draftId}/${fileId}`, {\n//         method: \"DELETE\",\n//       });\n//       if (!response.ok) throw new Error(\"Failed to remove media\");\n//       setMedia(media.filter((file) => file._id !== fileId));\n//     } catch (error) {\n//       alert(\"Failed to remove file.\");\n//     }\n//   };\n\n//   const resetForm = () => {\n//     setTitle(\"\");\n//     setDescription(\"\");\n//     setCategory(\"\");\n//     setSubCategory(\"\");\n//     setLink(\"\");\n//     setFiles([]);\n//     setMedia([]);\n//     setEventName(\"\");\n//     setEventDate(\"\");\n//     setEventTime(\"\");\n//     setLocation(\"\");\n//     setDraftId(null);\n//   };\n\n//   const handleSubmit = async (isDraft = false) => {\n//     if (!title || !description || !category) {\n//       alert(\"Please fill all required fields!\");\n//       return;\n//     }\n//     if (!userEmail) {\n//       alert(\"Error: User email is missing!\");\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append(\"title\", title);\n//     formData.append(\"description\", description);\n//     formData.append(\"category\", category);\n//     formData.append(\"subCategory\", subCategory);\n//     formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\n//     formData.append(\"uploaderEmail\", userEmail);\n//     formData.append(\"link\", link);\n//     files.forEach((file) => formData.append(\"media\", file));\n\n//     // Only append optional fields if they have values\n//     if (eventName) formData.append(\"eventName\", eventName);\n//     if (eventDate) formData.append(\"eventDate\", eventDate);\n//     if (eventTime) formData.append(\"eventTime\", eventTime);\n//     if (location) formData.append(\"location\", location);\n\n//     try {\n//       let url, method;\n//       if (draftId) {\n//         url = `http://localhost:3000/draftsview/update/${draftId}`;\n//         method = \"PUT\";\n//       } else {\n//         url = \"http://localhost:3000/posts/create-post\";\n//         method = \"POST\";\n//       }\n\n//       const response = await fetch(url, { method, body: formData });\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         throw new Error(errorData.error || \"Unknown error\");\n//       }\n\n//       alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\n//       resetForm();\n//     } catch (error) {\n//       alert(\"Submission failed. Please try again.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h2>{draftId ? \"Edit Draft\" : \"New Post\"}</h2>\n//       <form>\n//         <div className=\"file-upload\">\n//           <label htmlFor=\"fileInput\">\n//             {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\n//           </label>\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\n//         </div>\n\n//         <div className=\"uploaded-files\">\n//           {media.map((file) => (\n//             <div key={file._id} className=\"file-item\">\n//               <a href={file.url} target=\"_blank\" rel=\"noopener noreferrer\">{file.url}</a>\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeExistingFile(file._id)}>X</button>\n//             </div>\n//           ))}\n\n//           {files.map((file, index) => (\n//             <div key={index} className=\"file-item\">\n//               <span>{file.name}</span>\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeFile(index)}>X</button>\n//             </div>\n//           ))}\n//         </div>\n\n//         {/* Required Fields First */}\n//         <input type=\"text\" placeholder=\"Enter title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\n//         <textarea placeholder=\"Write a description\" value={description} onChange={(e) => setDescription(e.target.value)} required></textarea>\n\n//         {/* Optional Event Fields */}\n//         <input type=\"text\" placeholder=\"Enter Event Name (optional)\" value={eventName} onChange={(e) => setEventName(e.target.value)} />\n//         <input type=\"date\" value={eventDate} onChange={(e) => setEventDate(e.target.value)} />\n//         <input type=\"time\" value={eventTime} onChange={(e) => setEventTime(e.target.value)} />\n//         <input type=\"text\" placeholder=\"Enter Location (optional)\" value={location} onChange={(e) => setLocation(e.target.value)} />\n\n//         <input type=\"text\" placeholder=\"Enter link (if any)\" value={link} onChange={(e) => setLink(e.target.value)} />\n\n//         <select value={category} onChange={(e) => setCategory(e.target.value)} required>\n//           <option value=\"\" disabled>Select a category</option>\n//           <option value=\"Events\">Events</option>\n//           <option value=\"Club\">Club</option>\n//           <option value=\"Academics\">Academics</option>\n//           <option value=\"Notices\">Notices</option>\n//           <option value=\"Skillhub\">Skillhub</option>\n//           <option value=\"Placements\">Placements</option>\n//         </select>\n\n//         <select\n//           value={subCategory}\n//           onChange={(e) => setSubCategory(e.target.value)}\n//           disabled={!subCategoriesMap[category]?.length}\n//         >\n//           <option value=\"\" disabled>Select a subcategory</option>\n//           {subCategoriesMap[category]?.map((sub, index) => (\n//             <option key={index} value={sub}>{sub}</option>\n//           ))}\n//         </select>\n\n//         <div className=\"button-container\">\n//           <button type=\"button\" onClick={() => handleSubmit(false)}>Submit Post</button>\n//           <button type=\"button\" onClick={() => handleSubmit(true)}>Save as Draft</button>\n//           <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>Cancel</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default NewPost;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import \"./Newpost.css\";\n\n// const subCategoriesMap = {\n//   Club: [\"RMF\", \"Splash Out\", \"VPOD\", \"Rhythmic Thunders\", \"sports\"],\n//   Academics: [\"First year\", \"Second year\", \"Third year\", \"Fourth year\"],\n//   Skillhub: [\"Hackathons\", \"Coding-Contests\", \"Training Programmes\"],\n// };\n\n// const NewPost = ({ userEmail }) => {\n//   const [draftId, setDraftId] = useState(null);\n//   const [title, setTitle] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [subCategory, setSubCategory] = useState(\"\");\n//   const [link, setLink] = useState(\"\");\n//   const [files, setFiles] = useState([]);\n//   const [media, setMedia] = useState([]);\n\n//   const [eventName, setEventName] = useState(\"\");\n//   const [eventDate, setEventDate] = useState(\"\");\n//   const [eventTime, setEventTime] = useState(\"\");\n//   const [location, setLocation] = useState(\"\");\n\n//   const locationHook = useLocation();\n\n//   useEffect(() => {\n//     const queryParams = new URLSearchParams(locationHook.search);\n//     const draftIdFromParams = queryParams.get(\"draftId\");\n\n//     if (draftIdFromParams) {\n//       setDraftId(draftIdFromParams);\n//       fetchDraftData(draftIdFromParams);\n//     }\n//   }, [locationHook.search]);\n\n//   const fetchDraftData = async (id) => {\n//     try {\n//       const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\n//       if (!response.ok) throw new Error(\"Failed to fetch draft\");\n//       const draft = await response.json();\n\n//       setTitle(draft.title);\n//       setDescription(draft.description);\n//       setCategory(draft.category);\n//       setSubCategory(draft.subCategory || \"\");\n//       setLink(draft.link || \"\");\n//       setMedia(draft.media || []);\n//       setEventName(draft.eventName || \"\");\n//       setEventDate(draft.eventDate || \"\");\n//       setEventTime(draft.eventTime || \"\");\n//       setLocation(draft.location || \"\");\n//     } catch (error) {\n//       alert(\"Could not load draft. Please try again.\");\n//     }\n//   };\n\n//   const handleFileChange = (event) => {\n//     const selectedFiles = Array.from(event.target.files);\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\n//   };\n\n//   const removeFile = (index) => {\n//     setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));\n//   };\n\n//   const removeExistingFile = async (fileId) => {\n//     try {\n//       const response = await fetch(`http://localhost:3000/draftsview/remove-media/${draftId}/${fileId}`, {\n//         method: \"DELETE\",\n//       });\n//       if (!response.ok) throw new Error(\"Failed to remove media\");\n//       setMedia(media.filter((file) => file._id !== fileId));\n//     } catch (error) {\n//       alert(\"Failed to remove file.\");\n//     }\n//   };\n\n//   const resetForm = () => {\n//     setTitle(\"\");\n//     setDescription(\"\");\n//     setCategory(\"\");\n//     setSubCategory(\"\");\n//     setLink(\"\");\n//     setFiles([]);\n//     setMedia([]);\n//     setEventName(\"\");\n//     setEventDate(\"\");\n//     setEventTime(\"\");\n//     setLocation(\"\");\n//     setDraftId(null);\n//   };\n\n//   const handleSubmit = async (isDraft = false) => {\n//     if (!title || !description || !category) {\n//       alert(\"Please fill all required fields!\");\n//       return;\n//     }\n//     if (!userEmail) {\n//       alert(\"Error: User email is missing!\");\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append(\"title\", title);\n//     formData.append(\"description\", description);\n//     formData.append(\"category\", category);\n//     formData.append(\"subCategory\", subCategory);\n//     formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\n//     formData.append(\"uploaderEmail\", userEmail);\n//     formData.append(\"link\", link);\n//     files.forEach((file) => formData.append(\"media\", file));\n\n//     if (eventName) formData.append(\"eventName\", eventName);\n//     if (eventDate) formData.append(\"eventDate\", eventDate);\n//     if (eventTime) formData.append(\"eventTime\", eventTime);\n//     if (location) formData.append(\"location\", location);\n\n//     try {\n//       let url, method;\n//       if (draftId) {\n//         url = `http://localhost:3000/draftsview/update/${draftId}`;\n//         method = \"PUT\";\n//       } else {\n//         url = \"http://localhost:3000/posts/create-post\";\n//         method = \"POST\";\n//       }\n\n//       const response = await fetch(url, { method, body: formData });\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         throw new Error(errorData.error || \"Unknown error\");\n//       }\n\n//       alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\n//       resetForm();\n//     } catch (error) {\n//       alert(\"Submission failed. Please try again.\");\n//     }\n//   };\n\n//   const getTodayDate = () => {\n//     const today = new Date();\n//     const yyyy = today.getFullYear();\n//     const mm = String(today.getMonth() + 1).padStart(2, \"0\");\n//     const dd = String(today.getDate()).padStart(2, \"0\");\n//     return `${yyyy}-${mm}-${dd}`;\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h2>{draftId ? \"Edit Draft\" : \"New Post\"}</h2>\n//       <form>\n//         <div className=\"file-upload\">\n//           <label htmlFor=\"fileInput\">\n//             {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\n//           </label>\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\n//         </div>\n\n//         <div className=\"uploaded-files\">\n//           {media.map((file) => (\n//             <div key={file._id} className=\"file-item\">\n//               <a href={file.url} target=\"_blank\" rel=\"noopener noreferrer\">{file.url}</a>\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeExistingFile(file._id)}>X</button>\n//             </div>\n//           ))}\n//           {files.map((file, index) => (\n//             <div key={index} className=\"file-item\">\n//               <span>{file.name}</span>\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeFile(index)}>X</button>\n//             </div>\n//           ))}\n//         </div>\n\n//         <input type=\"text\" placeholder=\"Enter title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\n//         <textarea placeholder=\"Write a description\" value={description} onChange={(e) => setDescription(e.target.value)} required></textarea>\n\n//         {/* Optional Event Fields */}\n//         <input type=\"text\" placeholder=\"Enter Event Name (optional)\" value={eventName} onChange={(e) => setEventName(e.target.value)} />\n//         <input type=\"date\" min={getTodayDate()} value={eventDate} onChange={(e) => setEventDate(e.target.value)} />\n//         <input type=\"time\" value={eventTime} onChange={(e) => setEventTime(e.target.value)} />\n//         <input type=\"text\" placeholder=\"Enter Location (optional)\" value={location} onChange={(e) => setLocation(e.target.value)} />\n\n//         <input type=\"text\" placeholder=\"Enter link (if any)\" value={link} onChange={(e) => setLink(e.target.value)} />\n\n//         <select value={category} onChange={(e) => setCategory(e.target.value)} required>\n//           <option value=\"\" disabled>Select a category</option>\n//           <option value=\"Events\">Events</option>\n//           <option value=\"Club\">Club</option>\n//           <option value=\"Academics\">Academics</option>\n//           <option value=\"Notices\">Notices</option>\n//           <option value=\"Skillhub\">Skillhub</option>\n//           <option value=\"Placements\">Placements</option>\n//         </select>\n\n//         <select\n//           value={subCategory}\n//           onChange={(e) => setSubCategory(e.target.value)}\n//           disabled={!subCategoriesMap[category]?.length}\n//         >\n//           <option value=\"\" disabled>Select a subcategory</option>\n//           {subCategoriesMap[category]?.map((sub, index) => (\n//             <option key={index} value={sub}>{sub}</option>\n//           ))}\n//         </select>\n\n//         <div className=\"button-container\">\n//           <button type=\"button\" onClick={() => handleSubmit(false)}>Submit Post</button>\n//           <button type=\"button\" onClick={() => handleSubmit(true)}>Save as Draft</button>\n//           <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>Cancel</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default NewPost;\n\n// NewPost.js\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport \"./Newpost.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst subCategoriesMap = {\n  Club: [\"RMF\", \"Splash Out\", \"VPOD\", \"Rhythmic Thunders\", \"sports\"],\n  Academics: [\"First year\", \"Second year\", \"Third year\", \"Fourth year\"],\n  Skillhub: [\"Hackathons\", \"Coding-Contests\", \"Training Programmes\"]\n};\nconst NewPost = ({\n  userEmail\n}) => {\n  _s();\n  var _subCategoriesMap$cat, _subCategoriesMap$cat2;\n  const [draftId, setDraftId] = useState(null);\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [subCategory, setSubCategory] = useState(\"\");\n  const [link, setLink] = useState(\"\");\n  const [files, setFiles] = useState([]);\n  const [media, setMedia] = useState([]);\n  const [eventName, setEventName] = useState(\"\");\n  const [eventDate, setEventDate] = useState(\"\");\n  const [eventTime, setEventTime] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const locationHook = useLocation();\n  useEffect(() => {\n    const queryParams = new URLSearchParams(locationHook.search);\n    const draftIdFromParams = queryParams.get(\"draftId\");\n    if (draftIdFromParams) {\n      setDraftId(draftIdFromParams);\n      fetchDraftData(draftIdFromParams);\n    }\n  }, [locationHook.search]);\n  const fetchDraftData = async id => {\n    try {\n      const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\n      if (!response.ok) throw new Error(\"Failed to fetch draft\");\n      const draft = await response.json();\n      setTitle(draft.title);\n      setDescription(draft.description);\n      setCategory(draft.category);\n      setSubCategory(draft.subCategory || \"\");\n      setLink(draft.link || \"\");\n      setMedia(draft.media || []);\n      setEventName(draft.eventName || \"\");\n      setEventDate(draft.eventDate || \"\");\n      setEventTime(draft.eventTime || \"\");\n      setLocation(draft.location || \"\");\n    } catch (error) {\n      alert(\"Could not load draft. Please try again.\");\n    }\n  };\n  const handleFileChange = event => {\n    const selectedFiles = Array.from(event.target.files);\n    setFiles(prevFiles => [...prevFiles, ...selectedFiles]);\n  };\n  const removeFile = index => {\n    setFiles(prevFiles => prevFiles.filter((_, i) => i !== index));\n  };\n  const removeExistingFile = async fileId => {\n    try {\n      const response = await fetch(`http://localhost:3000/draftsview/remove-media/${draftId}/${fileId}`, {\n        method: \"DELETE\"\n      });\n      if (!response.ok) throw new Error(\"Failed to remove media\");\n      setMedia(media.filter(file => file._id !== fileId));\n    } catch (error) {\n      alert(\"Failed to remove file.\");\n    }\n  };\n  const resetForm = () => {\n    setTitle(\"\");\n    setDescription(\"\");\n    setCategory(\"\");\n    setSubCategory(\"\");\n    setLink(\"\");\n    setFiles([]);\n    setMedia([]);\n    setEventName(\"\");\n    setEventDate(\"\");\n    setEventTime(\"\");\n    setLocation(\"\");\n    setDraftId(null);\n  };\n  const handleSubmit = async (isDraft = false) => {\n    if (!title || !description || !category) {\n      alert(\"Please fill all required fields!\");\n      return;\n    }\n    if (!userEmail) {\n      alert(\"Error: User email is missing!\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"title\", title);\n    formData.append(\"description\", description);\n    formData.append(\"category\", category);\n    formData.append(\"subCategory\", subCategory);\n    formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\n    formData.append(\"uploaderEmail\", userEmail);\n    formData.append(\"link\", link);\n    if (draftId) formData.append(\"draftId\", draftId);\n    files.forEach(file => formData.append(\"media\", file));\n    formData.append(\"eventName\", eventName);\n    formData.append(\"eventDate\", eventDate);\n    formData.append(\"eventTime\", eventTime);\n    formData.append(\"location\", location);\n    try {\n      const url = `http://localhost:3000/posts/create-post`;\n      const response = await fetch(url, {\n        method: \"POST\",\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Unknown error\");\n      }\n      alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\n      resetForm();\n    } catch (error) {\n      alert(\"Submission failed: \" + error.message);\n    }\n  };\n  const getTodayDate = () => {\n    const today = new Date();\n    const yyyy = today.getFullYear();\n    const mm = String(today.getMonth() + 1).padStart(2, \"0\");\n    const dd = String(today.getDate()).padStart(2, \"0\");\n    return `${yyyy}-${mm}-${dd}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: draftId ? \"Edit Draft\" : \"New Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1383,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-upload\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"fileInput\",\n          children: files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1386,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          id: \"fileInput\",\n          onChange: handleFileChange,\n          multiple: true,\n          style: {\n            display: \"none\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1389,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1385,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"uploaded-files\",\n        children: [media.map(file => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            href: file.url,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: file.url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1395,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"remove-file\",\n            onClick: () => removeExistingFile(file._id),\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1396,\n            columnNumber: 15\n          }, this)]\n        }, file._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1394,\n          columnNumber: 13\n        }, this)), files.map((file, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: file.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1401,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"remove-file\",\n            onClick: () => removeFile(index),\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1402,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1400,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1392,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter title\",\n        value: title,\n        onChange: e => setTitle(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1407,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Write a description\",\n        value: description,\n        onChange: e => setDescription(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1408,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Event Name (optional)\",\n        value: eventName,\n        onChange: e => setEventName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1410,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        min: getTodayDate(),\n        value: eventDate,\n        onChange: e => setEventDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1411,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        value: eventTime,\n        onChange: e => setEventTime(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1412,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Event Location (optional)\",\n        value: location,\n        onChange: e => setLocation(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1413,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Link (if any)\",\n        value: link,\n        onChange: e => setLink(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1415,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: category,\n        onChange: e => setCategory(e.target.value),\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1418,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Events\",\n          children: \"Events\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1419,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Club\",\n          children: \"Club\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1420,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Academics\",\n          children: \"Academics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1421,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Notices\",\n          children: \"Notices\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1422,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Skillhub\",\n          children: \"Skillhub\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1423,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Placements\",\n          children: \"Placements\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1424,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1417,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: subCategory,\n        onChange: e => setSubCategory(e.target.value),\n        disabled: !((_subCategoriesMap$cat = subCategoriesMap[category]) !== null && _subCategoriesMap$cat !== void 0 && _subCategoriesMap$cat.length),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select subcategory\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1432,\n          columnNumber: 11\n        }, this), (_subCategoriesMap$cat2 = subCategoriesMap[category]) === null || _subCategoriesMap$cat2 === void 0 ? void 0 : _subCategoriesMap$cat2.map((sub, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: sub,\n          children: sub\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1434,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1427,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => handleSubmit(false),\n          children: \"Submit Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1439,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => handleSubmit(true),\n          children: \"Save as Draft\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1440,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"cancel-button\",\n          onClick: resetForm,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1441,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1438,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1384,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1382,\n    columnNumber: 5\n  }, this);\n};\n_s(NewPost, \"uSbSEx707GpjYaMfDnKhq5hY53k=\", false, function () {\n  return [useLocation];\n});\n_c = NewPost;\nexport default NewPost;\nvar _c;\n$RefreshReg$(_c, \"NewPost\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","jsxDEV","_jsxDEV","subCategoriesMap","Club","Academics","Skillhub","NewPost","userEmail","_s","_subCategoriesMap$cat","_subCategoriesMap$cat2","draftId","setDraftId","title","setTitle","description","setDescription","category","setCategory","subCategory","setSubCategory","link","setLink","files","setFiles","media","setMedia","eventName","setEventName","eventDate","setEventDate","eventTime","setEventTime","location","setLocation","locationHook","queryParams","URLSearchParams","search","draftIdFromParams","get","fetchDraftData","id","response","fetch","ok","Error","draft","json","error","alert","handleFileChange","event","selectedFiles","Array","from","target","prevFiles","removeFile","index","filter","_","i","removeExistingFile","fileId","method","file","_id","resetForm","handleSubmit","isDraft","formData","FormData","append","forEach","url","body","errorData","message","getTodayDate","today","Date","yyyy","getFullYear","mm","String","getMonth","padStart","dd","getDate","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","length","type","onChange","multiple","style","display","map","href","rel","onClick","name","placeholder","value","e","required","min","disabled","sub","_c","$RefreshReg$"],"sources":["C:/Users/chpre/OneDrive/Desktop/college/PROJECTS/miniproject/college_activity/src/Newpost.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import \"./Newpost.css\";\r\n\r\n\r\n// const NewPost = ({ userEmail }) => {\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n//   const [category, setCategory] = useState(\"\");\r\n//   const [subCategory, setSubCategory] = useState(\"\");\r\n//   const [link, setLink] = useState(\"\"); // State for link field\r\n//   const [files, setFiles] = useState([]);\r\n//   const [filePreviews, setFilePreviews] = useState([]);\r\n\r\n//   const subCategoriesMap = {\r\n//     clubs: [\"RMF\", \"Splashout\", \"VPOD\", \"Rhythmic Thunders\", \"Happy Club\"],\r\n//     academics: [\"First Year\", \"Second Year\", \"Third Year\", \"Fourth Year\"],\r\n//     skillhub: [\"Hackathons\", \"Coding Contests\", \"Training Programs\"],\r\n//   };\r\n\r\n//   const handleFileChange = (event) => {\r\n//     const selectedFiles = Array.from(event.target.files);\r\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\r\n\r\n//     const previews = selectedFiles.map((file) => ({\r\n//       name: file.name,\r\n//       url: URL.createObjectURL(file),\r\n//     \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useLocation } from \"react-router-dom\";\r\n// import \"./Newpost.css\";\r\n\r\n// const NewPost = ({ userEmail }) => {\r\n//   const [draftId, setDraftId] = useState(null);\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n//   const [category, setCategory] = useState(\"\");\r\n//   const [subCategory, setSubCategory] = useState(\"\");\r\n//   const [link, setLink] = useState(\"\");\r\n//   const [files, setFiles] = useState([]);\r\n//   const [existingMedia, setExistingMedia] = useState([]);\r\n//   const location = useLocation();\r\n\r\n//   // Subcategories based on category selection\r\n//   const subCategoriesMap = {\r\n//     clubs: [\"RMF\", \"Splashout\", \"VPOD\", \"Rhythmic Thunders\", \"Happy Club\"],\r\n//     academics: [\"First Year\", \"Second Year\", \"Third Year\", \"Fourth Year\"],\r\n//     skillhub: [\"Hackathons\", \"Coding Contests\", \"Training Programs\"],\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const queryParams = new URLSearchParams(location.search);\r\n//     const draftIdFromParams = queryParams.get(\"draftId\");\r\n\r\n//     if (draftIdFromParams) {\r\n//       setDraftId(draftIdFromParams);\r\n//       fetchDraftData(draftIdFromParams);\r\n//     }\r\n//   }, [location.search]);\r\n\r\n//   const fetchDraftData = async (id) => {\r\n//     try {\r\n//       const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\r\n//       if (!response.ok) throw new Error(\"Failed to fetch draft\");\r\n\r\n//       const draft = await response.json();\r\n//       setTitle(draft.title);\r\n//       setDescription(draft.description);\r\n//       setCategory(draft.category);\r\n//       setSubCategory(draft.subCategory || \"\");\r\n//       setLink(draft.link || \"\");\r\n//       setExistingMedia(draft.media || []);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching draft:\", error);\r\n//       alert(\"Could not load draft. Please try again.\");\r\n//     }\r\n//   };\r\n\r\n//   const handleFileChange = (event) => {\r\n//     const selectedFiles = Array.from(event.target.files);\r\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\r\n//   };\r\n\r\n//   const resetForm = () => {\r\n//     setTitle(\"\");\r\n//     setDescription(\"\");\r\n//     setCategory(\"\");\r\n//     setSubCategory(\"\");\r\n//     setLink(\"\");\r\n//     setFiles([]);\r\n//     setExistingMedia([]);\r\n//     setDraftId(null);\r\n//   };\r\n\r\n//   const handleSubmit = async (isDraft = false) => {\r\n//     if (!title || !description || !category) {\r\n//       alert(\"Please fill all required fields!\");\r\n//       return;\r\n//     }\r\n  \r\n//     if (!userEmail) {\r\n//       alert(\"Error: User email is missing!\");\r\n//       return;\r\n//     }\r\n  \r\n//     const formData = new FormData();\r\n//     formData.append(\"title\", title);\r\n//     formData.append(\"description\", description);\r\n//     formData.append(\"category\", category);\r\n//     formData.append(\"subCategory\", subCategory);\r\n//     formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\r\n//     formData.append(\"uploaderEmail\", userEmail);\r\n//     formData.append(\"link\", link);\r\n    \r\n//     files.forEach((file) => formData.append(\"media\", file));\r\n  \r\n//     try {\r\n//       let url, method;\r\n  \r\n//       if (draftId) {\r\n//         // If draft exists, update it\r\n//         url = `http://localhost:3000/posts/update/${draftId}`;\r\n//         method = \"PUT\";\r\n//       } else {\r\n//         // If it's a new post\r\n//         url = \"http://localhost:3000/posts/create-post\";\r\n//         method = \"POST\";\r\n//       }\r\n  \r\n//       const response = await fetch(url, {\r\n//         method: method,\r\n//         body: formData,\r\n//       });\r\n  \r\n//       if (!response.ok) {\r\n//         const errorData = await response.json();\r\n//         throw new Error(errorData.error || \"Unknown error\");\r\n//       }\r\n  \r\n//       alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\r\n  \r\n//       if (!isDraft && draftId) {\r\n//         // If posting, delete the draft after updating\r\n//         await fetch(`http://localhost:3000/draftsview/delete/${draftId}`, { method: \"DELETE\" });\r\n//       }\r\n  \r\n//       resetForm();\r\n//     } catch (error) {\r\n//       console.error(\"Error submitting post:\", error);\r\n//       alert(\"Submission failed. Please try again.\");\r\n//     }\r\n//   };\r\n  \r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h2>{draftId ? \"Edit Draft\" : \"New Post\"}</h2>\r\n//       <form>\r\n//         {/* File Upload */}\r\n//         <div className=\"file-upload\">\r\n//           <label htmlFor=\"fileInput\">\r\n//             {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\r\n//           </label>\r\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\r\n//         </div>\r\n\r\n//         {/* Display Uploaded Files */}\r\n//         <div className=\"uploaded-files\">\r\n//           {existingMedia.map((media, index) => (\r\n//             <div key={index} className=\"file-item\">\r\n//               <a href={media.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n//                 {media.url}\r\n//               </a>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n\r\n//         {/* Form Fields */}\r\n//         <input type=\"text\" placeholder=\"Enter title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\r\n//         <textarea placeholder=\"Write a description\" value={description} onChange={(e) => setDescription(e.target.value)} required></textarea>\r\n//         <input type=\"text\" placeholder=\"Enter link (if any)\" value={link} onChange={(e) => setLink(e.target.value)} />\r\n\r\n//         {/* Category Selection */}\r\n//         <select value={category} onChange={(e) => { setCategory(e.target.value); setSubCategory(\"\"); }} required>\r\n//           <option value=\"\" disabled>Select a category</option>\r\n//           <option value=\"events\">Events</option>\r\n//           <option value=\"clubs\">Clubs</option>\r\n//           <option value=\"academics\">Academics</option>\r\n//           <option value=\"notices\">Notices</option>\r\n//           <option value=\"skillhub\">Skillhub</option>\r\n//           <option value=\"placements\">Placements</option>\r\n//         </select>\r\n\r\n//         {/* Subcategory Selection */}\r\n//         {category && subCategoriesMap[category] ? (\r\n//           <select value={subCategory} onChange={(e) => setSubCategory(e.target.value)} disabled={!category}>\r\n//             <option value=\"\" disabled>Select a subcategory</option>\r\n//             {subCategoriesMap[category].map((sub, index) => (\r\n//               <option key={index} value={sub}>{sub}</option>\r\n//             ))}\r\n//           </select>\r\n//         ) : null}\r\n\r\n//         {/* Buttons */}\r\n//         <div className=\"button-container\">\r\n//           <button type=\"button\" onClick={() => handleSubmit(false)}>Submit Post</button>\r\n//           <button type=\"button\" onClick={() => handleSubmit(true)}>Save as Draft</button>\r\n//           <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>Cancel</button>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default NewPost;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useLocation } from \"react-router-dom\";\r\n// import \"./Newpost.css\";\r\n\r\n// const NewPost = ({ userEmail }) => {\r\n//   const [draftId, setDraftId] = useState(null);\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n//   const [category, setCategory] = useState(\"\");\r\n//   const [subCategory, setSubCategory] = useState(\"\");\r\n//   const [link, setLink] = useState(\"\");\r\n//   const [files, setFiles] = useState([]);\r\n//   const location = useLocation();\r\n\r\n//   useEffect(() => {\r\n//     const queryParams = new URLSearchParams(location.search);\r\n//     const draftIdFromParams = queryParams.get(\"draftId\");\r\n//     if (draftIdFromParams) {\r\n//       setDraftId(draftIdFromParams);\r\n//       fetchDraftData(draftIdFromParams);\r\n//     }\r\n//   }, [location.search]);\r\n\r\n//   const fetchDraftData = async (id) => {\r\n//     try {\r\n//       const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\r\n//       if (!response.ok) throw new Error(\"Failed to fetch draft\");\r\n//       const draft = await response.json();\r\n//       setTitle(draft.title);\r\n//       setDescription(draft.description);\r\n//       setCategory(draft.category);\r\n//       setSubCategory(draft.subCategory || \"\");\r\n//       setLink(draft.link || \"\");\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching draft:\", error);\r\n//       alert(\"Could not load draft. Please try again.\");\r\n//     }\r\n//   };\r\n\r\n//   const handleFileChange = (event) => {\r\n//     const selectedFiles = Array.from(event.target.files);\r\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\r\n//   };\r\n\r\n//   const removeFile = (index) => {\r\n//     setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));\r\n//   };\r\n\r\n//   const resetForm = () => {\r\n//     setTitle(\"\");\r\n//     setDescription(\"\");\r\n//     setCategory(\"\");\r\n//     setSubCategory(\"\");\r\n//     setLink(\"\");\r\n//     setFiles([]);\r\n//     setDraftId(null);\r\n//   };\r\n\r\n//   const handleSubmit = async (isDraft = false) => {\r\n//     if (!title || !description || !category) {\r\n//       alert(\"Please fill all required fields!\");\r\n//       return;\r\n//     }\r\n//     if (!userEmail) {\r\n//       alert(\"Error: User email is missing!\");\r\n//       return;\r\n//     }\r\n//     const formData = new FormData();\r\n//     formData.append(\"title\", title);\r\n//     formData.append(\"description\", description);\r\n//     formData.append(\"category\", category);\r\n//     formData.append(\"subCategory\", subCategory);\r\n//     formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\r\n//     formData.append(\"uploaderEmail\", userEmail);\r\n//     formData.append(\"link\", link);\r\n//     files.forEach((file) => formData.append(\"media\", file));\r\n\r\n//     try {\r\n//       let url, method;\r\n//       if (draftId) {\r\n//         url = `http://localhost:3000/draftsview/update/${draftId}`;\r\n//         method = \"PUT\";\r\n//       } else {\r\n//         url = \"http://localhost:3000/posts/create-post\";\r\n//         method = \"POST\";\r\n//       }\r\n//       const response = await fetch(url, { method, body: formData });\r\n//       if (!response.ok) {\r\n//         const errorData = await response.json();\r\n//         throw new Error(errorData.error || \"Unknown error\");\r\n//       }\r\n//       alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\r\n//       if (!isDraft && draftId) {\r\n//         await fetch(`http://localhost:3000/draftsview/${draftId}`, { method: \"DELETE\" });\r\n//       }\r\n//       resetForm();\r\n//     } catch (error) {\r\n//       console.error(\"Error submitting post:\", error);\r\n//       alert(\"Submission failed. Please try again.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h2>{draftId ? \"Edit Draft\" : \"New Post\"}</h2>\r\n//       <form>\r\n//         <div className=\"file-upload\">\r\n//           <label htmlFor=\"fileInput\">\r\n//             {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\r\n//           </label>\r\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\r\n//         </div>\r\n\r\n//         <div className=\"uploaded-files\">\r\n//           {files.map((file, index) => (\r\n//             <div key={index} className=\"file-item\">\r\n//               <span>{file.name}</span>\r\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeFile(index)}>\r\n//                 X\r\n//               </button>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n\r\n//         <input type=\"text\" placeholder=\"Enter title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\r\n//         <textarea placeholder=\"Write a description\" value={description} onChange={(e) => setDescription(e.target.value)} required></textarea>\r\n//         <input type=\"text\" placeholder=\"Enter link (if any)\" value={link} onChange={(e) => setLink(e.target.value)} />\r\n\r\n//         <select value={category} onChange={(e) => { setCategory(e.target.value); setSubCategory(\"\"); }} required>\r\n//           <option value=\"\" disabled>Select a category</option>\r\n//           <option value=\"events\">Events</option>\r\n//           <option value=\"clubs\">Clubs</option>\r\n//           <option value=\"academics\">Academics</option>\r\n//           <option value=\"notices\">Notices</option>\r\n//           <option value=\"skillhub\">Skillhub</option>\r\n//           <option value=\"placements\">Placements</option>\r\n//         </select>\r\n\r\n//         <div className=\"button-container\">\r\n//           <button type=\"button\" onClick={() => handleSubmit(false)}>Submit Post</button>\r\n//           <button type=\"button\" onClick={() => handleSubmit(true)}>Save as Draft</button>\r\n//           <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>Cancel</button>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default NewPost;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useLocation } from \"react-router-dom\";\r\n// import \"./Newpost.css\";\r\n\r\n// const NewPost = ({ userEmail }) => {\r\n//   const [draftId, setDraftId] = useState(null);\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n//   const [category, setCategory] = useState(\"\");\r\n//   const [subCategory, setSubCategory] = useState(\"\");\r\n//   const [link, setLink] = useState(\"\");\r\n//   const [files, setFiles] = useState([]); // For newly uploaded files\r\n//   const [media, setMedia] = useState([]); // For existing media from database\r\n//   const location = useLocation();\r\n\r\n//   useEffect(() => {\r\n//     const queryParams = new URLSearchParams(location.search);\r\n//     const draftIdFromParams = queryParams.get(\"draftId\");\r\n//     if (draftIdFromParams) {\r\n//       setDraftId(draftIdFromParams);\r\n//       fetchDraftData(draftIdFromParams);\r\n//     }\r\n//   }, [location.search]);\r\n\r\n//   const fetchDraftData = async (id) => {\r\n//     try {\r\n//       const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\r\n//       if (!response.ok) throw new Error(\"Failed to fetch draft\");\r\n//       const draft = await response.json();\r\n//       setTitle(draft.title);\r\n//       setDescription(draft.description);\r\n//       setCategory(draft.category);\r\n//       setSubCategory(draft.subCategory || \"\");\r\n//       setLink(draft.link || \"\");\r\n//       setMedia(draft.media || []); // Store existing media from database\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching draft:\", error);\r\n//       alert(\"Could not load draft. Please try again.\");\r\n//     }\r\n//   };\r\n\r\n//   const handleFileChange = (event) => {\r\n//     const selectedFiles = Array.from(event.target.files);\r\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\r\n//   };\r\n\r\n//   const removeFile = (index) => {\r\n//     setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));\r\n//   };\r\n\r\n//   const removeExistingFile = async (fileId) => {\r\n//     try {\r\n//       const response = await fetch(`http://localhost:3000/draftsview/remove-media/${draftId}/${fileId}`, { method: \"DELETE\" });\r\n//       if (!response.ok) throw new Error(\"Failed to remove media\");\r\n//       setMedia(media.filter((file) => file._id !== fileId));\r\n//     } catch (error) {\r\n//       console.error(\"Error removing file:\", error);\r\n//       alert(\"Failed to remove file.\");\r\n//     }\r\n//   };\r\n\r\n//   const resetForm = () => {\r\n//     setTitle(\"\");\r\n//     setDescription(\"\");\r\n//     setCategory(\"\");\r\n//     setSubCategory(\"\");\r\n//     setLink(\"\");\r\n//     setFiles([]);\r\n//     setMedia([]);\r\n//     setDraftId(null);\r\n//   };\r\n\r\n//   const handleSubmit = async (isDraft = false) => {\r\n//     if (!title || !description || !category) {\r\n//         alert(\"Please fill all required fields!\");\r\n//         return;\r\n//     }\r\n//     if (!userEmail) {\r\n//         alert(\"Error: User email is missing!\");\r\n//         return;\r\n//     }\r\n\r\n//     const formData = new FormData();\r\n//     formData.append(\"title\", title);\r\n//     formData.append(\"description\", description);\r\n//     formData.append(\"category\", category);\r\n//     formData.append(\"subCategory\", subCategory);\r\n//     formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\r\n//     formData.append(\"uploaderEmail\", userEmail);\r\n//     formData.append(\"link\", link);\r\n//     files.forEach((file) => formData.append(\"media\", file));\r\n\r\n//     console.log(\"Submitting post...\");\r\n//     console.log(\"Draft ID:\", draftId);\r\n//     console.log(\"FormData entries:\");\r\n//     for (let pair of formData.entries()) {\r\n//         console.log(pair[0], pair[1]);\r\n//     }\r\n\r\n//     try {\r\n//         let url, method;\r\n//         if (draftId) {\r\n//             url = `http://localhost:3000/draftsview/update/${draftId}`;\r\n//             method = \"PUT\";\r\n//         } else {\r\n//             url = \"http://localhost:3000/posts/create-post\";\r\n//             method = \"POST\";\r\n//         }\r\n\r\n//         console.log(`Sending ${method} request to:`, url);\r\n\r\n//         const response = await fetch(url, { method, body: formData });\r\n//         if (!response.ok) {\r\n//             const errorData = await response.json();\r\n//             throw new Error(errorData.error || \"Unknown error\");\r\n//         }\r\n\r\n//         alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\r\n//         console.log(\"Submission successful!\");\r\n\r\n//         if (!isDraft && draftId) {\r\n//             console.log(`Deleting draft ${draftId} after posting.`);\r\n//             await fetch(`http://localhost:3000/draftsview/${draftId}`, { method: \"DELETE\" });\r\n//         }\r\n\r\n//         resetForm();\r\n//     } catch (error) {\r\n//         console.error(\"Error submitting post:\", error);\r\n//         alert(\"Submission failed. Please try again.\");\r\n//     }\r\n// };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h2>{draftId ? \"Edit Draft\" : \"New Post\"}</h2>\r\n//       <form>\r\n//         <div className=\"file-upload\">\r\n//           <label htmlFor=\"fileInput\">\r\n//             {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\r\n//           </label>\r\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\r\n//         </div>\r\n\r\n//         {/* Display existing media (from database) */}\r\n//         <div className=\"uploaded-files\">\r\n//           {media.map((file) => (\r\n//             <div key={file._id} className=\"file-item\">\r\n//               <a href={file.url} target=\"_blank\" rel=\"noopener noreferrer\">{file.url}</a>\r\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeExistingFile(file._id)}>X</button>\r\n//             </div>\r\n//           ))}\r\n\r\n//           {/* Display newly selected files */}\r\n//           {files.map((file, index) => (\r\n//             <div key={index} className=\"file-item\">\r\n//               <span>{file.name}</span>\r\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeFile(index)}>X</button>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n\r\n//         <input type=\"text\" placeholder=\"Enter title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\r\n//         <textarea placeholder=\"Write a description\" value={description} onChange={(e) => setDescription(e.target.value)} required></textarea>\r\n//         <input type=\"text\" placeholder=\"Enter link (if any)\" value={link} onChange={(e) => setLink(e.target.value)} />\r\n\r\n//         <select value={category} onChange={(e) => { setCategory(e.target.value); setSubCategory(\"\"); }} required>\r\n//           <option value=\"\" disabled>Select a category</option>\r\n//           <option value=\"events\">Events</option>\r\n//           <option value=\"clubs\">Clubs</option>\r\n//           <option value=\"academics\">Academics</option>\r\n//           <option value=\"notices\">Notices</option>\r\n//           <option value=\"skillhub\">Skillhub</option>\r\n//           <option value=\"placements\">Placements</option>\r\n//         </select>\r\n\r\n//         <div className=\"button-container\">\r\n//           <button type=\"button\" onClick={() => handleSubmit(false)}>Submit Post</button>\r\n//           <button type=\"button\" onClick={() => handleSubmit(true)}>Save as Draft</button>\r\n//           <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>Cancel</button>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default NewPost;\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useLocation } from \"react-router-dom\";\r\n// import \"./Newpost.css\";\r\n\r\n// const NewPost = ({ userEmail }) => {\r\n//   const [draftId, setDraftId] = useState(null);\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n//   const [category, setCategory] = useState(\"\");\r\n//   const [subCategory, setSubCategory] = useState(\"\");\r\n//   const [link, setLink] = useState(\"\");\r\n//   const [files, setFiles] = useState([]);\r\n//   const [media, setMedia] = useState([]);\r\n//   const location = useLocation();\r\n\r\n//   useEffect(() => {\r\n//     const queryParams = new URLSearchParams(location.search);\r\n//     const draftIdFromParams = queryParams.get(\"draftId\");\r\n//     if (draftIdFromParams) {\r\n//       setDraftId(draftIdFromParams);\r\n//       fetchDraftData(draftIdFromParams);\r\n//     }\r\n//   }, [location.search]);\r\n\r\n//   const fetchDraftData = async (id) => {\r\n//     try {\r\n//       const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\r\n//       if (!response.ok) throw new Error(\"Failed to fetch draft\");\r\n//       const draft = await response.json();\r\n//       setTitle(draft.title);\r\n//       setDescription(draft.description);\r\n//       setCategory(draft.category);\r\n//       setSubCategory(draft.subCategory || \"\");\r\n//       setLink(draft.link || \"\");\r\n//       setMedia(draft.media || []);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching draft:\", error);\r\n//       alert(\"Could not load draft. Please try again.\");\r\n//     }\r\n//   };\r\n\r\n//   const handleFileChange = (event) => {\r\n//     const selectedFiles = Array.from(event.target.files);\r\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\r\n//   };\r\n\r\n//   const removeFile = (index) => {\r\n//     setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));\r\n//   };\r\n\r\n//   const removeExistingFile = async (fileId) => {\r\n//     try {\r\n//       const response = await fetch(`http://localhost:3000/draftsview/remove-media/${draftId}/${fileId}`, { method: \"DELETE\" });\r\n//       if (!response.ok) throw new Error(\"Failed to remove media\");\r\n//       setMedia(media.filter((file) => file._id !== fileId));\r\n//     } catch (error) {\r\n//       console.error(\"Error removing file:\", error);\r\n//       alert(\"Failed to remove file.\");\r\n//     }\r\n//   };\r\n\r\n//   const resetForm = () => {\r\n//     setTitle(\"\");\r\n//     setDescription(\"\");\r\n//     setCategory(\"\");\r\n//     setSubCategory(\"\");\r\n//     setLink(\"\");\r\n//     setFiles([]);\r\n//     setMedia([]);\r\n//     setDraftId(null);\r\n//   };\r\n\r\n//   const handleSubmit = async (isDraft = false) => {\r\n//     if (!title || !description || !category) {\r\n//       alert(\"Please fill all required fields!\");\r\n//       return;\r\n//     }\r\n//     if (!userEmail) {\r\n//       alert(\"Error: User email is missing!\");\r\n//       return;\r\n//     }\r\n\r\n//     const formData = new FormData();\r\n//     formData.append(\"title\", title);\r\n//     formData.append(\"description\", description);\r\n//     formData.append(\"category\", category);\r\n//     formData.append(\"subCategory\", subCategory);\r\n//     formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\r\n//     formData.append(\"uploaderEmail\", userEmail);\r\n//     formData.append(\"link\", link);\r\n//     files.forEach((file) => formData.append(\"media\", file));\r\n\r\n//     try {\r\n//       let url, method;\r\n//       if (draftId) {\r\n//         url = `http://localhost:3000/draftsview/update/${draftId}`;\r\n//         method = \"PUT\";\r\n//       } else {\r\n//         url = \"http://localhost:3000/posts/create-post\";\r\n//         method = \"POST\";\r\n//       }\r\n\r\n//       const response = await fetch(url, { method, body: formData });\r\n//       if (!response.ok) {\r\n//         const errorData = await response.json();\r\n//         throw new Error(errorData.error || \"Unknown error\");\r\n//       }\r\n\r\n//       alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\r\n\r\n//       if (!isDraft && draftId) {\r\n//         await fetch(`http://localhost:3000/draftsview/${draftId}`, { method: \"DELETE\" });\r\n//       }\r\n\r\n//       resetForm();\r\n//     } catch (error) {\r\n//       console.error(\"Error submitting post:\", error);\r\n//       alert(\"Submission failed. Please try again.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h2>{draftId ? \"Edit Draft\" : \"New Post\"}</h2>\r\n//       <form>\r\n//         <div className=\"file-upload\">\r\n//           <label htmlFor=\"fileInput\">\r\n//             {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\r\n//           </label>\r\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\r\n//         </div>\r\n\r\n//         <div className=\"uploaded-files\">\r\n//           {media.map((file) => (\r\n//             <div key={file._id} className=\"file-item\">\r\n//               <a href={file.url} target=\"_blank\" rel=\"noopener noreferrer\">{file.url}</a>\r\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeExistingFile(file._id)}>X</button>\r\n//             </div>\r\n//           ))}\r\n\r\n//           {files.map((file, index) => (\r\n//             <div key={index} className=\"file-item\">\r\n//               <span>{file.name}</span>\r\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeFile(index)}>X</button>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n\r\n//         <input type=\"text\" placeholder=\"Enter title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\r\n//         <textarea placeholder=\"Write a description\" value={description} onChange={(e) => setDescription(e.target.value)} required></textarea>\r\n//         <input type=\"text\" placeholder=\"Enter link (if any)\" value={link} onChange={(e) => setLink(e.target.value)} />\r\n\r\n//         <select value={category} onChange={(e) => setCategory(e.target.value)} required>\r\n//           <option value=\"\" disabled>Select a category</option>\r\n//           <option value=\"events\">Events</option>\r\n//           <option value=\"clubs\">Clubs</option>\r\n//           <option value=\"academics\">Academics</option>\r\n//           <option value=\"notices\">Notices</option>\r\n//           <option value=\"skillhub\">Skillhub</option>\r\n//           <option value=\"placements\">Placements</option>\r\n//         </select>\r\n\r\n//         <div className=\"button-container\">\r\n//           <button type=\"button\" onClick={() => handleSubmit(false)}>Submit Post</button>\r\n//           <button type=\"button\" onClick={() => handleSubmit(true)}>Save as Draft</button>\r\n//           <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>Cancel</button>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default NewPost;\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useLocation } from \"react-router-dom\";\r\n// import \"./Newpost.css\";\r\n\r\n// const subCategoriesMap = {\r\n//   Club: [\"RMF\", \"Splash Out\", \"VPOD\", \"Rhythmic Thunders\", \"sports\"],\r\n//   Academics: [\"First year\", \"Second year\", \"Third year\", \"Fourth year\"],\r\n//   Skillhub: [\"Hackathons\", \"Coding-Contests\", \"Training Programmes\"],\r\n// };\r\n\r\n// const NewPost = ({ userEmail }) => {\r\n//   const [draftId, setDraftId] = useState(null);\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n//   const [category, setCategory] = useState(\"\");\r\n//   const [subCategory, setSubCategory] = useState(\"\");\r\n//   const [link, setLink] = useState(\"\");\r\n//   const [files, setFiles] = useState([]);\r\n//   const [media, setMedia] = useState([]);\r\n\r\n//   // Optional event fields\r\n//   const [eventName, setEventName] = useState(\"\");\r\n//   const [eventDate, setEventDate] = useState(\"\");\r\n//   const [eventTime, setEventTime] = useState(\"\");\r\n//   const [location, setLocation] = useState(\"\");\r\n\r\n//   const locationHook = useLocation();\r\n\r\n//   useEffect(() => {\r\n//     const queryParams = new URLSearchParams(locationHook.search);\r\n//     const draftIdFromParams = queryParams.get(\"draftId\");\r\n\r\n//     if (draftIdFromParams) {\r\n//       setDraftId(draftIdFromParams);\r\n//       fetchDraftData(draftIdFromParams);\r\n//     }\r\n//   }, [locationHook.search]);\r\n\r\n//   const fetchDraftData = async (id) => {\r\n//     try {\r\n//       const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\r\n//       if (!response.ok) throw new Error(\"Failed to fetch draft\");\r\n//       const draft = await response.json();\r\n\r\n//       setTitle(draft.title);\r\n//       setDescription(draft.description);\r\n//       setCategory(draft.category);\r\n//       setSubCategory(draft.subCategory || \"\");\r\n//       setLink(draft.link || \"\");\r\n//       setMedia(draft.media || []);\r\n//       setEventName(draft.eventName || \"\");\r\n//       setEventDate(draft.eventDate || \"\");\r\n//       setEventTime(draft.eventTime || \"\");\r\n//       setLocation(draft.location || \"\");\r\n//     } catch (error) {\r\n//       alert(\"Could not load draft. Please try again.\");\r\n//     }\r\n//   };\r\n\r\n//   const handleFileChange = (event) => {\r\n//     const selectedFiles = Array.from(event.target.files);\r\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\r\n//   };\r\n\r\n//   const removeFile = (index) => {\r\n//     setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));\r\n//   };\r\n\r\n//   const removeExistingFile = async (fileId) => {\r\n//     try {\r\n//       const response = await fetch(`http://localhost:3000/draftsview/remove-media/${draftId}/${fileId}`, {\r\n//         method: \"DELETE\",\r\n//       });\r\n//       if (!response.ok) throw new Error(\"Failed to remove media\");\r\n//       setMedia(media.filter((file) => file._id !== fileId));\r\n//     } catch (error) {\r\n//       alert(\"Failed to remove file.\");\r\n//     }\r\n//   };\r\n\r\n//   const resetForm = () => {\r\n//     setTitle(\"\");\r\n//     setDescription(\"\");\r\n//     setCategory(\"\");\r\n//     setSubCategory(\"\");\r\n//     setLink(\"\");\r\n//     setFiles([]);\r\n//     setMedia([]);\r\n//     setEventName(\"\");\r\n//     setEventDate(\"\");\r\n//     setEventTime(\"\");\r\n//     setLocation(\"\");\r\n//     setDraftId(null);\r\n//   };\r\n\r\n//   const handleSubmit = async (isDraft = false) => {\r\n//     if (!title || !description || !category) {\r\n//       alert(\"Please fill all required fields!\");\r\n//       return;\r\n//     }\r\n//     if (!userEmail) {\r\n//       alert(\"Error: User email is missing!\");\r\n//       return;\r\n//     }\r\n\r\n//     const formData = new FormData();\r\n//     formData.append(\"title\", title);\r\n//     formData.append(\"description\", description);\r\n//     formData.append(\"category\", category);\r\n//     formData.append(\"subCategory\", subCategory);\r\n//     formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\r\n//     formData.append(\"uploaderEmail\", userEmail);\r\n//     formData.append(\"link\", link);\r\n//     files.forEach((file) => formData.append(\"media\", file));\r\n\r\n//     // Only append optional fields if they have values\r\n//     if (eventName) formData.append(\"eventName\", eventName);\r\n//     if (eventDate) formData.append(\"eventDate\", eventDate);\r\n//     if (eventTime) formData.append(\"eventTime\", eventTime);\r\n//     if (location) formData.append(\"location\", location);\r\n\r\n//     try {\r\n//       let url, method;\r\n//       if (draftId) {\r\n//         url = `http://localhost:3000/draftsview/update/${draftId}`;\r\n//         method = \"PUT\";\r\n//       } else {\r\n//         url = \"http://localhost:3000/posts/create-post\";\r\n//         method = \"POST\";\r\n//       }\r\n\r\n//       const response = await fetch(url, { method, body: formData });\r\n//       if (!response.ok) {\r\n//         const errorData = await response.json();\r\n//         throw new Error(errorData.error || \"Unknown error\");\r\n//       }\r\n\r\n//       alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\r\n//       resetForm();\r\n//     } catch (error) {\r\n//       alert(\"Submission failed. Please try again.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h2>{draftId ? \"Edit Draft\" : \"New Post\"}</h2>\r\n//       <form>\r\n//         <div className=\"file-upload\">\r\n//           <label htmlFor=\"fileInput\">\r\n//             {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\r\n//           </label>\r\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\r\n//         </div>\r\n\r\n//         <div className=\"uploaded-files\">\r\n//           {media.map((file) => (\r\n//             <div key={file._id} className=\"file-item\">\r\n//               <a href={file.url} target=\"_blank\" rel=\"noopener noreferrer\">{file.url}</a>\r\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeExistingFile(file._id)}>X</button>\r\n//             </div>\r\n//           ))}\r\n\r\n//           {files.map((file, index) => (\r\n//             <div key={index} className=\"file-item\">\r\n//               <span>{file.name}</span>\r\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeFile(index)}>X</button>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n\r\n//         {/* Required Fields First */}\r\n//         <input type=\"text\" placeholder=\"Enter title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\r\n//         <textarea placeholder=\"Write a description\" value={description} onChange={(e) => setDescription(e.target.value)} required></textarea>\r\n\r\n//         {/* Optional Event Fields */}\r\n//         <input type=\"text\" placeholder=\"Enter Event Name (optional)\" value={eventName} onChange={(e) => setEventName(e.target.value)} />\r\n//         <input type=\"date\" value={eventDate} onChange={(e) => setEventDate(e.target.value)} />\r\n//         <input type=\"time\" value={eventTime} onChange={(e) => setEventTime(e.target.value)} />\r\n//         <input type=\"text\" placeholder=\"Enter Location (optional)\" value={location} onChange={(e) => setLocation(e.target.value)} />\r\n\r\n//         <input type=\"text\" placeholder=\"Enter link (if any)\" value={link} onChange={(e) => setLink(e.target.value)} />\r\n\r\n//         <select value={category} onChange={(e) => setCategory(e.target.value)} required>\r\n//           <option value=\"\" disabled>Select a category</option>\r\n//           <option value=\"Events\">Events</option>\r\n//           <option value=\"Club\">Club</option>\r\n//           <option value=\"Academics\">Academics</option>\r\n//           <option value=\"Notices\">Notices</option>\r\n//           <option value=\"Skillhub\">Skillhub</option>\r\n//           <option value=\"Placements\">Placements</option>\r\n//         </select>\r\n\r\n//         <select\r\n//           value={subCategory}\r\n//           onChange={(e) => setSubCategory(e.target.value)}\r\n//           disabled={!subCategoriesMap[category]?.length}\r\n//         >\r\n//           <option value=\"\" disabled>Select a subcategory</option>\r\n//           {subCategoriesMap[category]?.map((sub, index) => (\r\n//             <option key={index} value={sub}>{sub}</option>\r\n//           ))}\r\n//         </select>\r\n\r\n//         <div className=\"button-container\">\r\n//           <button type=\"button\" onClick={() => handleSubmit(false)}>Submit Post</button>\r\n//           <button type=\"button\" onClick={() => handleSubmit(true)}>Save as Draft</button>\r\n//           <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>Cancel</button>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default NewPost;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useLocation } from \"react-router-dom\";\r\n// import \"./Newpost.css\";\r\n\r\n// const subCategoriesMap = {\r\n//   Club: [\"RMF\", \"Splash Out\", \"VPOD\", \"Rhythmic Thunders\", \"sports\"],\r\n//   Academics: [\"First year\", \"Second year\", \"Third year\", \"Fourth year\"],\r\n//   Skillhub: [\"Hackathons\", \"Coding-Contests\", \"Training Programmes\"],\r\n// };\r\n\r\n// const NewPost = ({ userEmail }) => {\r\n//   const [draftId, setDraftId] = useState(null);\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n//   const [category, setCategory] = useState(\"\");\r\n//   const [subCategory, setSubCategory] = useState(\"\");\r\n//   const [link, setLink] = useState(\"\");\r\n//   const [files, setFiles] = useState([]);\r\n//   const [media, setMedia] = useState([]);\r\n\r\n//   const [eventName, setEventName] = useState(\"\");\r\n//   const [eventDate, setEventDate] = useState(\"\");\r\n//   const [eventTime, setEventTime] = useState(\"\");\r\n//   const [location, setLocation] = useState(\"\");\r\n\r\n//   const locationHook = useLocation();\r\n\r\n//   useEffect(() => {\r\n//     const queryParams = new URLSearchParams(locationHook.search);\r\n//     const draftIdFromParams = queryParams.get(\"draftId\");\r\n\r\n//     if (draftIdFromParams) {\r\n//       setDraftId(draftIdFromParams);\r\n//       fetchDraftData(draftIdFromParams);\r\n//     }\r\n//   }, [locationHook.search]);\r\n\r\n//   const fetchDraftData = async (id) => {\r\n//     try {\r\n//       const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\r\n//       if (!response.ok) throw new Error(\"Failed to fetch draft\");\r\n//       const draft = await response.json();\r\n\r\n//       setTitle(draft.title);\r\n//       setDescription(draft.description);\r\n//       setCategory(draft.category);\r\n//       setSubCategory(draft.subCategory || \"\");\r\n//       setLink(draft.link || \"\");\r\n//       setMedia(draft.media || []);\r\n//       setEventName(draft.eventName || \"\");\r\n//       setEventDate(draft.eventDate || \"\");\r\n//       setEventTime(draft.eventTime || \"\");\r\n//       setLocation(draft.location || \"\");\r\n//     } catch (error) {\r\n//       alert(\"Could not load draft. Please try again.\");\r\n//     }\r\n//   };\r\n\r\n//   const handleFileChange = (event) => {\r\n//     const selectedFiles = Array.from(event.target.files);\r\n//     setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\r\n//   };\r\n\r\n//   const removeFile = (index) => {\r\n//     setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));\r\n//   };\r\n\r\n//   const removeExistingFile = async (fileId) => {\r\n//     try {\r\n//       const response = await fetch(`http://localhost:3000/draftsview/remove-media/${draftId}/${fileId}`, {\r\n//         method: \"DELETE\",\r\n//       });\r\n//       if (!response.ok) throw new Error(\"Failed to remove media\");\r\n//       setMedia(media.filter((file) => file._id !== fileId));\r\n//     } catch (error) {\r\n//       alert(\"Failed to remove file.\");\r\n//     }\r\n//   };\r\n\r\n//   const resetForm = () => {\r\n//     setTitle(\"\");\r\n//     setDescription(\"\");\r\n//     setCategory(\"\");\r\n//     setSubCategory(\"\");\r\n//     setLink(\"\");\r\n//     setFiles([]);\r\n//     setMedia([]);\r\n//     setEventName(\"\");\r\n//     setEventDate(\"\");\r\n//     setEventTime(\"\");\r\n//     setLocation(\"\");\r\n//     setDraftId(null);\r\n//   };\r\n\r\n//   const handleSubmit = async (isDraft = false) => {\r\n//     if (!title || !description || !category) {\r\n//       alert(\"Please fill all required fields!\");\r\n//       return;\r\n//     }\r\n//     if (!userEmail) {\r\n//       alert(\"Error: User email is missing!\");\r\n//       return;\r\n//     }\r\n\r\n//     const formData = new FormData();\r\n//     formData.append(\"title\", title);\r\n//     formData.append(\"description\", description);\r\n//     formData.append(\"category\", category);\r\n//     formData.append(\"subCategory\", subCategory);\r\n//     formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\r\n//     formData.append(\"uploaderEmail\", userEmail);\r\n//     formData.append(\"link\", link);\r\n//     files.forEach((file) => formData.append(\"media\", file));\r\n\r\n//     if (eventName) formData.append(\"eventName\", eventName);\r\n//     if (eventDate) formData.append(\"eventDate\", eventDate);\r\n//     if (eventTime) formData.append(\"eventTime\", eventTime);\r\n//     if (location) formData.append(\"location\", location);\r\n\r\n//     try {\r\n//       let url, method;\r\n//       if (draftId) {\r\n//         url = `http://localhost:3000/draftsview/update/${draftId}`;\r\n//         method = \"PUT\";\r\n//       } else {\r\n//         url = \"http://localhost:3000/posts/create-post\";\r\n//         method = \"POST\";\r\n//       }\r\n\r\n//       const response = await fetch(url, { method, body: formData });\r\n//       if (!response.ok) {\r\n//         const errorData = await response.json();\r\n//         throw new Error(errorData.error || \"Unknown error\");\r\n//       }\r\n\r\n//       alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\r\n//       resetForm();\r\n//     } catch (error) {\r\n//       alert(\"Submission failed. Please try again.\");\r\n//     }\r\n//   };\r\n\r\n//   const getTodayDate = () => {\r\n//     const today = new Date();\r\n//     const yyyy = today.getFullYear();\r\n//     const mm = String(today.getMonth() + 1).padStart(2, \"0\");\r\n//     const dd = String(today.getDate()).padStart(2, \"0\");\r\n//     return `${yyyy}-${mm}-${dd}`;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h2>{draftId ? \"Edit Draft\" : \"New Post\"}</h2>\r\n//       <form>\r\n//         <div className=\"file-upload\">\r\n//           <label htmlFor=\"fileInput\">\r\n//             {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\r\n//           </label>\r\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\r\n//         </div>\r\n\r\n//         <div className=\"uploaded-files\">\r\n//           {media.map((file) => (\r\n//             <div key={file._id} className=\"file-item\">\r\n//               <a href={file.url} target=\"_blank\" rel=\"noopener noreferrer\">{file.url}</a>\r\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeExistingFile(file._id)}>X</button>\r\n//             </div>\r\n//           ))}\r\n//           {files.map((file, index) => (\r\n//             <div key={index} className=\"file-item\">\r\n//               <span>{file.name}</span>\r\n//               <button type=\"button\" className=\"remove-file\" onClick={() => removeFile(index)}>X</button>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n\r\n//         <input type=\"text\" placeholder=\"Enter title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\r\n//         <textarea placeholder=\"Write a description\" value={description} onChange={(e) => setDescription(e.target.value)} required></textarea>\r\n\r\n//         {/* Optional Event Fields */}\r\n//         <input type=\"text\" placeholder=\"Enter Event Name (optional)\" value={eventName} onChange={(e) => setEventName(e.target.value)} />\r\n//         <input type=\"date\" min={getTodayDate()} value={eventDate} onChange={(e) => setEventDate(e.target.value)} />\r\n//         <input type=\"time\" value={eventTime} onChange={(e) => setEventTime(e.target.value)} />\r\n//         <input type=\"text\" placeholder=\"Enter Location (optional)\" value={location} onChange={(e) => setLocation(e.target.value)} />\r\n\r\n//         <input type=\"text\" placeholder=\"Enter link (if any)\" value={link} onChange={(e) => setLink(e.target.value)} />\r\n\r\n//         <select value={category} onChange={(e) => setCategory(e.target.value)} required>\r\n//           <option value=\"\" disabled>Select a category</option>\r\n//           <option value=\"Events\">Events</option>\r\n//           <option value=\"Club\">Club</option>\r\n//           <option value=\"Academics\">Academics</option>\r\n//           <option value=\"Notices\">Notices</option>\r\n//           <option value=\"Skillhub\">Skillhub</option>\r\n//           <option value=\"Placements\">Placements</option>\r\n//         </select>\r\n\r\n//         <select\r\n//           value={subCategory}\r\n//           onChange={(e) => setSubCategory(e.target.value)}\r\n//           disabled={!subCategoriesMap[category]?.length}\r\n//         >\r\n//           <option value=\"\" disabled>Select a subcategory</option>\r\n//           {subCategoriesMap[category]?.map((sub, index) => (\r\n//             <option key={index} value={sub}>{sub}</option>\r\n//           ))}\r\n//         </select>\r\n\r\n//         <div className=\"button-container\">\r\n//           <button type=\"button\" onClick={() => handleSubmit(false)}>Submit Post</button>\r\n//           <button type=\"button\" onClick={() => handleSubmit(true)}>Save as Draft</button>\r\n//           <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>Cancel</button>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default NewPost;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// NewPost.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport \"./Newpost.css\";\r\n\r\nconst subCategoriesMap = {\r\n  Club: [\"RMF\", \"Splash Out\", \"VPOD\", \"Rhythmic Thunders\", \"sports\"],\r\n  Academics: [\"First year\", \"Second year\", \"Third year\", \"Fourth year\"],\r\n  Skillhub: [\"Hackathons\", \"Coding-Contests\", \"Training Programmes\"],\r\n};\r\n\r\nconst NewPost = ({ userEmail }) => {\r\n  const [draftId, setDraftId] = useState(null);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const [subCategory, setSubCategory] = useState(\"\");\r\n  const [link, setLink] = useState(\"\");\r\n  const [files, setFiles] = useState([]);\r\n  const [media, setMedia] = useState([]);\r\n\r\n  const [eventName, setEventName] = useState(\"\");\r\n  const [eventDate, setEventDate] = useState(\"\");\r\n  const [eventTime, setEventTime] = useState(\"\");\r\n  const [location, setLocation] = useState(\"\");\r\n\r\n  const locationHook = useLocation();\r\n\r\n  useEffect(() => {\r\n    const queryParams = new URLSearchParams(locationHook.search);\r\n    const draftIdFromParams = queryParams.get(\"draftId\");\r\n\r\n    if (draftIdFromParams) {\r\n      setDraftId(draftIdFromParams);\r\n      fetchDraftData(draftIdFromParams);\r\n    }\r\n  }, [locationHook.search]);\r\n\r\n  const fetchDraftData = async (id) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/draftsview/edit/${id}`);\r\n      if (!response.ok) throw new Error(\"Failed to fetch draft\");\r\n      const draft = await response.json();\r\n\r\n      setTitle(draft.title);\r\n      setDescription(draft.description);\r\n      setCategory(draft.category);\r\n      setSubCategory(draft.subCategory || \"\");\r\n      setLink(draft.link || \"\");\r\n      setMedia(draft.media || []);\r\n      setEventName(draft.eventName || \"\");\r\n      setEventDate(draft.eventDate || \"\");\r\n      setEventTime(draft.eventTime || \"\");\r\n      setLocation(draft.location || \"\");\r\n    } catch (error) {\r\n      alert(\"Could not load draft. Please try again.\");\r\n    }\r\n  };\r\n\r\n  const handleFileChange = (event) => {\r\n    const selectedFiles = Array.from(event.target.files);\r\n    setFiles((prevFiles) => [...prevFiles, ...selectedFiles]);\r\n  };\r\n\r\n  const removeFile = (index) => {\r\n    setFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));\r\n  };\r\n\r\n  const removeExistingFile = async (fileId) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/draftsview/remove-media/${draftId}/${fileId}`, {\r\n        method: \"DELETE\",\r\n      });\r\n      if (!response.ok) throw new Error(\"Failed to remove media\");\r\n      setMedia(media.filter((file) => file._id !== fileId));\r\n    } catch (error) {\r\n      alert(\"Failed to remove file.\");\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setTitle(\"\");\r\n    setDescription(\"\");\r\n    setCategory(\"\");\r\n    setSubCategory(\"\");\r\n    setLink(\"\");\r\n    setFiles([]);\r\n    setMedia([]);\r\n    setEventName(\"\");\r\n    setEventDate(\"\");\r\n    setEventTime(\"\");\r\n    setLocation(\"\");\r\n    setDraftId(null);\r\n  };\r\n\r\n  const handleSubmit = async (isDraft = false) => {\r\n    if (!title || !description || !category) {\r\n      alert(\"Please fill all required fields!\");\r\n      return;\r\n    }\r\n    if (!userEmail) {\r\n      alert(\"Error: User email is missing!\");\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"title\", title);\r\n    formData.append(\"description\", description);\r\n    formData.append(\"category\", category);\r\n    formData.append(\"subCategory\", subCategory);\r\n    formData.append(\"status\", isDraft ? \"draft\" : \"posted\");\r\n    formData.append(\"uploaderEmail\", userEmail);\r\n    formData.append(\"link\", link);\r\n    if (draftId) formData.append(\"draftId\", draftId);\r\n    files.forEach((file) => formData.append(\"media\", file));\r\n\r\n    formData.append(\"eventName\", eventName);\r\n    formData.append(\"eventDate\", eventDate);\r\n    formData.append(\"eventTime\", eventTime);\r\n    formData.append(\"location\", location);\r\n\r\n    try {\r\n      const url = `http://localhost:3000/posts/create-post`;\r\n      const response = await fetch(url, {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || \"Unknown error\");\r\n      }\r\n\r\n      alert(isDraft ? \"Draft saved successfully!\" : \"Post submitted successfully!\");\r\n      resetForm();\r\n    } catch (error) {\r\n      alert(\"Submission failed: \" + error.message);\r\n    }\r\n  };\r\n\r\n  const getTodayDate = () => {\r\n    const today = new Date();\r\n    const yyyy = today.getFullYear();\r\n    const mm = String(today.getMonth() + 1).padStart(2, \"0\");\r\n    const dd = String(today.getDate()).padStart(2, \"0\");\r\n    return `${yyyy}-${mm}-${dd}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>{draftId ? \"Edit Draft\" : \"New Post\"}</h2>\r\n      <form>\r\n        <div className=\"file-upload\">\r\n          <label htmlFor=\"fileInput\">\r\n            {files.length > 0 ? \"Add more files\" : \"Click to browse or drop files here\"}\r\n          </label>\r\n          <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple style={{ display: \"none\" }} />\r\n        </div>\r\n\r\n        <div className=\"uploaded-files\">\r\n          {media.map((file) => (\r\n            <div key={file._id} className=\"file-item\">\r\n              <a href={file.url} target=\"_blank\" rel=\"noopener noreferrer\">{file.url}</a>\r\n              <button type=\"button\" className=\"remove-file\" onClick={() => removeExistingFile(file._id)}>X</button>\r\n            </div>\r\n          ))}\r\n          {files.map((file, index) => (\r\n            <div key={index} className=\"file-item\">\r\n              <span>{file.name}</span>\r\n              <button type=\"button\" className=\"remove-file\" onClick={() => removeFile(index)}>X</button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <input type=\"text\" placeholder=\"Enter title\" value={title} onChange={(e) => setTitle(e.target.value)} required />\r\n        <textarea placeholder=\"Write a description\" value={description} onChange={(e) => setDescription(e.target.value)} required></textarea>\r\n\r\n        <input type=\"text\" placeholder=\"Event Name (optional)\" value={eventName} onChange={(e) => setEventName(e.target.value)} />\r\n        <input type=\"date\" min={getTodayDate()} value={eventDate} onChange={(e) => setEventDate(e.target.value)} />\r\n        <input type=\"time\" value={eventTime} onChange={(e) => setEventTime(e.target.value)} />\r\n        <input type=\"text\" placeholder=\"Event Location (optional)\" value={location} onChange={(e) => setLocation(e.target.value)} />\r\n\r\n        <input type=\"text\" placeholder=\"Link (if any)\" value={link} onChange={(e) => setLink(e.target.value)} />\r\n\r\n        <select value={category} onChange={(e) => setCategory(e.target.value)} required>\r\n          <option value=\"\" disabled>Select category</option>\r\n          <option value=\"Events\">Events</option>\r\n          <option value=\"Club\">Club</option>\r\n          <option value=\"Academics\">Academics</option>\r\n          <option value=\"Notices\">Notices</option>\r\n          <option value=\"Skillhub\">Skillhub</option>\r\n          <option value=\"Placements\">Placements</option>\r\n        </select>\r\n\r\n        <select\r\n          value={subCategory}\r\n          onChange={(e) => setSubCategory(e.target.value)}\r\n          disabled={!subCategoriesMap[category]?.length}\r\n        >\r\n          <option value=\"\" disabled>Select subcategory</option>\r\n          {subCategoriesMap[category]?.map((sub, index) => (\r\n            <option key={index} value={sub}>{sub}</option>\r\n          ))}\r\n        </select>\r\n\r\n        <div className=\"button-container\">\r\n          <button type=\"button\" onClick={() => handleSubmit(false)}>Submit Post</button>\r\n          <button type=\"button\" onClick={() => handleSubmit(true)}>Save as Draft</button>\r\n          <button type=\"button\" className=\"cancel-button\" onClick={resetForm}>Cancel</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPost;\r\n"],"mappings":";;AAAA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAegaA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}