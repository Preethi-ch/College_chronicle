{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chpre\\\\OneDrive\\\\Desktop\\\\college\\\\PROJECTS\\\\miniproject\\\\college_activity\\\\src\\\\newpost.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import './NewPost.css';  // Ensure you add appropriate styles for the layout\n\n// const categories = [\n//   { name: \"Club\", subcategories: [\"RMF\", \"Splash Out\", \"Rhythmic Thunders\", \"VPOD\", \"Happy Club\"] },\n//   { name: \"Academics\", subcategories: [\"First year\", \"Second year\", \"Third year\", \"Fourth year\"] },\n//   { name: \"Notices\", subcategories: [] },\n//   { name: \"Skill Hub\", subcategories: [\"Hackathons\",\"Coding contests\",\"Training Programs\"] },\n//   { name: \"Events\", subcategories: [] },\n//   { name: \"Placements\", subcategories: [] },\n// ];\n\n// const NewPost = () => {\n//   const [fileNames, setFileNames] = useState([]);\n//   const [title, setTitle] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [subCategory, setSubCategory] = useState(\"\");\n//   const [uploaderEmail, setUploaderEmail] = useState(\"\");\n//   const [files, setFiles] = useState([]);  // Track uploaded files\n\n//   const handleFileChange = (event) => {\n//     const selectedFiles = Array.from(event.target.files);\n//     if (selectedFiles) {\n//       setFileNames([...fileNames, ...selectedFiles.map((file) => file.name)]);\n//       setFiles([...files, ...selectedFiles]);\n//     }\n//   };\n\n//   const handleCategoryChange = (e) => {\n//     const selectedCategory = e.target.value;\n//     setCategory(selectedCategory);\n\n//     // Reset the subCategory field when category changes\n//     const selectedCategoryObject = categories.find((cat) => cat.name === selectedCategory);\n//     if (!selectedCategoryObject?.subcategories.length) {\n//       setSubCategory(\"\");\n//     }\n//   };\n\n//   const handleRemoveFile = (index) => {\n//     const newFileNames = [...fileNames];\n//     const newFiles = [...files];\n//     newFileNames.splice(index, 1);\n//     newFiles.splice(index, 1);\n//     setFileNames(newFileNames);\n//     setFiles(newFiles);\n//   };\n\n//   const handlePost = async () => {\n//     if (!title.trim() || !description.trim() || !category.trim()) {\n//       alert(\"Please fill out all required fields: title, description, and category.\");\n//       return;\n//     }\n\n//     if (files.length === 0) {\n//       alert(\"Please upload at least one file.\");\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append(\"title\", title.trim());\n//     formData.append(\"description\", description.trim());\n//     formData.append(\"category\", category);\n//     formData.append(\"subCategory\", subCategory || \"\"); // Handle cases where subCategory might be empty\n//     formData.append(\"uploaderEmail\", uploaderEmail.trim());\n\n//     // Append all selected files to the FormData\n//     files.forEach((file) => {\n//       formData.append(\"media\", file);\n//     });\n\n//     try {\n//       const response = await axios.post(\"http://localhost:3000/upload\", formData, {\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//         },\n//       });\n\n//       if (response.status === 201) {\n//         alert(\"Post submitted successfully!\");\n//         // Optionally reset the form after a successful submission\n//         setTitle(\"\");\n//         setDescription(\"\");\n//         setCategory(\"\");\n//         setSubCategory(\"\");\n//         setUploaderEmail(\"\");\n//         setFiles([]);\n//         setFileNames([]);\n//       } else {\n//         alert(\"Failed to submit post. Please try again.\");\n//       }\n//     } catch (err) {\n//       console.error(\"Error during post submission:\", err.response || err.message);\n//       alert(\n//         err.response?.data?.message || \"An unexpected error occurred. Please try again.\"\n//       );\n//     }\n//   };\n\n//   const handleSaveToDrafts = async () => {\n//     const draftData = {\n//       title,\n//       description,\n//       category,\n//       subCategory,\n//       uploaderEmail,\n//       files: fileNames,\n//     };\n\n//     // Simulate saving draft (you could save this to a backend or local storage)\n//     console.log(\"Saving to drafts:\", draftData);\n//     alert(\"Draft saved successfully!\");\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h2>New Post</h2>\n//       <form>\n//         <div className=\"file-upload\">\n//           <label htmlFor=\"fileInput\">\n//             {fileNames.length > 0 ? fileNames.join(\", \") : \"Click to browse or drop files here\"}\n//           </label>\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple />\n//         </div>\n\n//         <div className=\"uploaded-files\">\n//           {fileNames.length > 0 && (\n//             <ul>\n//               {fileNames.map((fileName, index) => (\n//                 <li key={index} className=\"file-item\">\n//                   {fileName}\n//                   <span className=\"remove-icon\" onClick={() => handleRemoveFile(index)}>Ã—</span>\n//                 </li>\n//               ))}\n//             </ul>\n//           )}\n//         </div>\n\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter title for the file\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           required\n//         />\n\n//         <textarea\n//           placeholder=\"Write a description\"\n//           value={description}\n//           onChange={(e) => setDescription(e.target.value)}\n//           required\n//         ></textarea>\n\n//         <input\n//           type=\"email\"\n//           placeholder=\"Enter your email\"\n//           value={uploaderEmail}\n//           onChange={(e) => setUploaderEmail(e.target.value)}\n//           required\n//         />\n\n//         <select value={category} onChange={handleCategoryChange} required>\n//           <option value=\"\" disabled>Select a category</option>\n//           {categories.map((cat) => (\n//             <option key={cat.name} value={cat.name}>\n//               {cat.name}\n//             </option>\n//           ))}\n//         </select>\n\n//         <select\n//           value={subCategory}\n//           onChange={(e) => setSubCategory(e.target.value)}\n//           disabled={!categories.find((cat) => cat.name === category)?.subcategories.length}\n//           required\n//         >\n//           <option value=\"\" disabled>Select a subcategory</option>\n//           {categories\n//             .find((cat) => cat.name === category)\n//             ?.subcategories.map((subcat) => (\n//               <option key={subcat} value={subcat}>\n//                 {subcat}\n//               </option>\n//             ))}\n//         </select>\n\n//         <div className=\"button-container\">\n//           <button type=\"button\" onClick={handlePost} className=\"post-btn\">Post</button>\n//           <button type=\"button\" onClick={handleSaveToDrafts} className=\"draft-btn\">Save to Drafts</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default NewPost;\n\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import './NewPost.css';  // Ensure you add appropriate styles for the layout\n\n// const categories = [\n//   { name: \"Club\", subcategories: [\"RMF\", \"Splash Out\", \"Rhythmic Thunders\", \"VPOD\", \"Happy Club\"] },\n//   { name: \"Academics\", subcategories: [\"First year\", \"Second year\", \"Third year\", \"Fourth year\"] },\n//   { name: \"Notices\", subcategories: [] },\n//   { name: \"Skill Hub\", subcategories: [\"Hackathons\",\"Coding contests\",\"Training Programs\"] },\n//   { name: \"Events\", subcategories: [] },\n//   { name: \"Placements\", subcategories: [] },\n// ];\n\n// const NewPost = () => {\n//   const [fileNames, setFileNames] = useState([]);\n//   const [title, setTitle] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [subCategory, setSubCategory] = useState(\"\");\n//   const [uploaderEmail, setUploaderEmail] = useState(\"\");\n//   const [files, setFiles] = useState([]);  // Track uploaded files\n\n//   const handleFileChange = (event) => {\n//     const selectedFiles = Array.from(event.target.files);\n//     if (selectedFiles) {\n//       setFileNames([...fileNames, ...selectedFiles.map((file) => file.name)]);\n//       setFiles([...files, ...selectedFiles]);\n//     }\n//   };\n\n//   const handleCategoryChange = (e) => {\n//     const selectedCategory = e.target.value;\n//     setCategory(selectedCategory);\n\n//     // Reset the subCategory field when category changes\n//     const selectedCategoryObject = categories.find((cat) => cat.name === selectedCategory);\n//     if (!selectedCategoryObject?.subcategories.length) {\n//       setSubCategory(\"\");\n//     }\n//   };\n\n//   const handleRemoveFile = (index) => {\n//     const newFileNames = [...fileNames];\n//     const newFiles = [...files];\n//     newFileNames.splice(index, 1);\n//     newFiles.splice(index, 1);\n//     setFileNames(newFileNames);\n//     setFiles(newFiles);\n//   };\n\n//   const handlePost = async () => {\n//     const formData = new FormData();\n//     formData.append(\"title\", title);\n//     formData.append(\"description\", description);\n//     formData.append(\"category\", category);\n//     formData.append(\"subCategory\", subCategory);\n//     formData.append(\"uploaderEmail\", uploaderEmail);\n\n//     if (files.length === 0) {\n//       alert(\"Please upload at least one file.\");\n//       return;\n//     }\n\n//     files.forEach((file) => {\n//       formData.append(\"media\", file);\n//     });\n\n//     try {\n//       await axios.post(\"http://localhost:3000/upload\", formData, {\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//         },\n//       });\n\n//       alert(\"Post submitted successfully!\");\n//     } catch (err) {\n//       console.error(\"Error during post submission:\", err.response || err);\n//       alert(\"Failed to submit post!\");\n//     }\n//   };\n\n//   const handleSaveToDrafts = async () => {\n//     const draftData = {\n//       title,\n//       description,\n//       category,\n//       subCategory,\n//       uploaderEmail,\n//       files: fileNames,\n//     };\n\n//     // Simulate saving draft (you could save this to a backend or local storage)\n//     console.log(\"Saving to drafts:\", draftData);\n//     alert(\"Draft saved successfully!\");\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h2>New Post</h2>\n//       <form>\n//         <div className=\"file-upload\">\n//           <label htmlFor=\"fileInput\">\n//             {fileNames.length > 0 ? fileNames.join(\", \") : \"Click to browse or drop files here\"}\n//           </label>\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple />\n//         </div>\n\n//         <div className=\"uploaded-files\">\n//           {fileNames.length > 0 && (\n//             <ul>\n//               {fileNames.map((fileName, index) => (\n//                 <li key={index} className=\"file-item\">\n//                   {fileName}\n//                   <span className=\"remove-icon\" onClick={() => handleRemoveFile(index)}>Ã—</span>\n//                 </li>\n//               ))}\n//             </ul>\n//           )}\n//         </div>\n\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter title for the file\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           required\n//         />\n\n//         <textarea\n//           placeholder=\"Write a description\"\n//           value={description}\n//           onChange={(e) => setDescription(e.target.value)}\n//           required\n//         ></textarea>\n\n//         <input\n//           type=\"email\"\n//           placeholder=\"Enter your email\"\n//           value={uploaderEmail}\n//           onChange={(e) => setUploaderEmail(e.target.value)}\n//           required\n//         />\n\n//         <select value={category} onChange={handleCategoryChange} required>\n//           <option value=\"\" disabled>Select a category</option>\n//           {categories.map((cat) => (\n//             <option key={cat.name} value={cat.name}>\n//               {cat.name}\n//             </option>\n//           ))}\n//         </select>\n\n//         <select\n//           value={subCategory}\n//           onChange={(e) => setSubCategory(e.target.value)}\n//           disabled={!categories.find((cat) => cat.name === category)?.subcategories.length}\n//           required\n//         >\n//           <option value=\"\" disabled>Select a subcategory</option>\n//           {categories\n//             .find((cat) => cat.name === category)\n//             ?.subcategories.map((subcat) => (\n//               <option key={subcat} value={subcat}>\n//                 {subcat}\n//               </option>\n//             ))}\n//         </select>\n\n//         <div className=\"button-container\">\n//           <button type=\"button\" onClick={handlePost} className=\"post-btn\">Post</button>\n//           <button type=\"button\" onClick={handleSaveToDrafts} className=\"draft-btn\">Save to Drafts</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default NewPost;\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import './NewPost.css';\n\n// const categories = [\n//   { name: \"Club\", subcategories: [\"RMF\", \"Splash Out\", \"Rhythmic Thunders\", \"VPOD\", \"Happy Club\"] },\n//   { name: \"Academics\", subcategories: [\"First year\", \"Second year\", \"Third year\", \"Fourth year\"] },\n//   { name: \"Notices\", subcategories: [] },\n//   { name: \"Skill Hub\", subcategories: [\"Hackathons\",\"Coding contests\",\"Training Programs\"] },\n//   { name: \"Events\", subcategories: [] },\n//   { name: \"Placements\", subcategories: [] },\n// ];\n\n// const NewPost = () => {\n//   const [fileNames, setFileNames] = useState([]);\n//   const [title, setTitle] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [subCategory, setSubCategory] = useState(\"\");\n//   const [uploaderEmail, setUploaderEmail] = useState(\"\");\n\n//   const handleFileChange = (event) => {\n//     const files = Array.from(event.target.files);\n//     if (files) {\n//       setFileNames(files.map((file) => file.name));\n//     }\n//   };\n\n//   const handleCategoryChange = (e) => {\n//     const selectedCategory = e.target.value;\n//     setCategory(selectedCategory);\n\n//     // Reset the subCategory field when category changes\n//     const selectedCategoryObject = categories.find((cat) => cat.name === selectedCategory);\n//     if (!selectedCategoryObject?.subcategories.length) {\n//       setSubCategory(\"\");\n//     }\n//   };\n\n//   const handlePost = async () => {\n//     const formData = new FormData();\n//     formData.append(\"title\", title);\n//     formData.append(\"description\", description);\n//     formData.append(\"category\", category);\n//     formData.append(\"subCategory\", subCategory);\n//     formData.append(\"uploaderEmail\", uploaderEmail);\n\n//     const files = document.getElementById(\"fileInput\").files;\n\n//     if (!files.length) {\n//       alert(\"Please upload at least one file.\");\n//       return;\n//     }\n\n//     Array.from(files).forEach((file) => {\n//       formData.append(\"media\", file);\n//     });\n\n//     // Log formData to check its contents\n//     console.log(formData);\n\n//     try {\n//       const response = await axios.post(\"http://localhost:3000/upload\", formData, {\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//         },\n//       });\n\n//       console.log(\"Response from backend:\", response); // Log response to check for errors\n//       alert(\"Post submitted successfully!\");\n//     } catch (err) {\n//       console.error(\"Error during post submission:\", err.response || err);\n//       alert(\"Failed to submit post!\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h2>New Post</h2>\n//       <form>\n//         <div className=\"file-upload\">\n//           <label htmlFor=\"fileInput\">\n//             {fileNames.length > 0 ? fileNames.join(\", \") : \"Click to browse or drop files here\"}\n//           </label>\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple />\n//         </div>\n\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter title for the file\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           required\n//         />\n\n//         <textarea\n//           placeholder=\"Write a description\"\n//           value={description}\n//           onChange={(e) => setDescription(e.target.value)}\n//           required\n//         ></textarea>\n\n//         <input\n//           type=\"email\"\n//           placeholder=\"Enter your email\"\n//           value={uploaderEmail}\n//           onChange={(e) => setUploaderEmail(e.target.value)}\n//           required\n//         />\n\n//         <select value={category} onChange={handleCategoryChange} required>\n//           <option value=\"\" disabled>Select a category</option>\n//           {categories.map((cat) => (\n//             <option key={cat.name} value={cat.name}>\n//               {cat.name}\n//             </option>\n//           ))}\n//         </select>\n\n//         <select\n//           value={subCategory}\n//           onChange={(e) => setSubCategory(e.target.value)}\n//           disabled={!categories.find((cat) => cat.name === category)?.subcategories.length}\n//           required\n//         >\n//           <option value=\"\" disabled>Select a subcategory</option>\n//           {categories\n//             .find((cat) => cat.name === category)\n//             ?.subcategories.map((subcat) => (\n//               <option key={subcat} value={subcat}>\n//                 {subcat}\n//               </option>\n//             ))}\n//         </select>\n\n//         <button type=\"button\" onClick={handlePost}>Post</button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default NewPost; // Ensure default export\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewPost = () => {\n  _s();\n  const [fileNames, setFileNames] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [subCategory, setSubCategory] = useState(\"\");\n  const [email, setEmail] = useState(\"\"); // Add email state\n\n  // Handle file selection\n  const handleFileChange = event => {\n    const files = Array.from(event.target.files); // Get all selected files\n    if (files) {\n      const fileNames = files.map(file => file.name);\n      setFileNames(fileNames);\n    }\n  };\n\n  // Handle post submission\n  const handlePost = async () => {\n    const formData = new FormData();\n    formData.append(\"title\", title);\n    formData.append(\"description\", description);\n    formData.append(\"category\", category);\n    formData.append(\"subCategory\", subCategory);\n    formData.append(\"uploaderEmail\", email); // Send email with the form data\n\n    // Append files to formData\n    const files = document.getElementById(\"fileInput\").files;\n    Array.from(files).forEach(file => {\n      formData.append(\"media\", file);\n    });\n    try {\n      const response = await axios.post(\"http://localhost:3000/upload\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      alert(\"Post submitted successfully!\");\n      console.log(response.data);\n    } catch (err) {\n      alert(\"Failed to submit post!\");\n      console.error(err);\n    }\n  };\n\n  // Handle saving the post as a draft\n  const handleSaveDraft = () => {\n    alert(\"Post saved as draft!\");\n    console.log({\n      title,\n      description,\n      category,\n      subCategory,\n      fileNames\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"New Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-upload\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"fileInput\",\n          children: fileNames.length > 0 ? fileNames.join(\", \") : \"Click to browse or drop files here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          id: \"fileInput\",\n          onChange: handleFileChange,\n          multiple: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter title for the file\",\n        value: title,\n        onChange: e => setTitle(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Write a description\",\n        value: description,\n        onChange: e => setDescription(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: category,\n        onChange: e => setCategory(e.target.value),\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select a category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"category1\",\n          children: \"Category 1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"category2\",\n          children: \"Category 2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 623,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: subCategory,\n        onChange: e => setSubCategory(e.target.value),\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select a subcategory\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"subcategory1\",\n          children: \"Subcategory 1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 640,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"subcategory2\",\n          children: \"Subcategory 2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 641,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Enter your email\",\n        value: email,\n        onChange: e => setEmail(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 645,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleSaveDraft,\n          children: \"Save as Draft\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handlePost,\n          children: \"Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 654,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 587,\n    columnNumber: 5\n  }, this);\n};\n_s(NewPost, \"vKaHhK8U9R6r/rMdpLZsTUTXZug=\");\n_c = NewPost;\nexport default NewPost;\nvar _c;\n$RefreshReg$(_c, \"NewPost\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","NewPost","_s","fileNames","setFileNames","title","setTitle","description","setDescription","category","setCategory","subCategory","setSubCategory","email","setEmail","handleFileChange","event","files","Array","from","target","map","file","name","handlePost","formData","FormData","append","document","getElementById","forEach","response","post","headers","alert","console","log","data","err","error","handleSaveDraft","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","length","join","type","id","onChange","multiple","placeholder","value","e","required","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/chpre/OneDrive/Desktop/college/PROJECTS/miniproject/college_activity/src/newpost.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import './NewPost.css';  // Ensure you add appropriate styles for the layout\r\n\r\n// const categories = [\r\n//   { name: \"Club\", subcategories: [\"RMF\", \"Splash Out\", \"Rhythmic Thunders\", \"VPOD\", \"Happy Club\"] },\r\n//   { name: \"Academics\", subcategories: [\"First year\", \"Second year\", \"Third year\", \"Fourth year\"] },\r\n//   { name: \"Notices\", subcategories: [] },\r\n//   { name: \"Skill Hub\", subcategories: [\"Hackathons\",\"Coding contests\",\"Training Programs\"] },\r\n//   { name: \"Events\", subcategories: [] },\r\n//   { name: \"Placements\", subcategories: [] },\r\n// ];\r\n\r\n// const NewPost = () => {\r\n//   const [fileNames, setFileNames] = useState([]);\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n//   const [category, setCategory] = useState(\"\");\r\n//   const [subCategory, setSubCategory] = useState(\"\");\r\n//   const [uploaderEmail, setUploaderEmail] = useState(\"\");\r\n//   const [files, setFiles] = useState([]);  // Track uploaded files\r\n\r\n//   const handleFileChange = (event) => {\r\n//     const selectedFiles = Array.from(event.target.files);\r\n//     if (selectedFiles) {\r\n//       setFileNames([...fileNames, ...selectedFiles.map((file) => file.name)]);\r\n//       setFiles([...files, ...selectedFiles]);\r\n//     }\r\n//   };\r\n\r\n//   const handleCategoryChange = (e) => {\r\n//     const selectedCategory = e.target.value;\r\n//     setCategory(selectedCategory);\r\n\r\n//     // Reset the subCategory field when category changes\r\n//     const selectedCategoryObject = categories.find((cat) => cat.name === selectedCategory);\r\n//     if (!selectedCategoryObject?.subcategories.length) {\r\n//       setSubCategory(\"\");\r\n//     }\r\n//   };\r\n\r\n//   const handleRemoveFile = (index) => {\r\n//     const newFileNames = [...fileNames];\r\n//     const newFiles = [...files];\r\n//     newFileNames.splice(index, 1);\r\n//     newFiles.splice(index, 1);\r\n//     setFileNames(newFileNames);\r\n//     setFiles(newFiles);\r\n//   };\r\n\r\n//   const handlePost = async () => {\r\n//     if (!title.trim() || !description.trim() || !category.trim()) {\r\n//       alert(\"Please fill out all required fields: title, description, and category.\");\r\n//       return;\r\n//     }\r\n  \r\n//     if (files.length === 0) {\r\n//       alert(\"Please upload at least one file.\");\r\n//       return;\r\n//     }\r\n  \r\n//     const formData = new FormData();\r\n//     formData.append(\"title\", title.trim());\r\n//     formData.append(\"description\", description.trim());\r\n//     formData.append(\"category\", category);\r\n//     formData.append(\"subCategory\", subCategory || \"\"); // Handle cases where subCategory might be empty\r\n//     formData.append(\"uploaderEmail\", uploaderEmail.trim());\r\n  \r\n//     // Append all selected files to the FormData\r\n//     files.forEach((file) => {\r\n//       formData.append(\"media\", file);\r\n//     });\r\n  \r\n//     try {\r\n//       const response = await axios.post(\"http://localhost:3000/upload\", formData, {\r\n//         headers: {\r\n//           \"Content-Type\": \"multipart/form-data\",\r\n//         },\r\n//       });\r\n  \r\n//       if (response.status === 201) {\r\n//         alert(\"Post submitted successfully!\");\r\n//         // Optionally reset the form after a successful submission\r\n//         setTitle(\"\");\r\n//         setDescription(\"\");\r\n//         setCategory(\"\");\r\n//         setSubCategory(\"\");\r\n//         setUploaderEmail(\"\");\r\n//         setFiles([]);\r\n//         setFileNames([]);\r\n//       } else {\r\n//         alert(\"Failed to submit post. Please try again.\");\r\n//       }\r\n//     } catch (err) {\r\n//       console.error(\"Error during post submission:\", err.response || err.message);\r\n//       alert(\r\n//         err.response?.data?.message || \"An unexpected error occurred. Please try again.\"\r\n//       );\r\n//     }\r\n//   };\r\n  \r\n\r\n//   const handleSaveToDrafts = async () => {\r\n//     const draftData = {\r\n//       title,\r\n//       description,\r\n//       category,\r\n//       subCategory,\r\n//       uploaderEmail,\r\n//       files: fileNames,\r\n//     };\r\n\r\n//     // Simulate saving draft (you could save this to a backend or local storage)\r\n//     console.log(\"Saving to drafts:\", draftData);\r\n//     alert(\"Draft saved successfully!\");\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h2>New Post</h2>\r\n//       <form>\r\n//         <div className=\"file-upload\">\r\n//           <label htmlFor=\"fileInput\">\r\n//             {fileNames.length > 0 ? fileNames.join(\", \") : \"Click to browse or drop files here\"}\r\n//           </label>\r\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple />\r\n//         </div>\r\n\r\n//         <div className=\"uploaded-files\">\r\n//           {fileNames.length > 0 && (\r\n//             <ul>\r\n//               {fileNames.map((fileName, index) => (\r\n//                 <li key={index} className=\"file-item\">\r\n//                   {fileName}\r\n//                   <span className=\"remove-icon\" onClick={() => handleRemoveFile(index)}>Ã—</span>\r\n//                 </li>\r\n//               ))}\r\n//             </ul>\r\n//           )}\r\n//         </div>\r\n\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Enter title for the file\"\r\n//           value={title}\r\n//           onChange={(e) => setTitle(e.target.value)}\r\n//           required\r\n//         />\r\n\r\n//         <textarea\r\n//           placeholder=\"Write a description\"\r\n//           value={description}\r\n//           onChange={(e) => setDescription(e.target.value)}\r\n//           required\r\n//         ></textarea>\r\n\r\n//         <input\r\n//           type=\"email\"\r\n//           placeholder=\"Enter your email\"\r\n//           value={uploaderEmail}\r\n//           onChange={(e) => setUploaderEmail(e.target.value)}\r\n//           required\r\n//         />\r\n\r\n//         <select value={category} onChange={handleCategoryChange} required>\r\n//           <option value=\"\" disabled>Select a category</option>\r\n//           {categories.map((cat) => (\r\n//             <option key={cat.name} value={cat.name}>\r\n//               {cat.name}\r\n//             </option>\r\n//           ))}\r\n//         </select>\r\n\r\n//         <select\r\n//           value={subCategory}\r\n//           onChange={(e) => setSubCategory(e.target.value)}\r\n//           disabled={!categories.find((cat) => cat.name === category)?.subcategories.length}\r\n//           required\r\n//         >\r\n//           <option value=\"\" disabled>Select a subcategory</option>\r\n//           {categories\r\n//             .find((cat) => cat.name === category)\r\n//             ?.subcategories.map((subcat) => (\r\n//               <option key={subcat} value={subcat}>\r\n//                 {subcat}\r\n//               </option>\r\n//             ))}\r\n//         </select>\r\n\r\n//         <div className=\"button-container\">\r\n//           <button type=\"button\" onClick={handlePost} className=\"post-btn\">Post</button>\r\n//           <button type=\"button\" onClick={handleSaveToDrafts} className=\"draft-btn\">Save to Drafts</button>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default NewPost;\r\n\r\n\r\n\r\n// import React, { useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import './NewPost.css';  // Ensure you add appropriate styles for the layout\r\n\r\n// const categories = [\r\n//   { name: \"Club\", subcategories: [\"RMF\", \"Splash Out\", \"Rhythmic Thunders\", \"VPOD\", \"Happy Club\"] },\r\n//   { name: \"Academics\", subcategories: [\"First year\", \"Second year\", \"Third year\", \"Fourth year\"] },\r\n//   { name: \"Notices\", subcategories: [] },\r\n//   { name: \"Skill Hub\", subcategories: [\"Hackathons\",\"Coding contests\",\"Training Programs\"] },\r\n//   { name: \"Events\", subcategories: [] },\r\n//   { name: \"Placements\", subcategories: [] },\r\n// ];\r\n\r\n// const NewPost = () => {\r\n//   const [fileNames, setFileNames] = useState([]);\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n//   const [category, setCategory] = useState(\"\");\r\n//   const [subCategory, setSubCategory] = useState(\"\");\r\n//   const [uploaderEmail, setUploaderEmail] = useState(\"\");\r\n//   const [files, setFiles] = useState([]);  // Track uploaded files\r\n\r\n//   const handleFileChange = (event) => {\r\n//     const selectedFiles = Array.from(event.target.files);\r\n//     if (selectedFiles) {\r\n//       setFileNames([...fileNames, ...selectedFiles.map((file) => file.name)]);\r\n//       setFiles([...files, ...selectedFiles]);\r\n//     }\r\n//   };\r\n\r\n//   const handleCategoryChange = (e) => {\r\n//     const selectedCategory = e.target.value;\r\n//     setCategory(selectedCategory);\r\n\r\n//     // Reset the subCategory field when category changes\r\n//     const selectedCategoryObject = categories.find((cat) => cat.name === selectedCategory);\r\n//     if (!selectedCategoryObject?.subcategories.length) {\r\n//       setSubCategory(\"\");\r\n//     }\r\n//   };\r\n\r\n//   const handleRemoveFile = (index) => {\r\n//     const newFileNames = [...fileNames];\r\n//     const newFiles = [...files];\r\n//     newFileNames.splice(index, 1);\r\n//     newFiles.splice(index, 1);\r\n//     setFileNames(newFileNames);\r\n//     setFiles(newFiles);\r\n//   };\r\n\r\n//   const handlePost = async () => {\r\n//     const formData = new FormData();\r\n//     formData.append(\"title\", title);\r\n//     formData.append(\"description\", description);\r\n//     formData.append(\"category\", category);\r\n//     formData.append(\"subCategory\", subCategory);\r\n//     formData.append(\"uploaderEmail\", uploaderEmail);\r\n\r\n//     if (files.length === 0) {\r\n//       alert(\"Please upload at least one file.\");\r\n//       return;\r\n//     }\r\n\r\n//     files.forEach((file) => {\r\n//       formData.append(\"media\", file);\r\n//     });\r\n\r\n//     try {\r\n//       await axios.post(\"http://localhost:3000/upload\", formData, {\r\n//         headers: {\r\n//           \"Content-Type\": \"multipart/form-data\",\r\n//         },\r\n//       });\r\n\r\n//       alert(\"Post submitted successfully!\");\r\n//     } catch (err) {\r\n//       console.error(\"Error during post submission:\", err.response || err);\r\n//       alert(\"Failed to submit post!\");\r\n//     }\r\n//   };\r\n\r\n//   const handleSaveToDrafts = async () => {\r\n//     const draftData = {\r\n//       title,\r\n//       description,\r\n//       category,\r\n//       subCategory,\r\n//       uploaderEmail,\r\n//       files: fileNames,\r\n//     };\r\n\r\n//     // Simulate saving draft (you could save this to a backend or local storage)\r\n//     console.log(\"Saving to drafts:\", draftData);\r\n//     alert(\"Draft saved successfully!\");\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h2>New Post</h2>\r\n//       <form>\r\n//         <div className=\"file-upload\">\r\n//           <label htmlFor=\"fileInput\">\r\n//             {fileNames.length > 0 ? fileNames.join(\", \") : \"Click to browse or drop files here\"}\r\n//           </label>\r\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple />\r\n//         </div>\r\n\r\n//         <div className=\"uploaded-files\">\r\n//           {fileNames.length > 0 && (\r\n//             <ul>\r\n//               {fileNames.map((fileName, index) => (\r\n//                 <li key={index} className=\"file-item\">\r\n//                   {fileName}\r\n//                   <span className=\"remove-icon\" onClick={() => handleRemoveFile(index)}>Ã—</span>\r\n//                 </li>\r\n//               ))}\r\n//             </ul>\r\n//           )}\r\n//         </div>\r\n\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Enter title for the file\"\r\n//           value={title}\r\n//           onChange={(e) => setTitle(e.target.value)}\r\n//           required\r\n//         />\r\n\r\n//         <textarea\r\n//           placeholder=\"Write a description\"\r\n//           value={description}\r\n//           onChange={(e) => setDescription(e.target.value)}\r\n//           required\r\n//         ></textarea>\r\n\r\n//         <input\r\n//           type=\"email\"\r\n//           placeholder=\"Enter your email\"\r\n//           value={uploaderEmail}\r\n//           onChange={(e) => setUploaderEmail(e.target.value)}\r\n//           required\r\n//         />\r\n\r\n//         <select value={category} onChange={handleCategoryChange} required>\r\n//           <option value=\"\" disabled>Select a category</option>\r\n//           {categories.map((cat) => (\r\n//             <option key={cat.name} value={cat.name}>\r\n//               {cat.name}\r\n//             </option>\r\n//           ))}\r\n//         </select>\r\n\r\n//         <select\r\n//           value={subCategory}\r\n//           onChange={(e) => setSubCategory(e.target.value)}\r\n//           disabled={!categories.find((cat) => cat.name === category)?.subcategories.length}\r\n//           required\r\n//         >\r\n//           <option value=\"\" disabled>Select a subcategory</option>\r\n//           {categories\r\n//             .find((cat) => cat.name === category)\r\n//             ?.subcategories.map((subcat) => (\r\n//               <option key={subcat} value={subcat}>\r\n//                 {subcat}\r\n//               </option>\r\n//             ))}\r\n//         </select>\r\n\r\n//         <div className=\"button-container\">\r\n//           <button type=\"button\" onClick={handlePost} className=\"post-btn\">Post</button>\r\n//           <button type=\"button\" onClick={handleSaveToDrafts} className=\"draft-btn\">Save to Drafts</button>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default NewPost;\r\n// import React, { useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import './NewPost.css';\r\n\r\n// const categories = [\r\n//   { name: \"Club\", subcategories: [\"RMF\", \"Splash Out\", \"Rhythmic Thunders\", \"VPOD\", \"Happy Club\"] },\r\n//   { name: \"Academics\", subcategories: [\"First year\", \"Second year\", \"Third year\", \"Fourth year\"] },\r\n//   { name: \"Notices\", subcategories: [] },\r\n//   { name: \"Skill Hub\", subcategories: [\"Hackathons\",\"Coding contests\",\"Training Programs\"] },\r\n//   { name: \"Events\", subcategories: [] },\r\n//   { name: \"Placements\", subcategories: [] },\r\n// ];\r\n\r\n// const NewPost = () => {\r\n//   const [fileNames, setFileNames] = useState([]);\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n//   const [category, setCategory] = useState(\"\");\r\n//   const [subCategory, setSubCategory] = useState(\"\");\r\n//   const [uploaderEmail, setUploaderEmail] = useState(\"\");\r\n\r\n//   const handleFileChange = (event) => {\r\n//     const files = Array.from(event.target.files);\r\n//     if (files) {\r\n//       setFileNames(files.map((file) => file.name));\r\n//     }\r\n//   };\r\n\r\n//   const handleCategoryChange = (e) => {\r\n//     const selectedCategory = e.target.value;\r\n//     setCategory(selectedCategory);\r\n\r\n//     // Reset the subCategory field when category changes\r\n//     const selectedCategoryObject = categories.find((cat) => cat.name === selectedCategory);\r\n//     if (!selectedCategoryObject?.subcategories.length) {\r\n//       setSubCategory(\"\");\r\n//     }\r\n//   };\r\n\r\n//   const handlePost = async () => {\r\n//     const formData = new FormData();\r\n//     formData.append(\"title\", title);\r\n//     formData.append(\"description\", description);\r\n//     formData.append(\"category\", category);\r\n//     formData.append(\"subCategory\", subCategory);\r\n//     formData.append(\"uploaderEmail\", uploaderEmail);\r\n  \r\n//     const files = document.getElementById(\"fileInput\").files;\r\n  \r\n//     if (!files.length) {\r\n//       alert(\"Please upload at least one file.\");\r\n//       return;\r\n//     }\r\n  \r\n//     Array.from(files).forEach((file) => {\r\n//       formData.append(\"media\", file);\r\n//     });\r\n  \r\n//     // Log formData to check its contents\r\n//     console.log(formData);\r\n  \r\n//     try {\r\n//       const response = await axios.post(\"http://localhost:3000/upload\", formData, {\r\n//         headers: {\r\n//           \"Content-Type\": \"multipart/form-data\",\r\n//         },\r\n//       });\r\n  \r\n//       console.log(\"Response from backend:\", response); // Log response to check for errors\r\n//       alert(\"Post submitted successfully!\");\r\n//     } catch (err) {\r\n//       console.error(\"Error during post submission:\", err.response || err);\r\n//       alert(\"Failed to submit post!\");\r\n//     }\r\n//   };\r\n  \r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h2>New Post</h2>\r\n//       <form>\r\n//         <div className=\"file-upload\">\r\n//           <label htmlFor=\"fileInput\">\r\n//             {fileNames.length > 0 ? fileNames.join(\", \") : \"Click to browse or drop files here\"}\r\n//           </label>\r\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple />\r\n//         </div>\r\n\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Enter title for the file\"\r\n//           value={title}\r\n//           onChange={(e) => setTitle(e.target.value)}\r\n//           required\r\n//         />\r\n\r\n//         <textarea\r\n//           placeholder=\"Write a description\"\r\n//           value={description}\r\n//           onChange={(e) => setDescription(e.target.value)}\r\n//           required\r\n//         ></textarea>\r\n\r\n//         <input\r\n//           type=\"email\"\r\n//           placeholder=\"Enter your email\"\r\n//           value={uploaderEmail}\r\n//           onChange={(e) => setUploaderEmail(e.target.value)}\r\n//           required\r\n//         />\r\n\r\n//         <select value={category} onChange={handleCategoryChange} required>\r\n//           <option value=\"\" disabled>Select a category</option>\r\n//           {categories.map((cat) => (\r\n//             <option key={cat.name} value={cat.name}>\r\n//               {cat.name}\r\n//             </option>\r\n//           ))}\r\n//         </select>\r\n\r\n//         <select\r\n//           value={subCategory}\r\n//           onChange={(e) => setSubCategory(e.target.value)}\r\n//           disabled={!categories.find((cat) => cat.name === category)?.subcategories.length}\r\n//           required\r\n//         >\r\n//           <option value=\"\" disabled>Select a subcategory</option>\r\n//           {categories\r\n//             .find((cat) => cat.name === category)\r\n//             ?.subcategories.map((subcat) => (\r\n//               <option key={subcat} value={subcat}>\r\n//                 {subcat}\r\n//               </option>\r\n//             ))}\r\n//         </select>\r\n\r\n//         <button type=\"button\" onClick={handlePost}>Post</button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default NewPost; // Ensure default export\r\nimport React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst NewPost = () => {\r\n  const [fileNames, setFileNames] = useState([]);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const [subCategory, setSubCategory] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");  // Add email state\r\n\r\n  // Handle file selection\r\n  const handleFileChange = (event) => {\r\n    const files = Array.from(event.target.files); // Get all selected files\r\n    if (files) {\r\n      const fileNames = files.map((file) => file.name);\r\n      setFileNames(fileNames);\r\n    }\r\n  };\r\n\r\n  // Handle post submission\r\n  const handlePost = async () => {\r\n    const formData = new FormData();\r\n    formData.append(\"title\", title);\r\n    formData.append(\"description\", description);\r\n    formData.append(\"category\", category);\r\n    formData.append(\"subCategory\", subCategory);\r\n    formData.append(\"uploaderEmail\", email);  // Send email with the form data\r\n\r\n    // Append files to formData\r\n    const files = document.getElementById(\"fileInput\").files;\r\n    Array.from(files).forEach((file) => {\r\n      formData.append(\"media\", file);\r\n    });\r\n\r\n    try {\r\n      const response = await axios.post(\"http://localhost:3000/upload\", formData, {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      });\r\n\r\n      alert(\"Post submitted successfully!\");\r\n      console.log(response.data);\r\n    } catch (err) {\r\n      alert(\"Failed to submit post!\");\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // Handle saving the post as a draft\r\n  const handleSaveDraft = () => {\r\n    alert(\"Post saved as draft!\");\r\n    console.log({\r\n      title,\r\n      description,\r\n      category,\r\n      subCategory,\r\n      fileNames,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>New Post</h2>\r\n      <form>\r\n        {/* File upload section */}\r\n        <div className=\"file-upload\">\r\n          <label htmlFor=\"fileInput\">\r\n            {fileNames.length > 0\r\n              ? fileNames.join(\", \")\r\n              : \"Click to browse or drop files here\"}\r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            id=\"fileInput\"\r\n            onChange={handleFileChange}\r\n            multiple\r\n          />\r\n        </div>\r\n\r\n        {/* Title Input */}\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter title for the file\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n          required\r\n        />\r\n\r\n        {/* Description Input */}\r\n        <textarea\r\n          placeholder=\"Write a description\"\r\n          value={description}\r\n          onChange={(e) => setDescription(e.target.value)}\r\n          required\r\n        ></textarea>\r\n\r\n        {/* Category Selection */}\r\n        <select\r\n          value={category}\r\n          onChange={(e) => setCategory(e.target.value)}\r\n          required\r\n        >\r\n          <option value=\"\" disabled>Select a category</option>\r\n          <option value=\"category1\">Category 1</option>\r\n          <option value=\"category2\">Category 2</option>\r\n        </select>\r\n\r\n        {/* Subcategory Selection */}\r\n        <select\r\n          value={subCategory}\r\n          onChange={(e) => setSubCategory(e.target.value)}\r\n          required\r\n        >\r\n          <option value=\"\" disabled>Select a subcategory</option>\r\n          <option value=\"subcategory1\">Subcategory 1</option>\r\n          <option value=\"subcategory2\">Subcategory 2</option>\r\n        </select>\r\n\r\n        {/* Email Input */}\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"Enter your email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          required\r\n        />\r\n\r\n        {/* Buttons */}\r\n        <div className=\"button-container\">\r\n          <button type=\"button\" onClick={handleSaveDraft}>\r\n            Save as Draft\r\n          </button>\r\n          <button type=\"button\" onClick={handlePost}>\r\n            Post\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPost;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;;EAEzC;EACA,MAAMkB,gBAAgB,GAAIC,KAAK,IAAK;IAClC,MAAMC,KAAK,GAAGC,KAAK,CAACC,IAAI,CAACH,KAAK,CAACI,MAAM,CAACH,KAAK,CAAC,CAAC,CAAC;IAC9C,IAAIA,KAAK,EAAE;MACT,MAAMd,SAAS,GAAGc,KAAK,CAACI,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAAC;MAChDnB,YAAY,CAACD,SAAS,CAAC;IACzB;EACF,CAAC;;EAED;EACA,MAAMqB,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEtB,KAAK,CAAC;IAC/BoB,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEpB,WAAW,CAAC;IAC3CkB,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAElB,QAAQ,CAAC;IACrCgB,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEhB,WAAW,CAAC;IAC3Cc,QAAQ,CAACE,MAAM,CAAC,eAAe,EAAEd,KAAK,CAAC,CAAC,CAAE;;IAE1C;IACA,MAAMI,KAAK,GAAGW,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACZ,KAAK;IACxDC,KAAK,CAACC,IAAI,CAACF,KAAK,CAAC,CAACa,OAAO,CAAER,IAAI,IAAK;MAClCG,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEL,IAAI,CAAC;IAChC,CAAC,CAAC;IAEF,IAAI;MACF,MAAMS,QAAQ,GAAG,MAAMjC,KAAK,CAACkC,IAAI,CAAC,8BAA8B,EAAEP,QAAQ,EAAE;QAC1EQ,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEFC,KAAK,CAAC,8BAA8B,CAAC;MACrCC,OAAO,CAACC,GAAG,CAACL,QAAQ,CAACM,IAAI,CAAC;IAC5B,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZJ,KAAK,CAAC,wBAAwB,CAAC;MAC/BC,OAAO,CAACI,KAAK,CAACD,GAAG,CAAC;IACpB;EACF,CAAC;;EAED;EACA,MAAME,eAAe,GAAGA,CAAA,KAAM;IAC5BN,KAAK,CAAC,sBAAsB,CAAC;IAC7BC,OAAO,CAACC,GAAG,CAAC;MACV/B,KAAK;MACLE,WAAW;MACXE,QAAQ;MACRE,WAAW;MACXR;IACF,CAAC,CAAC;EACJ,CAAC;EAED,oBACEH,OAAA;IAAKyC,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxB1C,OAAA;MAAA0C,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjB9C,OAAA;MAAA0C,QAAA,gBAEE1C,OAAA;QAAKyC,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1B1C,OAAA;UAAO+C,OAAO,EAAC,WAAW;UAAAL,QAAA,EACvBvC,SAAS,CAAC6C,MAAM,GAAG,CAAC,GACjB7C,SAAS,CAAC8C,IAAI,CAAC,IAAI,CAAC,GACpB;QAAoC;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnC,CAAC,eACR9C,OAAA;UACEkD,IAAI,EAAC,MAAM;UACXC,EAAE,EAAC,WAAW;UACdC,QAAQ,EAAErC,gBAAiB;UAC3BsC,QAAQ;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAGN9C,OAAA;QACEkD,IAAI,EAAC,MAAM;QACXI,WAAW,EAAC,0BAA0B;QACtCC,KAAK,EAAElD,KAAM;QACb+C,QAAQ,EAAGI,CAAC,IAAKlD,QAAQ,CAACkD,CAAC,CAACpC,MAAM,CAACmC,KAAK,CAAE;QAC1CE,QAAQ;MAAA;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC,eAGF9C,OAAA;QACEsD,WAAW,EAAC,qBAAqB;QACjCC,KAAK,EAAEhD,WAAY;QACnB6C,QAAQ,EAAGI,CAAC,IAAKhD,cAAc,CAACgD,CAAC,CAACpC,MAAM,CAACmC,KAAK,CAAE;QAChDE,QAAQ;MAAA;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAGZ9C,OAAA;QACEuD,KAAK,EAAE9C,QAAS;QAChB2C,QAAQ,EAAGI,CAAC,IAAK9C,WAAW,CAAC8C,CAAC,CAACpC,MAAM,CAACmC,KAAK,CAAE;QAC7CE,QAAQ;QAAAf,QAAA,gBAER1C,OAAA;UAAQuD,KAAK,EAAC,EAAE;UAACG,QAAQ;UAAAhB,QAAA,EAAC;QAAiB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACpD9C,OAAA;UAAQuD,KAAK,EAAC,WAAW;UAAAb,QAAA,EAAC;QAAU;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC7C9C,OAAA;UAAQuD,KAAK,EAAC,WAAW;UAAAb,QAAA,EAAC;QAAU;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC,CAAC,eAGT9C,OAAA;QACEuD,KAAK,EAAE5C,WAAY;QACnByC,QAAQ,EAAGI,CAAC,IAAK5C,cAAc,CAAC4C,CAAC,CAACpC,MAAM,CAACmC,KAAK,CAAE;QAChDE,QAAQ;QAAAf,QAAA,gBAER1C,OAAA;UAAQuD,KAAK,EAAC,EAAE;UAACG,QAAQ;UAAAhB,QAAA,EAAC;QAAoB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACvD9C,OAAA;UAAQuD,KAAK,EAAC,cAAc;UAAAb,QAAA,EAAC;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACnD9C,OAAA;UAAQuD,KAAK,EAAC,cAAc;UAAAb,QAAA,EAAC;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CAAC,eAGT9C,OAAA;QACEkD,IAAI,EAAC,OAAO;QACZI,WAAW,EAAC,kBAAkB;QAC9BC,KAAK,EAAE1C,KAAM;QACbuC,QAAQ,EAAGI,CAAC,IAAK1C,QAAQ,CAAC0C,CAAC,CAACpC,MAAM,CAACmC,KAAK,CAAE;QAC1CE,QAAQ;MAAA;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC,eAGF9C,OAAA;QAAKyC,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC/B1C,OAAA;UAAQkD,IAAI,EAAC,QAAQ;UAACS,OAAO,EAAEnB,eAAgB;UAAAE,QAAA,EAAC;QAEhD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT9C,OAAA;UAAQkD,IAAI,EAAC,QAAQ;UAACS,OAAO,EAAEnC,UAAW;UAAAkB,QAAA,EAAC;QAE3C;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAAC5C,EAAA,CA1IID,OAAO;AAAA2D,EAAA,GAAP3D,OAAO;AA4Ib,eAAeA,OAAO;AAAC,IAAA2D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}