{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chpre\\\\OneDrive\\\\Desktop\\\\college\\\\PROJECTS\\\\miniproject\\\\college_activity\\\\src\\\\newpost.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import './NewPost.css';  // Ensure you add appropriate styles for the layout\n\n// const categories = [\n//   { name: \"Club\", subcategories: [\"RMF\", \"Splash Out\", \"Rhythmic Thunders\", \"VPOD\", \"Happy Club\"] },\n//   { name: \"Academics\", subcategories: [\"First year\", \"Second year\", \"Third year\", \"Fourth year\"] },\n//   { name: \"Notices\", subcategories: [] },\n//   { name: \"Skill Hub\", subcategories: [\"Hackathons\",\"Coding contests\",\"Training Programs\"] },\n//   { name: \"Events\", subcategories: [] },\n//   { name: \"Placements\", subcategories: [] },\n// ];\n\n// const NewPost = () => {\n//   const [fileNames, setFileNames] = useState([]);\n//   const [title, setTitle] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [subCategory, setSubCategory] = useState(\"\");\n//   const [uploaderEmail, setUploaderEmail] = useState(\"\");\n//   const [files, setFiles] = useState([]);  // Track uploaded files\n\n//   const handleFileChange = (event) => {\n//     const selectedFiles = Array.from(event.target.files);\n//     if (selectedFiles) {\n//       setFileNames([...fileNames, ...selectedFiles.map((file) => file.name)]);\n//       setFiles([...files, ...selectedFiles]);\n//     }\n//   };\n\n//   const handleCategoryChange = (e) => {\n//     const selectedCategory = e.target.value;\n//     setCategory(selectedCategory);\n\n//     // Reset the subCategory field when category changes\n//     const selectedCategoryObject = categories.find((cat) => cat.name === selectedCategory);\n//     if (!selectedCategoryObject?.subcategories.length) {\n//       setSubCategory(\"\");\n//     }\n//   };\n\n//   const handleRemoveFile = (index) => {\n//     const newFileNames = [...fileNames];\n//     const newFiles = [...files];\n//     newFileNames.splice(index, 1);\n//     newFiles.splice(index, 1);\n//     setFileNames(newFileNames);\n//     setFiles(newFiles);\n//   };\n\n//   const handlePost = async () => {\n//     if (!title.trim() || !description.trim() || !category.trim()) {\n//       alert(\"Please fill out all required fields: title, description, and category.\");\n//       return;\n//     }\n\n//     if (files.length === 0) {\n//       alert(\"Please upload at least one file.\");\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append(\"title\", title.trim());\n//     formData.append(\"description\", description.trim());\n//     formData.append(\"category\", category);\n//     formData.append(\"subCategory\", subCategory || \"\"); // Handle cases where subCategory might be empty\n//     formData.append(\"uploaderEmail\", uploaderEmail.trim());\n\n//     // Append all selected files to the FormData\n//     files.forEach((file) => {\n//       formData.append(\"media\", file);\n//     });\n\n//     try {\n//       const response = await axios.post(\"http://localhost:3000/upload\", formData, {\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//         },\n//       });\n\n//       if (response.status === 201) {\n//         alert(\"Post submitted successfully!\");\n//         // Optionally reset the form after a successful submission\n//         setTitle(\"\");\n//         setDescription(\"\");\n//         setCategory(\"\");\n//         setSubCategory(\"\");\n//         setUploaderEmail(\"\");\n//         setFiles([]);\n//         setFileNames([]);\n//       } else {\n//         alert(\"Failed to submit post. Please try again.\");\n//       }\n//     } catch (err) {\n//       console.error(\"Error during post submission:\", err.response || err.message);\n//       alert(\n//         err.response?.data?.message || \"An unexpected error occurred. Please try again.\"\n//       );\n//     }\n//   };\n\n//   const handleSaveToDrafts = async () => {\n//     const draftData = {\n//       title,\n//       description,\n//       category,\n//       subCategory,\n//       uploaderEmail,\n//       files: fileNames,\n//     };\n\n//     // Simulate saving draft (you could save this to a backend or local storage)\n//     console.log(\"Saving to drafts:\", draftData);\n//     alert(\"Draft saved successfully!\");\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h2>New Post</h2>\n//       <form>\n//         <div className=\"file-upload\">\n//           <label htmlFor=\"fileInput\">\n//             {fileNames.length > 0 ? fileNames.join(\", \") : \"Click to browse or drop files here\"}\n//           </label>\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple />\n//         </div>\n\n//         <div className=\"uploaded-files\">\n//           {fileNames.length > 0 && (\n//             <ul>\n//               {fileNames.map((fileName, index) => (\n//                 <li key={index} className=\"file-item\">\n//                   {fileName}\n//                   <span className=\"remove-icon\" onClick={() => handleRemoveFile(index)}>Ã—</span>\n//                 </li>\n//               ))}\n//             </ul>\n//           )}\n//         </div>\n\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter title for the file\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           required\n//         />\n\n//         <textarea\n//           placeholder=\"Write a description\"\n//           value={description}\n//           onChange={(e) => setDescription(e.target.value)}\n//           required\n//         ></textarea>\n\n//         <input\n//           type=\"email\"\n//           placeholder=\"Enter your email\"\n//           value={uploaderEmail}\n//           onChange={(e) => setUploaderEmail(e.target.value)}\n//           required\n//         />\n\n//         <select value={category} onChange={handleCategoryChange} required>\n//           <option value=\"\" disabled>Select a category</option>\n//           {categories.map((cat) => (\n//             <option key={cat.name} value={cat.name}>\n//               {cat.name}\n//             </option>\n//           ))}\n//         </select>\n\n//         <select\n//           value={subCategory}\n//           onChange={(e) => setSubCategory(e.target.value)}\n//           disabled={!categories.find((cat) => cat.name === category)?.subcategories.length}\n//           required\n//         >\n//           <option value=\"\" disabled>Select a subcategory</option>\n//           {categories\n//             .find((cat) => cat.name === category)\n//             ?.subcategories.map((subcat) => (\n//               <option key={subcat} value={subcat}>\n//                 {subcat}\n//               </option>\n//             ))}\n//         </select>\n\n//         <div className=\"button-container\">\n//           <button type=\"button\" onClick={handlePost} className=\"post-btn\">Post</button>\n//           <button type=\"button\" onClick={handleSaveToDrafts} className=\"draft-btn\">Save to Drafts</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default NewPost;\n\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import './NewPost.css';  // Ensure you add appropriate styles for the layout\n\n// const categories = [\n//   { name: \"Club\", subcategories: [\"RMF\", \"Splash Out\", \"Rhythmic Thunders\", \"VPOD\", \"Happy Club\"] },\n//   { name: \"Academics\", subcategories: [\"First year\", \"Second year\", \"Third year\", \"Fourth year\"] },\n//   { name: \"Notices\", subcategories: [] },\n//   { name: \"Skill Hub\", subcategories: [\"Hackathons\",\"Coding contests\",\"Training Programs\"] },\n//   { name: \"Events\", subcategories: [] },\n//   { name: \"Placements\", subcategories: [] },\n// ];\n\n// const NewPost = () => {\n//   const [fileNames, setFileNames] = useState([]);\n//   const [title, setTitle] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [subCategory, setSubCategory] = useState(\"\");\n//   const [uploaderEmail, setUploaderEmail] = useState(\"\");\n//   const [files, setFiles] = useState([]);  // Track uploaded files\n\n//   const handleFileChange = (event) => {\n//     const selectedFiles = Array.from(event.target.files);\n//     if (selectedFiles) {\n//       setFileNames([...fileNames, ...selectedFiles.map((file) => file.name)]);\n//       setFiles([...files, ...selectedFiles]);\n//     }\n//   };\n\n//   const handleCategoryChange = (e) => {\n//     const selectedCategory = e.target.value;\n//     setCategory(selectedCategory);\n\n//     // Reset the subCategory field when category changes\n//     const selectedCategoryObject = categories.find((cat) => cat.name === selectedCategory);\n//     if (!selectedCategoryObject?.subcategories.length) {\n//       setSubCategory(\"\");\n//     }\n//   };\n\n//   const handleRemoveFile = (index) => {\n//     const newFileNames = [...fileNames];\n//     const newFiles = [...files];\n//     newFileNames.splice(index, 1);\n//     newFiles.splice(index, 1);\n//     setFileNames(newFileNames);\n//     setFiles(newFiles);\n//   };\n\n//   const handlePost = async () => {\n//     const formData = new FormData();\n//     formData.append(\"title\", title);\n//     formData.append(\"description\", description);\n//     formData.append(\"category\", category);\n//     formData.append(\"subCategory\", subCategory);\n//     formData.append(\"uploaderEmail\", uploaderEmail);\n\n//     if (files.length === 0) {\n//       alert(\"Please upload at least one file.\");\n//       return;\n//     }\n\n//     files.forEach((file) => {\n//       formData.append(\"media\", file);\n//     });\n\n//     try {\n//       await axios.post(\"http://localhost:3000/upload\", formData, {\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//         },\n//       });\n\n//       alert(\"Post submitted successfully!\");\n//     } catch (err) {\n//       console.error(\"Error during post submission:\", err.response || err);\n//       alert(\"Failed to submit post!\");\n//     }\n//   };\n\n//   const handleSaveToDrafts = async () => {\n//     const draftData = {\n//       title,\n//       description,\n//       category,\n//       subCategory,\n//       uploaderEmail,\n//       files: fileNames,\n//     };\n\n//     // Simulate saving draft (you could save this to a backend or local storage)\n//     console.log(\"Saving to drafts:\", draftData);\n//     alert(\"Draft saved successfully!\");\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <h2>New Post</h2>\n//       <form>\n//         <div className=\"file-upload\">\n//           <label htmlFor=\"fileInput\">\n//             {fileNames.length > 0 ? fileNames.join(\", \") : \"Click to browse or drop files here\"}\n//           </label>\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple />\n//         </div>\n\n//         <div className=\"uploaded-files\">\n//           {fileNames.length > 0 && (\n//             <ul>\n//               {fileNames.map((fileName, index) => (\n//                 <li key={index} className=\"file-item\">\n//                   {fileName}\n//                   <span className=\"remove-icon\" onClick={() => handleRemoveFile(index)}>Ã—</span>\n//                 </li>\n//               ))}\n//             </ul>\n//           )}\n//         </div>\n\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter title for the file\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           required\n//         />\n\n//         <textarea\n//           placeholder=\"Write a description\"\n//           value={description}\n//           onChange={(e) => setDescription(e.target.value)}\n//           required\n//         ></textarea>\n\n//         <input\n//           type=\"email\"\n//           placeholder=\"Enter your email\"\n//           value={uploaderEmail}\n//           onChange={(e) => setUploaderEmail(e.target.value)}\n//           required\n//         />\n\n//         <select value={category} onChange={handleCategoryChange} required>\n//           <option value=\"\" disabled>Select a category</option>\n//           {categories.map((cat) => (\n//             <option key={cat.name} value={cat.name}>\n//               {cat.name}\n//             </option>\n//           ))}\n//         </select>\n\n//         <select\n//           value={subCategory}\n//           onChange={(e) => setSubCategory(e.target.value)}\n//           disabled={!categories.find((cat) => cat.name === category)?.subcategories.length}\n//           required\n//         >\n//           <option value=\"\" disabled>Select a subcategory</option>\n//           {categories\n//             .find((cat) => cat.name === category)\n//             ?.subcategories.map((subcat) => (\n//               <option key={subcat} value={subcat}>\n//                 {subcat}\n//               </option>\n//             ))}\n//         </select>\n\n//         <div className=\"button-container\">\n//           <button type=\"button\" onClick={handlePost} className=\"post-btn\">Post</button>\n//           <button type=\"button\" onClick={handleSaveToDrafts} className=\"draft-btn\">Save to Drafts</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default NewPost;\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport './NewPost.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst categories = [{\n  name: \"Club\",\n  subcategories: [\"RMF\", \"Splash Out\", \"Rhythmic Thunders\", \"VPOD\", \"Happy Club\"]\n}, {\n  name: \"Academics\",\n  subcategories: [\"First year\", \"Second year\", \"Third year\", \"Fourth year\"]\n}, {\n  name: \"Notices\",\n  subcategories: []\n}, {\n  name: \"Skill Hub\",\n  subcategories: [\"Hackathons\", \"Coding contests\", \"Training Programs\"]\n}, {\n  name: \"Events\",\n  subcategories: []\n}, {\n  name: \"Placements\",\n  subcategories: []\n}];\nconst NewPost = () => {\n  _s();\n  var _categories$find, _categories$find2;\n  const [fileNames, setFileNames] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [subCategory, setSubCategory] = useState(\"\");\n  const [uploaderEmail, setUploaderEmail] = useState(\"\");\n  const handleFileChange = event => {\n    const files = Array.from(event.target.files);\n    if (files) {\n      setFileNames(files.map(file => file.name));\n    }\n  };\n  const handleCategoryChange = e => {\n    const selectedCategory = e.target.value;\n    setCategory(selectedCategory);\n\n    // Reset the subCategory field when category changes\n    const selectedCategoryObject = categories.find(cat => cat.name === selectedCategory);\n    if (!(selectedCategoryObject !== null && selectedCategoryObject !== void 0 && selectedCategoryObject.subcategories.length)) {\n      setSubCategory(\"\");\n    }\n  };\n  const handlePost = async () => {\n    const formData = new FormData();\n    formData.append(\"title\", title);\n    formData.append(\"description\", description);\n    formData.append(\"category\", category);\n    formData.append(\"subCategory\", subCategory);\n    formData.append(\"uploaderEmail\", uploaderEmail);\n    const files = document.getElementById(\"fileInput\").files;\n    if (!files.length) {\n      alert(\"Please upload at least one file.\");\n      return;\n    }\n    Array.from(files).forEach(file => {\n      formData.append(\"media\", file);\n    });\n    try {\n      await axios.post(\"http://localhost:3000/upload\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      alert(\"Post submitted successfully!\");\n    } catch (err) {\n      console.error(\"Error during post submission:\", err.response || err);\n      alert(\"Failed to submit post!\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"New Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-upload\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"fileInput\",\n          children: fileNames.length > 0 ? fileNames.join(\", \") : \"Click to browse or drop files here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          id: \"fileInput\",\n          onChange: handleFileChange,\n          multiple: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter title for the file\",\n        value: title,\n        onChange: e => setTitle(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Write a description\",\n        value: description,\n        onChange: e => setDescription(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Enter your email\",\n        value: uploaderEmail,\n        onChange: e => setUploaderEmail(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: category,\n        onChange: handleCategoryChange,\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select a category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 11\n        }, this), categories.map(cat => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: cat.name,\n          children: cat.name\n        }, cat.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: subCategory,\n        onChange: e => setSubCategory(e.target.value),\n        disabled: !((_categories$find = categories.find(cat => cat.name === category)) !== null && _categories$find !== void 0 && _categories$find.subcategories.length),\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select a subcategory\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 11\n        }, this), (_categories$find2 = categories.find(cat => cat.name === category)) === null || _categories$find2 === void 0 ? void 0 : _categories$find2.subcategories.map(subcat => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: subcat,\n          children: subcat\n        }, subcat, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handlePost,\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 455,\n    columnNumber: 5\n  }, this);\n};\n_s(NewPost, \"bxLiWP6TlOJIyQ7pO99XUXNE01s=\");\n_c = NewPost;\nvar _c;\n$RefreshReg$(_c, \"NewPost\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","categories","name","subcategories","NewPost","_s","_categories$find","_categories$find2","fileNames","setFileNames","title","setTitle","description","setDescription","category","setCategory","subCategory","setSubCategory","uploaderEmail","setUploaderEmail","handleFileChange","event","files","Array","from","target","map","file","handleCategoryChange","e","selectedCategory","value","selectedCategoryObject","find","cat","length","handlePost","formData","FormData","append","document","getElementById","alert","forEach","post","headers","err","console","error","response","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","join","type","id","onChange","multiple","placeholder","required","disabled","subcat","onClick","_c","$RefreshReg$"],"sources":["C:/Users/chpre/OneDrive/Desktop/college/PROJECTS/miniproject/college_activity/src/newpost.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import './NewPost.css';  // Ensure you add appropriate styles for the layout\r\n\r\n// const categories = [\r\n//   { name: \"Club\", subcategories: [\"RMF\", \"Splash Out\", \"Rhythmic Thunders\", \"VPOD\", \"Happy Club\"] },\r\n//   { name: \"Academics\", subcategories: [\"First year\", \"Second year\", \"Third year\", \"Fourth year\"] },\r\n//   { name: \"Notices\", subcategories: [] },\r\n//   { name: \"Skill Hub\", subcategories: [\"Hackathons\",\"Coding contests\",\"Training Programs\"] },\r\n//   { name: \"Events\", subcategories: [] },\r\n//   { name: \"Placements\", subcategories: [] },\r\n// ];\r\n\r\n// const NewPost = () => {\r\n//   const [fileNames, setFileNames] = useState([]);\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n//   const [category, setCategory] = useState(\"\");\r\n//   const [subCategory, setSubCategory] = useState(\"\");\r\n//   const [uploaderEmail, setUploaderEmail] = useState(\"\");\r\n//   const [files, setFiles] = useState([]);  // Track uploaded files\r\n\r\n//   const handleFileChange = (event) => {\r\n//     const selectedFiles = Array.from(event.target.files);\r\n//     if (selectedFiles) {\r\n//       setFileNames([...fileNames, ...selectedFiles.map((file) => file.name)]);\r\n//       setFiles([...files, ...selectedFiles]);\r\n//     }\r\n//   };\r\n\r\n//   const handleCategoryChange = (e) => {\r\n//     const selectedCategory = e.target.value;\r\n//     setCategory(selectedCategory);\r\n\r\n//     // Reset the subCategory field when category changes\r\n//     const selectedCategoryObject = categories.find((cat) => cat.name === selectedCategory);\r\n//     if (!selectedCategoryObject?.subcategories.length) {\r\n//       setSubCategory(\"\");\r\n//     }\r\n//   };\r\n\r\n//   const handleRemoveFile = (index) => {\r\n//     const newFileNames = [...fileNames];\r\n//     const newFiles = [...files];\r\n//     newFileNames.splice(index, 1);\r\n//     newFiles.splice(index, 1);\r\n//     setFileNames(newFileNames);\r\n//     setFiles(newFiles);\r\n//   };\r\n\r\n//   const handlePost = async () => {\r\n//     if (!title.trim() || !description.trim() || !category.trim()) {\r\n//       alert(\"Please fill out all required fields: title, description, and category.\");\r\n//       return;\r\n//     }\r\n  \r\n//     if (files.length === 0) {\r\n//       alert(\"Please upload at least one file.\");\r\n//       return;\r\n//     }\r\n  \r\n//     const formData = new FormData();\r\n//     formData.append(\"title\", title.trim());\r\n//     formData.append(\"description\", description.trim());\r\n//     formData.append(\"category\", category);\r\n//     formData.append(\"subCategory\", subCategory || \"\"); // Handle cases where subCategory might be empty\r\n//     formData.append(\"uploaderEmail\", uploaderEmail.trim());\r\n  \r\n//     // Append all selected files to the FormData\r\n//     files.forEach((file) => {\r\n//       formData.append(\"media\", file);\r\n//     });\r\n  \r\n//     try {\r\n//       const response = await axios.post(\"http://localhost:3000/upload\", formData, {\r\n//         headers: {\r\n//           \"Content-Type\": \"multipart/form-data\",\r\n//         },\r\n//       });\r\n  \r\n//       if (response.status === 201) {\r\n//         alert(\"Post submitted successfully!\");\r\n//         // Optionally reset the form after a successful submission\r\n//         setTitle(\"\");\r\n//         setDescription(\"\");\r\n//         setCategory(\"\");\r\n//         setSubCategory(\"\");\r\n//         setUploaderEmail(\"\");\r\n//         setFiles([]);\r\n//         setFileNames([]);\r\n//       } else {\r\n//         alert(\"Failed to submit post. Please try again.\");\r\n//       }\r\n//     } catch (err) {\r\n//       console.error(\"Error during post submission:\", err.response || err.message);\r\n//       alert(\r\n//         err.response?.data?.message || \"An unexpected error occurred. Please try again.\"\r\n//       );\r\n//     }\r\n//   };\r\n  \r\n\r\n//   const handleSaveToDrafts = async () => {\r\n//     const draftData = {\r\n//       title,\r\n//       description,\r\n//       category,\r\n//       subCategory,\r\n//       uploaderEmail,\r\n//       files: fileNames,\r\n//     };\r\n\r\n//     // Simulate saving draft (you could save this to a backend or local storage)\r\n//     console.log(\"Saving to drafts:\", draftData);\r\n//     alert(\"Draft saved successfully!\");\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h2>New Post</h2>\r\n//       <form>\r\n//         <div className=\"file-upload\">\r\n//           <label htmlFor=\"fileInput\">\r\n//             {fileNames.length > 0 ? fileNames.join(\", \") : \"Click to browse or drop files here\"}\r\n//           </label>\r\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple />\r\n//         </div>\r\n\r\n//         <div className=\"uploaded-files\">\r\n//           {fileNames.length > 0 && (\r\n//             <ul>\r\n//               {fileNames.map((fileName, index) => (\r\n//                 <li key={index} className=\"file-item\">\r\n//                   {fileName}\r\n//                   <span className=\"remove-icon\" onClick={() => handleRemoveFile(index)}>Ã—</span>\r\n//                 </li>\r\n//               ))}\r\n//             </ul>\r\n//           )}\r\n//         </div>\r\n\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Enter title for the file\"\r\n//           value={title}\r\n//           onChange={(e) => setTitle(e.target.value)}\r\n//           required\r\n//         />\r\n\r\n//         <textarea\r\n//           placeholder=\"Write a description\"\r\n//           value={description}\r\n//           onChange={(e) => setDescription(e.target.value)}\r\n//           required\r\n//         ></textarea>\r\n\r\n//         <input\r\n//           type=\"email\"\r\n//           placeholder=\"Enter your email\"\r\n//           value={uploaderEmail}\r\n//           onChange={(e) => setUploaderEmail(e.target.value)}\r\n//           required\r\n//         />\r\n\r\n//         <select value={category} onChange={handleCategoryChange} required>\r\n//           <option value=\"\" disabled>Select a category</option>\r\n//           {categories.map((cat) => (\r\n//             <option key={cat.name} value={cat.name}>\r\n//               {cat.name}\r\n//             </option>\r\n//           ))}\r\n//         </select>\r\n\r\n//         <select\r\n//           value={subCategory}\r\n//           onChange={(e) => setSubCategory(e.target.value)}\r\n//           disabled={!categories.find((cat) => cat.name === category)?.subcategories.length}\r\n//           required\r\n//         >\r\n//           <option value=\"\" disabled>Select a subcategory</option>\r\n//           {categories\r\n//             .find((cat) => cat.name === category)\r\n//             ?.subcategories.map((subcat) => (\r\n//               <option key={subcat} value={subcat}>\r\n//                 {subcat}\r\n//               </option>\r\n//             ))}\r\n//         </select>\r\n\r\n//         <div className=\"button-container\">\r\n//           <button type=\"button\" onClick={handlePost} className=\"post-btn\">Post</button>\r\n//           <button type=\"button\" onClick={handleSaveToDrafts} className=\"draft-btn\">Save to Drafts</button>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default NewPost;\r\n\r\n\r\n\r\n// import React, { useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import './NewPost.css';  // Ensure you add appropriate styles for the layout\r\n\r\n// const categories = [\r\n//   { name: \"Club\", subcategories: [\"RMF\", \"Splash Out\", \"Rhythmic Thunders\", \"VPOD\", \"Happy Club\"] },\r\n//   { name: \"Academics\", subcategories: [\"First year\", \"Second year\", \"Third year\", \"Fourth year\"] },\r\n//   { name: \"Notices\", subcategories: [] },\r\n//   { name: \"Skill Hub\", subcategories: [\"Hackathons\",\"Coding contests\",\"Training Programs\"] },\r\n//   { name: \"Events\", subcategories: [] },\r\n//   { name: \"Placements\", subcategories: [] },\r\n// ];\r\n\r\n// const NewPost = () => {\r\n//   const [fileNames, setFileNames] = useState([]);\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n//   const [category, setCategory] = useState(\"\");\r\n//   const [subCategory, setSubCategory] = useState(\"\");\r\n//   const [uploaderEmail, setUploaderEmail] = useState(\"\");\r\n//   const [files, setFiles] = useState([]);  // Track uploaded files\r\n\r\n//   const handleFileChange = (event) => {\r\n//     const selectedFiles = Array.from(event.target.files);\r\n//     if (selectedFiles) {\r\n//       setFileNames([...fileNames, ...selectedFiles.map((file) => file.name)]);\r\n//       setFiles([...files, ...selectedFiles]);\r\n//     }\r\n//   };\r\n\r\n//   const handleCategoryChange = (e) => {\r\n//     const selectedCategory = e.target.value;\r\n//     setCategory(selectedCategory);\r\n\r\n//     // Reset the subCategory field when category changes\r\n//     const selectedCategoryObject = categories.find((cat) => cat.name === selectedCategory);\r\n//     if (!selectedCategoryObject?.subcategories.length) {\r\n//       setSubCategory(\"\");\r\n//     }\r\n//   };\r\n\r\n//   const handleRemoveFile = (index) => {\r\n//     const newFileNames = [...fileNames];\r\n//     const newFiles = [...files];\r\n//     newFileNames.splice(index, 1);\r\n//     newFiles.splice(index, 1);\r\n//     setFileNames(newFileNames);\r\n//     setFiles(newFiles);\r\n//   };\r\n\r\n//   const handlePost = async () => {\r\n//     const formData = new FormData();\r\n//     formData.append(\"title\", title);\r\n//     formData.append(\"description\", description);\r\n//     formData.append(\"category\", category);\r\n//     formData.append(\"subCategory\", subCategory);\r\n//     formData.append(\"uploaderEmail\", uploaderEmail);\r\n\r\n//     if (files.length === 0) {\r\n//       alert(\"Please upload at least one file.\");\r\n//       return;\r\n//     }\r\n\r\n//     files.forEach((file) => {\r\n//       formData.append(\"media\", file);\r\n//     });\r\n\r\n//     try {\r\n//       await axios.post(\"http://localhost:3000/upload\", formData, {\r\n//         headers: {\r\n//           \"Content-Type\": \"multipart/form-data\",\r\n//         },\r\n//       });\r\n\r\n//       alert(\"Post submitted successfully!\");\r\n//     } catch (err) {\r\n//       console.error(\"Error during post submission:\", err.response || err);\r\n//       alert(\"Failed to submit post!\");\r\n//     }\r\n//   };\r\n\r\n//   const handleSaveToDrafts = async () => {\r\n//     const draftData = {\r\n//       title,\r\n//       description,\r\n//       category,\r\n//       subCategory,\r\n//       uploaderEmail,\r\n//       files: fileNames,\r\n//     };\r\n\r\n//     // Simulate saving draft (you could save this to a backend or local storage)\r\n//     console.log(\"Saving to drafts:\", draftData);\r\n//     alert(\"Draft saved successfully!\");\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <h2>New Post</h2>\r\n//       <form>\r\n//         <div className=\"file-upload\">\r\n//           <label htmlFor=\"fileInput\">\r\n//             {fileNames.length > 0 ? fileNames.join(\", \") : \"Click to browse or drop files here\"}\r\n//           </label>\r\n//           <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple />\r\n//         </div>\r\n\r\n//         <div className=\"uploaded-files\">\r\n//           {fileNames.length > 0 && (\r\n//             <ul>\r\n//               {fileNames.map((fileName, index) => (\r\n//                 <li key={index} className=\"file-item\">\r\n//                   {fileName}\r\n//                   <span className=\"remove-icon\" onClick={() => handleRemoveFile(index)}>Ã—</span>\r\n//                 </li>\r\n//               ))}\r\n//             </ul>\r\n//           )}\r\n//         </div>\r\n\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Enter title for the file\"\r\n//           value={title}\r\n//           onChange={(e) => setTitle(e.target.value)}\r\n//           required\r\n//         />\r\n\r\n//         <textarea\r\n//           placeholder=\"Write a description\"\r\n//           value={description}\r\n//           onChange={(e) => setDescription(e.target.value)}\r\n//           required\r\n//         ></textarea>\r\n\r\n//         <input\r\n//           type=\"email\"\r\n//           placeholder=\"Enter your email\"\r\n//           value={uploaderEmail}\r\n//           onChange={(e) => setUploaderEmail(e.target.value)}\r\n//           required\r\n//         />\r\n\r\n//         <select value={category} onChange={handleCategoryChange} required>\r\n//           <option value=\"\" disabled>Select a category</option>\r\n//           {categories.map((cat) => (\r\n//             <option key={cat.name} value={cat.name}>\r\n//               {cat.name}\r\n//             </option>\r\n//           ))}\r\n//         </select>\r\n\r\n//         <select\r\n//           value={subCategory}\r\n//           onChange={(e) => setSubCategory(e.target.value)}\r\n//           disabled={!categories.find((cat) => cat.name === category)?.subcategories.length}\r\n//           required\r\n//         >\r\n//           <option value=\"\" disabled>Select a subcategory</option>\r\n//           {categories\r\n//             .find((cat) => cat.name === category)\r\n//             ?.subcategories.map((subcat) => (\r\n//               <option key={subcat} value={subcat}>\r\n//                 {subcat}\r\n//               </option>\r\n//             ))}\r\n//         </select>\r\n\r\n//         <div className=\"button-container\">\r\n//           <button type=\"button\" onClick={handlePost} className=\"post-btn\">Post</button>\r\n//           <button type=\"button\" onClick={handleSaveToDrafts} className=\"draft-btn\">Save to Drafts</button>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default NewPost;\r\n\r\nimport React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport './NewPost.css';\r\n\r\nconst categories = [\r\n  { name: \"Club\", subcategories: [\"RMF\", \"Splash Out\", \"Rhythmic Thunders\", \"VPOD\", \"Happy Club\"] },\r\n  { name: \"Academics\", subcategories: [\"First year\", \"Second year\", \"Third year\", \"Fourth year\"] },\r\n  { name: \"Notices\", subcategories: [] },\r\n  { name: \"Skill Hub\", subcategories: [\"Hackathons\",\"Coding contests\",\"Training Programs\"] },\r\n  { name: \"Events\", subcategories: [] },\r\n  { name: \"Placements\", subcategories: [] },\r\n];\r\n\r\nconst NewPost = () => {\r\n  const [fileNames, setFileNames] = useState([]);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const [subCategory, setSubCategory] = useState(\"\");\r\n  const [uploaderEmail, setUploaderEmail] = useState(\"\");\r\n\r\n  const handleFileChange = (event) => {\r\n    const files = Array.from(event.target.files);\r\n    if (files) {\r\n      setFileNames(files.map((file) => file.name));\r\n    }\r\n  };\r\n\r\n  const handleCategoryChange = (e) => {\r\n    const selectedCategory = e.target.value;\r\n    setCategory(selectedCategory);\r\n\r\n    // Reset the subCategory field when category changes\r\n    const selectedCategoryObject = categories.find((cat) => cat.name === selectedCategory);\r\n    if (!selectedCategoryObject?.subcategories.length) {\r\n      setSubCategory(\"\");\r\n    }\r\n  };\r\n\r\n  const handlePost = async () => {\r\n    const formData = new FormData();\r\n    formData.append(\"title\", title);\r\n    formData.append(\"description\", description);\r\n    formData.append(\"category\", category);\r\n    formData.append(\"subCategory\", subCategory);\r\n    formData.append(\"uploaderEmail\", uploaderEmail);\r\n\r\n    const files = document.getElementById(\"fileInput\").files;\r\n\r\n    if (!files.length) {\r\n      alert(\"Please upload at least one file.\");\r\n      return;\r\n    }\r\n\r\n    Array.from(files).forEach((file) => {\r\n      formData.append(\"media\", file);\r\n    });\r\n\r\n    try {\r\n      await axios.post(\"http://localhost:3000/upload\", formData, {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      });\r\n\r\n      alert(\"Post submitted successfully!\");\r\n    } catch (err) {\r\n      console.error(\"Error during post submission:\", err.response || err);\r\n      alert(\"Failed to submit post!\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>New Post</h2>\r\n      <form>\r\n        <div className=\"file-upload\">\r\n          <label htmlFor=\"fileInput\">\r\n            {fileNames.length > 0 ? fileNames.join(\", \") : \"Click to browse or drop files here\"}\r\n          </label>\r\n          <input type=\"file\" id=\"fileInput\" onChange={handleFileChange} multiple />\r\n        </div>\r\n\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter title for the file\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <textarea\r\n          placeholder=\"Write a description\"\r\n          value={description}\r\n          onChange={(e) => setDescription(e.target.value)}\r\n          required\r\n        ></textarea>\r\n\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"Enter your email\"\r\n          value={uploaderEmail}\r\n          onChange={(e) => setUploaderEmail(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <select value={category} onChange={handleCategoryChange} required>\r\n          <option value=\"\" disabled>Select a category</option>\r\n          {categories.map((cat) => (\r\n            <option key={cat.name} value={cat.name}>\r\n              {cat.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <select\r\n          value={subCategory}\r\n          onChange={(e) => setSubCategory(e.target.value)}\r\n          disabled={!categories.find((cat) => cat.name === category)?.subcategories.length}\r\n          required\r\n        >\r\n          <option value=\"\" disabled>Select a subcategory</option>\r\n          {categories\r\n            .find((cat) => cat.name === category)\r\n            ?.subcategories.map((subcat) => (\r\n              <option key={subcat} value={subcat}>\r\n                {subcat}\r\n              </option>\r\n            ))}\r\n        </select>\r\n\r\n        <button type=\"button\" onClick={handlePost}>Post</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}