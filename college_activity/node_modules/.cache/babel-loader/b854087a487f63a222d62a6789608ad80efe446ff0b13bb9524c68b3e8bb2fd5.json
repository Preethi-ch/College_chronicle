{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axiosInstance from \"./api/axiosfetch\";\n// import { Carousel } from \"react-responsive-carousel\";\n// import \"react-responsive-carousel/lib/styles/carousel.min.css\";\n// import \"./Postspage.css\";\n\n// const Postspage = ({ userEmail }) => {\n//   const [posts, setPosts] = useState([]);\n//   const navigate = useNavigate();\n\n//   // Fetch posts on component load\n//   useEffect(() => {\n//     const email = userEmail || localStorage.getItem(\"userEmail\");\n\n//     if (!email) {\n//       return;\n//     }\n\n//     const fetchPosts = async () => {\n//       try {\n//         const url = `/postview/${encodeURIComponent(email)}`;\n//         const response = await axiosInstance.get(url);\n//         setPosts(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching posts:\", error);\n//       }\n//     };\n\n//     fetchPosts();\n//   }, [userEmail]); // Removed axiosInstance as a dependency\n\n//   // Delete post handler\n//   const handleDelete = async (postId) => {\n//     try {\n//       console.log(\"Attempting to delete post with ID:\", postId);\n\n//       const confirmation = window.confirm(\n//         \"Are you sure you want to delete this post?\"\n//       );\n//       if (!confirmation) return;\n\n//       await axiosInstance.delete(`/postview/${postId}`);\n//       alert(\"Post deleted successfully\");\n\n//       // Update the state to reflect the deletion\n//       setPosts(posts.filter((post) => post._id !== postId));\n//     } catch (error) {\n//       console.error(\"Error deleting post:\", error);\n//       alert(\"Failed to delete post.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"posts-container-postpage\">\n//       <h1>User Posts</h1>\n\n//       {/* New Post Button */}\n//       <button\n//         className=\"new-post-button-postpage\"\n//         onClick={() => navigate(\"/Newpost\")}\n//       >\n//         New Post\n//       </button>\n\n//       {/* Feed Section */}\n//       <div className=\"feed-section-postpage\">\n//         <h2>Feed</h2>\n//         <div className=\"feed-grid-postpage\">\n//           {posts.length === 0 ? (\n//             <p>No posts available.</p>\n//           ) : (\n//             posts.map((post) => (\n//               <div className=\"feed-item-postpage\" key={post._id}>\n//                 <div className=\"feed-image-postpage\">\n//                   {post.media.length > 0 && post.media[0].url && (\n//                     <Carousel\n//                       showThumbs={false}\n//                       infiniteLoop={true}\n//                       autoPlay={true}\n//                       interval={5000}\n//                       showStatus={false}\n//                     >\n//                       {post.media.map((media, idx) => {\n//                         if (media.type.startsWith(\"image/\")) {\n//                           return (\n//                             <div key={idx}>\n//                               <img\n//                                 src={media.url}\n//                                 alt={`${post.title} ${idx}`}\n//                                 style={{ objectFit: \"cover\", width: \"100%\" }}\n//                               />\n//                             </div>\n//                           );\n//                         } else if (media.type === \"application/pdf\") {\n//                           return (\n//                             <div key={idx} className=\"pdf-container-postpage\">\n//                               <iframe\n//                                 src={`https://docs.google.com/gview?url=${media.url}&embedded=true`}\n//                                 title=\"PDF Viewer\"\n//                                 width=\"100%\"\n//                                 height=\"500px\"\n//                                 style={{ border: \"none\" }}\n//                               ></iframe>\n//                             </div>\n//                           );\n//                         } else if (media.type === \"video/mp4\") {\n//                           return (\n//                             <div key={idx} className=\"video-container-postpage\">\n//                               <video\n//                                 src={media.url}\n//                                 controls\n//                                 style={{ width: \"100%\", height: \"auto\" }}\n//                               />\n//                             </div>\n//                           );\n//                         }\n//                         return null;\n//                       })}\n//                     </Carousel>\n//                   )}\n//                 </div>\n//                 <div className=\"feed-content-postpage\">\n//                   <h3>{post.title}</h3>\n//                   <p>{post.description}</p>\n//                   {post.link && (\n//                     <a\n//                       href={post.link}\n//                       target=\"_blank\"\n//                       rel=\"noopener noreferrer\"\n//                       className=\"post-link-postpage\"\n//                     >\n//                       {post.link}\n//                     </a>\n//                   )}\n//                 </div>\n//                 <button\n//                   className=\"delete-post-button-postpage\"\n//                   onClick={() => handleDelete(post._id)}\n//                 >\n//                   Delete\n//                 </button>\n//               </div>\n//             ))\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Postspage;\n\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axiosInstance from \"./api/axiosfetch\";\n// import { Carousel } from \"react-responsive-carousel\";\n// import \"react-responsive-carousel/lib/styles/carousel.min.css\";\n// import \"./Postspage.css\";\n\n// const Postspage = ({ userEmail }) => {\n//   const [posts, setPosts] = useState([]);\n//   const navigate = useNavigate();\n//   const [sortOrder, setSortOrder] = useState(\"desc\");\n//   const [showFilterOptions, setShowFilterOptions] = useState(false);\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [fullscreenImage, setFullscreenImage] = useState(null);\n\n//   useEffect(() => {\n//     const email = userEmail || localStorage.getItem(\"userEmail\");\n\n//     if (!email) {\n//       return;\n//     }\n\n//     const fetchPosts = async () => {\n//       try {\n//         const url = `/postview/${encodeURIComponent(email)}`;\n//         const response = await axiosInstance.get(url);\n//         setPosts(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching posts:\", error);\n//       }\n//     };\n\n//     fetchPosts();\n//   }, [userEmail]);\n\n//   const filteredPosts = posts.filter((post) => {\n//     const searchString = searchTerm.toLowerCase();\n//     return Object.values(post).some((value) => {\n//       if (typeof value === \"string\") {\n//         return value.toLowerCase().includes(searchString);\n//       } else if (Array.isArray(value)) {\n//         return value.some(\n//           (item) =>\n//             typeof item === \"string\" && item.toLowerCase().includes(searchString)\n//         );\n//       }\n//       return false;\n//     });\n//   });\n\n//   const sortedPosts = filteredPosts.sort((a, b) => {\n//     return sortOrder === \"desc\"\n//       ? new Date(b.createdAt) - new Date(a.createdAt)\n//       : new Date(a.createdAt) - new Date(b.createdAt);\n//   });\n\n//   useEffect(() => {\n//     const handleKeyDown = (event) => {\n//       if (event.key === \"Escape\") {\n//         setFullscreenImage(null);\n//       }\n//     };\n//     window.addEventListener(\"keydown\", handleKeyDown);\n//     return () => window.removeEventListener(\"keydown\", handleKeyDown);\n//   }, [fullscreenImage]);\n\n//   const handleDelete = async (postId) => {\n//     try {\n//       const confirmation = window.confirm(\n//         \"Are you sure you want to delete this post?\"\n//       );\n//       if (!confirmation) return;\n\n//       await axiosInstance.delete(`/postview/${postId}`);\n//       alert(\"Post deleted successfully\");\n//       setPosts(posts.filter((post) => post._id !== postId));\n//     } catch (error) {\n//       console.error(\"Error deleting post:\", error);\n//       alert(\"Failed to delete post.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"posts-container-postpage\">\n//       <h1>User Posts</h1>\n//       <div className=\"feed-header-postpage\">\n//         <input\n//           type=\"text\"\n//           className=\"search-bar-postpage\"\n//           placeholder=\"Search posts...\"\n//           value={searchTerm}\n//           onChange={(e) => setSearchTerm(e.target.value)}\n//         />\n//         {searchTerm && (\n//           <button\n//             className=\"clear-search-postpage\"\n//             onClick={() => setSearchTerm(\"\")}\n//           >\n//             ×\n//           </button>\n//         )}\n//         <div className=\"filter-container-postpage\">\n//           <button\n//             className=\"filter-button-postpage\"\n//             onClick={() => setShowFilterOptions(!showFilterOptions)}\n//           >\n//             Filter ⌵\n//           </button>\n//           {showFilterOptions && (\n//             <div className=\"filter-dropdown-postpage\">\n//               <button\n//                 onClick={() => {\n//                   setSortOrder(\"desc\");\n//                   setShowFilterOptions(false);\n//                 }}\n//               >\n//                 Newest First\n//               </button>\n//               <button\n//                 onClick={() => {\n//                   setSortOrder(\"asc\");\n//                   setShowFilterOptions(false);\n//                 }}\n//               >\n//                 Oldest First\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//         <button\n//           className=\"new-post-button-postpage\"\n//           onClick={() => navigate(\"/Newpost\")}\n//         >\n//           New Post\n//         </button>\n//       </div>\n\n//       {/* Feed Section */}\n//       <div className=\"feed-section-postpage\">\n//         <h2>Feed</h2>\n//         <div className=\"feed-grid-postpage\">\n//           {sortedPosts.length === 0 ? (\n//             <p>No posts available.</p>\n//           ) : (\n//             sortedPosts.map((post) => (\n//               <div className=\"feed-item-postpage\" key={post._id}>\n//                 <div className=\"feed-image-postpage\">\n//                   {post.media.length > 0 && post.media[0].url && (\n//                     <Carousel\n//                       showThumbs={false}\n//                       infiniteLoop={true}\n//                       autoPlay={true}\n//                       interval={5000}\n//                       showStatus={false}\n//                     >\n//                       {post.media.map((media, idx) => {\n//                         if (media.type.startsWith(\"image/\")) {\n//                           return (\n//                             <div key={idx}>\n//                               <img\n//                                 src={media.url}\n//                                 alt={`${post.title} ${idx}`}\n//                                 style={{ objectFit: \"cover\", width: \"100%\" }}\n//                                 onClick={() => setFullscreenImage(media.url)}\n//                               />\n//                             </div>\n//                           );\n//                         } else if (media.type === \"application/pdf\") {\n//                           return (\n//                             <div key={idx} className=\"pdf-container-postpage\">\n//                               <iframe\n//                                 src={`https://docs.google.com/gview?url=${media.url}&embedded=true`}\n//                                 title=\"PDF Viewer\"\n//                                 width=\"100%\"\n//                                 height=\"500px\"\n//                                 style={{ border: \"none\" }}\n//                               ></iframe>\n//                             </div>\n//                           );\n//                         } else if (media.type === \"video/mp4\") {\n//                           return (\n//                             <div key={idx} className=\"video-container-postpage\">\n//                               <video\n//                                 src={media.url}\n//                                 controls\n//                                 style={{ width: \"100%\", height: \"auto\" }}\n//                               />\n//                             </div>\n//                           );\n//                         }\n//                         return null;\n//                       })}\n//                     </Carousel>\n//                   )}\n//                 </div>\n//                 <div className=\"feed-content-postpage\">\n//                   <h3>{post.title}</h3>\n//                   <p>{post.description}</p>\n//                   {post.link && (\n//                     <a\n//                       href={post.link}\n//                       target=\"_blank\"\n//                       rel=\"noopener noreferrer\"\n//                       className=\"post-link-postpage\"\n//                     >\n//                       {post.link}\n//                     </a>\n//                   )}\n//                 </div>\n//                 <button\n//                   className=\"delete-post-button-postpage\"\n//                   onClick={() => handleDelete(post._id)}\n//                 >\n//                   Delete\n//                 </button>\n//               </div>\n//             ))\n//           )}\n//         </div>\n//       </div>\n\n//       {/* Fullscreen Image Overlay */}\n//       {fullscreenImage && (\n//         <div\n//           className=\"fullscreen-overlay-postpage\"\n//           onClick={() => setFullscreenImage(null)}\n//         >\n//           <span\n//             className=\"close-button-postpage\"\n//             onClick={() => setFullscreenImage(null)}\n//           >\n//             ×\n//           </span>\n//           <img\n//             src={fullscreenImage}\n//             alt=\"Full-Screen Preview\"\n//             className=\"fullscreen-image-postpage\"\n//           />\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Postspage;\n\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axiosInstance from \"./api/axiosfetch\";\n// import { Carousel } from \"react-responsive-carousel\";\n// import \"react-responsive-carousel/lib/styles/carousel.min.css\";\n// import \"./Postspage.css\";\n\n// const Postspage = ({ userEmail }) => {\n//   const [posts, setPosts] = useState([]);\n//   const navigate = useNavigate();\n//   const [sortOrder, setSortOrder] = useState(\"desc\");\n//   const [showFilterOptions, setShowFilterOptions] = useState(false);\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [fullscreenImage, setFullscreenImage] = useState(null);\n\n//   useEffect(() => {\n//     const email = userEmail || localStorage.getItem(\"userEmail\");\n\n//     if (!email) {\n//       return;\n//     }\n\n//     const fetchPosts = async () => {\n//       try {\n//         const url = `/postview/${encodeURIComponent(email)}`;\n//         const response = await axiosInstance.get(url);\n//         setPosts(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching posts:\", error);\n//       }\n//     };\n\n//     fetchPosts();\n//   }, [userEmail]);\n\n//   const filteredPosts = posts.filter((post) => {\n//     const searchString = searchTerm.toLowerCase();\n//     return Object.values(post).some((value) => {\n//       if (typeof value === \"string\") {\n//         return value.toLowerCase().includes(searchString);\n//       } else if (Array.isArray(value)) {\n//         return value.some(\n//           (item) =>\n//             typeof item === \"string\" && item.toLowerCase().includes(searchString)\n//         );\n//       }\n//       return false;\n//     });\n//   });\n\n//   const sortedPosts = filteredPosts.sort((a, b) => {\n//     return sortOrder === \"desc\"\n//       ? new Date(b.createdAt) - new Date(a.createdAt)\n//       : new Date(a.createdAt) - new Date(b.createdAt);\n//   });\n\n//   useEffect(() => {\n//     const handleKeyDown = (event) => {\n//       if (event.key === \"Escape\") {\n//         setFullscreenImage(null);\n//       }\n//     };\n//     window.addEventListener(\"keydown\", handleKeyDown);\n//     return () => window.removeEventListener(\"keydown\", handleKeyDown);\n//   }, [fullscreenImage]);\n\n//   const handleDelete = async (postId) => {\n//     try {\n//       const confirmation = window.confirm(\n//         \"Are you sure you want to delete this post?\"\n//       );\n//       if (!confirmation) return;\n\n//       await axiosInstance.delete(`/postview/${postId}`);\n//       alert(\"Post deleted successfully\");\n//       setPosts(posts.filter((post) => post._id !== postId));\n//     } catch (error) {\n//       console.error(\"Error deleting post:\", error);\n//       alert(\"Failed to delete post.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"posts-container-postpage\">\n//       <div className=\"feed-header-postpage\">\n//         <input\n//           type=\"text\"\n//           className=\"search-bar-postpage\"\n//           placeholder=\"Search posts...\"\n//           value={searchTerm}\n//           onChange={(e) => setSearchTerm(e.target.value)}\n//         />\n//         {searchTerm && (\n//           <button\n//             className=\"clear-search-postpage\"\n//             onClick={() => setSearchTerm(\"\")}\n//           >\n//             ×\n//           </button>\n//         )}\n//         <div className=\"filter-container-postpage\">\n//           <button\n//             className=\"filter-button-postpage\"\n//             onClick={() => setShowFilterOptions(!showFilterOptions)}\n//           >\n//             Filter ⌵\n//           </button>\n//           {showFilterOptions && (\n//             <div className=\"filter-dropdown-postpage\">\n//               <button\n//                 onClick={() => {\n//                   setSortOrder(\"desc\");\n//                   setShowFilterOptions(false);\n//                 }}\n//               >\n//                 Newest First\n//               </button>\n//               <button\n//                 onClick={() => {\n//                   setSortOrder(\"asc\");\n//                   setShowFilterOptions(false);\n//                 }}\n//               >\n//                 Oldest First\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//         <button\n//           className=\"new-post-button-postpage\"\n//           onClick={() => navigate(\"/Newpost\")}\n//         >\n//           New Post\n//         </button>\n//       </div>\n\n//       <div className=\"feed-section-postpage\">\n//         <div className=\"feed-grid-postpage\">\n//           {sortedPosts.length === 0 ? (\n//             <p>No posts available.</p>\n//           ) : (\n//             sortedPosts.map((post) => (\n//               <div className=\"feed-item-postpage\" key={post._id}>\n//                 <div className=\"feed-image-postpage\">\n//                   {post.media.length > 0 && post.media[0].url && (\n//                     <Carousel\n//                       showThumbs={false}\n//                       infiniteLoop={true}\n//                       autoPlay={true}\n//                       interval={5000}\n//                       showStatus={false}\n//                     >\n//                       {post.media.map((media, idx) => {\n//                         if (media.type.startsWith(\"image/\")) {\n//                           return (\n//                             <div key={idx}>\n//                               <img\n//                                 src={media.url}\n//                                 alt={`${post.title} ${idx}`}\n//                                 style={{ objectFit: \"cover\", width: \"100%\" }}\n//                                 onClick={() => setFullscreenImage(media.url)}\n//                               />\n//                             </div>\n//                           );\n//                         } else if (media.type === \"application/pdf\") {\n//                           return (\n//                             <div key={idx} className=\"pdf-container-postpage\">\n//                               <iframe\n//                                 src={`https://docs.google.com/gview?url=${media.url}&embedded=true`}\n//                                 title=\"PDF Viewer\"\n//                                 width=\"100%\"\n//                                 height=\"500px\"\n//                                 style={{ border: \"none\" }}\n//                               ></iframe>\n//                             </div>\n//                           );\n//                         } else if (media.type === \"video/mp4\") {\n//                           return (\n//                             <div key={idx} className=\"video-container-postpage\">\n//                               <video\n//                                 src={media.url}\n//                                 controls\n//                                 style={{ width: \"100%\", height: \"auto\" }}\n//                               />\n//                             </div>\n//                           );\n//                         }\n//                         return null;\n//                       })}\n//                     </Carousel>\n//                   )}\n//                 </div>\n//                 <div className=\"feed-content-postpage\">\n//                   <h3>{post.title}</h3>\n//                   <p>{post.description}</p>\n//                   {post.link && (\n//                     <a\n//                       href={post.link}\n//                       target=\"_blank\"\n//                       rel=\"noopener noreferrer\"\n//                       className=\"post-link-postpage\"\n//                     >\n//                       {post.link}\n//                     </a>\n//                   )}\n//                 </div>\n//                 <button\n//                   className=\"delete-post-button-postpage\"\n//                   onClick={() => handleDelete(post._id)}\n//                 >\n//                   Delete\n//                 </button>\n//               </div>\n//             ))\n//           )}\n//         </div>\n//       </div>\n\n//       {fullscreenImage && (\n//         <div\n//           className=\"fullscreen-overlay-postpage\"\n//           onClick={() => setFullscreenImage(null)}\n//         >\n//           <span\n//             className=\"close-button-postpage\"\n//             onClick={() => setFullscreenImage(null)}\n//           >\n//             ×\n//           </span>\n//           <img\n//             src={fullscreenImage}\n//             alt=\"Full-Screen Preview\"\n//             className=\"fullscreen-image-postpage\"\n//           />\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Postspage;\n\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axiosInstance from \"./api/axiosfetch\";\n// import { Carousel } from \"react-responsive-carousel\";\n// import \"react-responsive-carousel/lib/styles/carousel.min.css\";\n// import \"./Postspage.css\";\n\n// const Postspage = ({ userEmail }) => {\n//   const [posts, setPosts] = useState([]);\n//   const navigate = useNavigate();\n//   const [sortOrder, setSortOrder] = useState(\"desc\");\n//   const [showFilterOptions, setShowFilterOptions] = useState(false);\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [fullscreenImage, setFullscreenImage] = useState(null);\n\n//   useEffect(() => {\n//     const email = userEmail || localStorage.getItem(\"userEmail\");\n\n//     if (!email) {\n//       return;\n//     }\n\n//     const fetchPosts = async () => {\n//       try {\n//         const url = `/postview/${encodeURIComponent(email)}`;\n//         const response = await axiosInstance.get(url);\n//         setPosts(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching posts:\", error);\n//       }\n//     };\n\n//     fetchPosts();\n//   }, [userEmail]);\n\n//   const filteredPosts = posts.filter((post) => {\n//     const searchString = searchTerm.toLowerCase();\n//     return Object.values(post).some((value) => {\n//       if (typeof value === \"string\") {\n//         return value.toLowerCase().includes(searchString);\n//       } else if (Array.isArray(value)) {\n//         return value.some(\n//           (item) =>\n//             typeof item === \"string\" && item.toLowerCase().includes(searchString)\n//         );\n//       }\n//       return false;\n//     });\n//   });\n\n//   const sortedPosts = filteredPosts.sort((a, b) => {\n//     return sortOrder === \"desc\"\n//       ? new Date(b.createdAt) - new Date(a.createdAt)\n//       : new Date(a.createdAt) - new Date(b.createdAt);\n//   });\n\n//   useEffect(() => {\n//     const handleKeyDown = (event) => {\n//       if (event.key === \"Escape\") {\n//         setFullscreenImage(null);\n//       }\n//     };\n//     window.addEventListener(\"keydown\", handleKeyDown);\n//     return () => window.removeEventListener(\"keydown\", handleKeyDown);\n//   }, []);\n\n//   const handleDelete = async (postId) => {\n//     try {\n//       const confirmation = window.confirm(\n//         \"Are you sure you want to delete this post?\"\n//       );\n//       if (!confirmation) return;\n\n//       await axiosInstance.delete(`/postview/${postId}`);\n//       alert(\"Post deleted successfully\");\n//       setPosts(posts.filter((post) => post._id !== postId));\n//     } catch (error) {\n//       console.error(\"Error deleting post:\", error);\n//       alert(\"Failed to delete post.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"posts-container-postpage\">\n//       <div className=\"feed-header-postpage\">\n//         <input\n//           type=\"text\"\n//           className=\"search-bar-postpage\"\n//           placeholder=\"Search posts...\"\n//           value={searchTerm}\n//           onChange={(e) => setSearchTerm(e.target.value)}\n//         />\n//         {searchTerm && (\n//           <button\n//             className=\"clear-search-postpage\"\n//             onClick={() => setSearchTerm(\"\")}\n//           >\n//             ×\n//           </button>\n//         )}\n//         <div className=\"filter-container-postpage\">\n//           <button\n//             className=\"filter-button-postpage\"\n//             onClick={() => setShowFilterOptions(!showFilterOptions)}\n//           >\n//             Filter ⌵\n//           </button>\n//           {showFilterOptions && (\n//             <div className=\"filter-dropdown-postpage\">\n//               <button\n//                 onClick={() => {\n//                   setSortOrder(\"desc\");\n//                   setShowFilterOptions(false);\n//                 }}\n//               >\n//                 Newest First\n//               </button>\n//               <button\n//                 onClick={() => {\n//                   setSortOrder(\"asc\");\n//                   setShowFilterOptions(false);\n//                 }}\n//               >\n//                 Oldest First\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//         <button\n//           className=\"new-post-button-postpage\"\n//           onClick={() => navigate(\"/Newpost\")}\n//         >\n//           New Post\n//         </button>\n//       </div>\n\n//       <div className=\"feed-section-postpage\">\n//         <div className=\"feed-grid-postpage\">\n//           {sortedPosts.length === 0 ? (\n//             <p>No posts available.</p>\n//           ) : (\n//             sortedPosts.map((post) => (\n//               <div className=\"feed-item-postpage\" key={post._id}>\n//                 <div className=\"feed-image-postpage\">\n//                   {post.media.length > 0 && post.media[0].url && (\n//                     <Carousel\n//                       showThumbs={false}\n//                       infiniteLoop={true}\n//                       autoPlay={true}\n//                       interval={5000}\n//                       showStatus={false}\n//                     >\n//                       {post.media.map((media, idx) => {\n//                         if (media.type.startsWith(\"image/\")) {\n//                           return (\n//                             <div key={idx}>\n//                               <img\n//                                 src={media.url}\n//                                 alt={`${post.title} ${idx}`}\n//                                 style={{ objectFit: \"cover\", width: \"100%\" }}\n//                                 onClick={() => setFullscreenImage(media.url)}\n//                               />\n//                             </div>\n//                           );\n//                         }\n//                         return null;\n//                       })}\n//                     </Carousel>\n//                   )}\n//                 </div>\n//                 <div className=\"feed-content-postpage\">\n//                   <h3>{post.title}</h3>\n//                   <p>{post.description}</p>\n//                   {post.link && (\n//                     <a\n//                       href={post.link}\n//                       target=\"_blank\"\n//                       rel=\"noopener noreferrer\"\n//                       className=\"post-link-postpage\"\n//                     >\n//                       {post.link}\n//                     </a>\n//                   )}\n//                 </div>\n//                 <button\n//                   className=\"delete-post-button-postpage\"\n//                   onClick={() => handleDelete(post._id)}\n//                 >\n//                   Delete\n//                 </button>\n//               </div>\n//             ))\n//           )}\n//         </div>\n//       </div>\n\n//        {fullscreenImage && (\n//         <div className=\"fullscreen-overlay-postpage\" onClick={() => setFullscreenImage(null)}>\n//           <span className=\"close-button-postpage\" onClick={() => setFullscreenImage(null)}>\n//             ×\n//           </span>\n//           <img src={fullscreenImage} alt=\"Full-Screen Preview\" className=\"fullscreen-image-postpage\" />\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Postspage;\n\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axiosInstance from \"./api/axiosfetch\";\n// import { Carousel } from \"react-responsive-carousel\";\n// import \"react-responsive-carousel/lib/styles/carousel.min.css\";\n// import \"./Postspage.css\";\n\n// const Postspage = ({ userEmail }) => {\n//   const [posts, setPosts] = useState([]);\n//   const navigate = useNavigate();\n//   const [sortOrder, setSortOrder] = useState(\"desc\");\n//   const [showFilterOptions, setShowFilterOptions] = useState(false);\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [fullscreenImage, setFullscreenImage] = useState(null);\n\n//   useEffect(() => {\n//     const email = userEmail || localStorage.getItem(\"userEmail\");\n\n//     if (!email) {\n//       return;\n//     }\n\n//     const fetchPosts = async () => {\n//       try {\n//         const url = `/postview/${encodeURIComponent(email)}`;\n//         const response = await axiosInstance.get(url);\n//         setPosts(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching posts:\", error);\n//       }\n//     };\n\n//     fetchPosts();\n//   }, [userEmail]);\n\n//   const filteredPosts = posts.filter((post) => {\n//     const searchString = searchTerm.toLowerCase();\n//     return Object.values(post).some((value) => {\n//       if (typeof value === \"string\") {\n//         return value.toLowerCase().includes(searchString);\n//       } else if (Array.isArray(value)) {\n//         return value.some(\n//           (item) =>\n//             typeof item === \"string\" && item.toLowerCase().includes(searchString)\n//         );\n//       }\n//       return false;\n//     });\n//   });\n\n//   const sortedPosts = filteredPosts.sort((a, b) => {\n//     return sortOrder === \"desc\"\n//       ? new Date(b.createdAt) - new Date(a.createdAt)\n//       : new Date(a.createdAt) - new Date(b.createdAt);\n//   });\n\n//   useEffect(() => {\n//     const handleKeyDown = (event) => {\n//       if (event.key === \"Escape\") {\n//         setFullscreenImage(null);\n//       }\n//     };\n//     window.addEventListener(\"keydown\", handleKeyDown);\n//     return () => window.removeEventListener(\"keydown\", handleKeyDown);\n//   }, []);\n\n//   const handleDelete = async (postId) => {\n//     try {\n//       const confirmation = window.confirm(\n//         \"Are you sure you want to delete this post?\"\n//       );\n//       if (!confirmation) return;\n\n//       await axiosInstance.delete(`/postview/${postId}`);\n//       alert(\"Post deleted successfully\");\n//       setPosts(posts.filter((post) => post._id !== postId));\n//     } catch (error) {\n//       console.error(\"Error deleting post:\", error);\n//       alert(\"Failed to delete post.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"posts-container-postpage\">\n//       <div className=\"feed-header-postpage\">\n//         <input\n//           type=\"text\"\n//           className=\"search-bar-postpage\"\n//           placeholder=\"Search posts...\"\n//           value={searchTerm}\n//           onChange={(e) => setSearchTerm(e.target.value)}\n//         />\n//         {searchTerm && (\n//           <button\n//             className=\"clear-search-postpage\"\n//             onClick={() => setSearchTerm(\"\")}\n//           >\n//             ×\n//           </button>\n//         )}\n//         <div className=\"filter-container-postpage\">\n//           <button\n//             className=\"filter-button-postpage\"\n//             onClick={() => setShowFilterOptions(!showFilterOptions)}\n//           >\n//             Filter ⌵\n//           </button>\n//           {showFilterOptions && (\n//             <div className=\"filter-dropdown-postpage\">\n//               <button\n//                 onClick={() => {\n//                   setSortOrder(\"desc\");\n//                   setShowFilterOptions(false);\n//                 }}\n//               >\n//                 Newest First\n//               </button>\n//               <button\n//                 onClick={() => {\n//                   setSortOrder(\"asc\");\n//                   setShowFilterOptions(false);\n//                 }}\n//               >\n//                 Oldest First\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//         <button\n//           className=\"new-post-button-postpage\"\n//           onClick={() => navigate(\"/Newpost\")}\n//         >\n//           New Post\n//         </button>\n//       </div>\n\n//       <div className=\"feed-grid-postpage\">\n//         {sortedPosts.length > 0 ? (\n//           sortedPosts.map((post, index) => (\n//             <div className=\"feed-item-postpage\" key={index}>\n//               <div className=\"feed-image-postpage\">\n//                 {post.media?.length > 0 && post.media[0]?.url && (\n//                   <Carousel\n//                     showThumbs={false}\n//                     infiniteLoop\n//                     autoPlay\n//                     interval={5000}\n//                     showStatus={false}\n//                   >\n//                     {post.media.map((media, idx) => (\n//                       <div key={idx} className=\"carousel-item-postpage\">\n//                         {media.type.startsWith(\"image/\") ? (\n//                           <div\n//                             onClick={() => setFullscreenImage(media.url)}\n//                             style={{ cursor: \"pointer\" }}\n//                           >\n//                             <img\n//                               src={media.url}\n//                               alt={`${post.title} ${idx}`}\n//                               style={{ objectFit: \"cover\", width: \"100%\" }}\n//                             />\n//                           </div>\n//                         ) : media.type === \"video/mp4\" ? (\n//                           <video\n//                             src={media.url}\n//                             controls\n//                             style={{ width: \"100%\", height: \"auto\" }}\n//                           />\n//                         ) : media.type === \"application/pdf\" ? (\n//                           <div className=\"pdf-container-postpage\">\n//                             <iframe\n//                               src={`https://docs.google.com/gview?url=${media.url}&embedded=true`}\n//                               title=\"PDF Viewer\"\n//                             ></iframe>\n//                           </div>\n//                         ) : null}\n//                       </div>\n//                     ))}\n//                   </Carousel>\n//                 )}\n//               </div>\n//               <div className=\"feed-content-postpage\">\n//                 <h3>{post.title}</h3>\n//                 <p>{post.description}</p>\n//                 {post.link && (\n//                   <a\n//                     href={post.link}\n//                     target=\"_blank\"\n//                     rel=\"noopener noreferrer\"\n//                     className=\"post-link-postpage\"\n//                   >\n//                     {post.link}\n//                   </a>\n//                 )}\n//                 <button\n//                   className=\"delete-post-button-postpage\"\n//                   onClick={() => handleDelete(post._id)}\n//                 >\n//                   Delete\n//                 </button>\n//               </div>\n//             </div>\n//           ))\n//         ) : (\n//           <p>No posts available</p>\n//         )}\n//       </div>\n\n//       {fullscreenImage && (\n//         <div\n//           className=\"fullscreen-overlay-postpage\"\n//           onClick={() => setFullscreenImage(null)}\n//         >\n//           <span\n//             className=\"close-button-postpage\"\n//             onClick={() => setFullscreenImage(null)}\n//           >\n//             ×\n//           </span>\n//           <img\n//             src={fullscreenImage}\n//             alt=\"Full-Screen Preview\"\n//             className=\"fullscreen-image-postpage\"\n//           />\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Postspage;\n\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axiosInstance from \"./api/axiosfetch\";\n// import { Carousel } from \"react-responsive-carousel\";\n// import \"react-responsive-carousel/lib/styles/carousel.min.css\";\n// import \"./Postspage.css\";\n\n// const Postspage = ({ userEmail }) => {\n//   const [posts, setPosts] = useState([]);\n//   const navigate = useNavigate();\n//   const [sortOrder, setSortOrder] = useState(\"desc\");\n//   const [showFilterOptions, setShowFilterOptions] = useState(false);\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [fullscreenImage, setFullscreenImage] = useState(null);\n\n//   useEffect(() => {\n//     const email = userEmail || localStorage.getItem(\"userEmail\");\n\n//     if (!email) {\n//       return;\n//     }\n\n//     const fetchPosts = async () => {\n//       try {\n//         const url = `/postview/${encodeURIComponent(email)}`;\n//         const response = await axiosInstance.get(url);\n//         setPosts(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching posts:\", error);\n//       }\n//     };\n\n//     fetchPosts();\n//   }, [userEmail]);\n\n//   const filteredPosts = posts.filter((post) => {\n//     const searchString = searchTerm.toLowerCase();\n//     return Object.values(post).some((value) => {\n//       if (typeof value === \"string\") {\n//         return value.toLowerCase().includes(searchString);\n//       } else if (Array.isArray(value)) {\n//         return value.some(\n//           (item) =>\n//             typeof item === \"string\" && item.toLowerCase().includes(searchString)\n//         );\n//       }\n//       return false;\n//     });\n//   });\n\n//   const sortedPosts = filteredPosts.sort((a, b) => {\n//     return sortOrder === \"desc\"\n//       ? new Date(b.createdAt) - new Date(a.createdAt)\n//       : new Date(a.createdAt) - new Date(b.createdAt);\n//   });\n\n//   useEffect(() => {\n//     const handleKeyDown = (event) => {\n//       if (event.key === \"Escape\") {\n//         setFullscreenImage(null);\n//       }\n//     };\n//     window.addEventListener(\"keydown\", handleKeyDown);\n//     return () => window.removeEventListener(\"keydown\", handleKeyDown);\n//   }, []);\n\n//   const handleDelete = async (postId) => {\n//     try {\n//       const confirmation = window.confirm(\n//         \"Are you sure you want to delete this post?\"\n//       );\n//       if (!confirmation) return;\n\n//       await axiosInstance.delete(`/postview/${postId}`);\n//       alert(\"Post deleted successfully\");\n//       setPosts(posts.filter((post) => post._id !== postId));\n//     } catch (error) {\n//       console.error(\"Error deleting post:\", error);\n//       alert(\"Failed to delete post.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"posts-container-postpage\">\n//       {/* HEADER */}\n//       <div className=\"feed-header-postpage\">\n//         <input\n//           type=\"text\"\n//           className=\"search-bar-postpage\"\n//           placeholder=\"Search posts...\"\n//           value={searchTerm}\n//           onChange={(e) => setSearchTerm(e.target.value)}\n//         />\n//         {searchTerm && (\n//           <button\n//             className=\"clear-search-postpage\"\n//             onClick={() => setSearchTerm(\"\")}\n//           >\n//             ×\n//           </button>\n//         )}\n//         <div className=\"filter-container-postpage\">\n//           <button\n//             className=\"filter-button-postpage\"\n//             onClick={() => setShowFilterOptions(!showFilterOptions)}\n//           >\n//             Filter ⌵\n//           </button>\n//           {showFilterOptions && (\n//             <div className=\"filter-dropdown-postpage\">\n//               <button\n//                 onClick={() => {\n//                   setSortOrder(\"desc\");\n//                   setShowFilterOptions(false);\n//                 }}\n//               >\n//                 Newest First\n//               </button>\n//               <button\n//                 onClick={() => {\n//                   setSortOrder(\"asc\");\n//                   setShowFilterOptions(false);\n//                 }}\n//               >\n//                 Oldest First\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//         <button\n//           className=\"new-post-button-postpage\"\n//           onClick={() => navigate(\"/Newpost\")}\n//         >\n//           New Post\n//         </button>\n//       </div>\n\n//       {/* FEED SECTION */}\n//       <div className=\"feed-section-postpage\">\n//         {sortedPosts.length === 0 ? (\n//           <p>No posts available.</p>\n//         ) : (\n//           <div className=\"feed-grid-postpage\">\n//             {sortedPosts.map((post, index) => (\n//               <div className=\"feed-item-postpage\" key={index}>\n//                 <div className=\"feed-image-postpage\">\n//                   {post.media?.length > 0 && post.media[0]?.url && (\n//                     <Carousel\n//                       showThumbs={false}\n//                       infiniteLoop\n//                       autoPlay\n//                       interval={5000}\n//                       showStatus={false}\n//                     >\n//                       {post.media.map((media, idx) => (\n//                         <div key={idx} className=\"carousel-item-postpage\">\n//                           {media.type.startsWith(\"image/\") ? (\n//                             <div\n//                               onClick={() => setFullscreenImage(media.url)}\n//                               style={{ cursor: \"pointer\" }}\n//                             >\n//                               <img\n//                                 src={media.url}\n//                                 alt={`${post.title} ${idx}`}\n//                                 style={{ objectFit: \"cover\", width: \"100%\" }}\n//                               />\n//                             </div>\n//                           ) : media.type === \"video/mp4\" ? (\n//                             <video\n//                               src={media.url}\n//                               controls\n//                               style={{ width: \"100%\", height: \"auto\" }}\n//                             />\n//                           ) : media.type === \"application/pdf\" ? (\n//                             <div className=\"pdf-container-postpage\">\n//                               <iframe\n//                                 src={`https://docs.google.com/gview?url=${media.url}&embedded=true`}\n//                                 title=\"PDF Viewer\"\n//                               ></iframe>\n//                             </div>\n//                           ) : null}\n//                         </div>\n//                       ))}\n//                     </Carousel>\n//                   )}\n//                 </div>\n//                 <div className=\"feed-content-postpage\">\n//                   <h3>{post.title}</h3>\n//                   <p>{post.description}</p>\n//                   {post.link && (\n//                     <a\n//                       href={post.link}\n//                       target=\"_blank\"\n//                       rel=\"noopener noreferrer\"\n//                       className=\"post-link-postpage\"\n//                     >\n//                       {post.link}\n//                     </a>\n//                   )}\n//                   <button\n//                     className=\"delete-post-button-postpage\"\n//                     onClick={() => handleDelete(post._id)}\n//                   >\n//                     Delete\n//                   </button>\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n//         )}\n//       </div>\n\n//       {/* FULLSCREEN IMAGE OVERLAY */}\n//       {fullscreenImage && (\n//         <div\n//           className=\"fullscreen-overlay-postpage\"\n//           onClick={() => setFullscreenImage(null)}\n//         >\n//           <span\n//             className=\"close-button-postpage\"\n//             onClick={() => setFullscreenImage(null)}\n//           >\n//             ×\n//           </span>\n//           <img\n//             src={fullscreenImage}\n//             alt=\"Full-Screen Preview\"\n//             className=\"fullscreen-image-postpage\"\n//           />\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Postspage;","map":{"version":3,"names":[],"sources":["C:/Users/chpre/OneDrive/Desktop/college/PROJECTS/miniproject/college_activity/src/Postspage.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import axiosInstance from \"./api/axiosfetch\";\r\n// import { Carousel } from \"react-responsive-carousel\";\r\n// import \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\n// import \"./Postspage.css\";\r\n\r\n// const Postspage = ({ userEmail }) => {\r\n//   const [posts, setPosts] = useState([]);\r\n//   const navigate = useNavigate();\r\n\r\n//   // Fetch posts on component load\r\n//   useEffect(() => {\r\n//     const email = userEmail || localStorage.getItem(\"userEmail\");\r\n\r\n//     if (!email) {\r\n//       return;\r\n//     }\r\n\r\n//     const fetchPosts = async () => {\r\n//       try {\r\n//         const url = `/postview/${encodeURIComponent(email)}`;\r\n//         const response = await axiosInstance.get(url);\r\n//         setPosts(response.data);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching posts:\", error);\r\n//       }\r\n//     };\r\n\r\n//     fetchPosts();\r\n//   }, [userEmail]); // Removed axiosInstance as a dependency\r\n\r\n//   // Delete post handler\r\n//   const handleDelete = async (postId) => {\r\n//     try {\r\n//       console.log(\"Attempting to delete post with ID:\", postId);\r\n\r\n//       const confirmation = window.confirm(\r\n//         \"Are you sure you want to delete this post?\"\r\n//       );\r\n//       if (!confirmation) return;\r\n\r\n//       await axiosInstance.delete(`/postview/${postId}`);\r\n//       alert(\"Post deleted successfully\");\r\n\r\n//       // Update the state to reflect the deletion\r\n//       setPosts(posts.filter((post) => post._id !== postId));\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting post:\", error);\r\n//       alert(\"Failed to delete post.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"posts-container-postpage\">\r\n//       <h1>User Posts</h1>\r\n\r\n//       {/* New Post Button */}\r\n//       <button\r\n//         className=\"new-post-button-postpage\"\r\n//         onClick={() => navigate(\"/Newpost\")}\r\n//       >\r\n//         New Post\r\n//       </button>\r\n\r\n//       {/* Feed Section */}\r\n//       <div className=\"feed-section-postpage\">\r\n//         <h2>Feed</h2>\r\n//         <div className=\"feed-grid-postpage\">\r\n//           {posts.length === 0 ? (\r\n//             <p>No posts available.</p>\r\n//           ) : (\r\n//             posts.map((post) => (\r\n//               <div className=\"feed-item-postpage\" key={post._id}>\r\n//                 <div className=\"feed-image-postpage\">\r\n//                   {post.media.length > 0 && post.media[0].url && (\r\n//                     <Carousel\r\n//                       showThumbs={false}\r\n//                       infiniteLoop={true}\r\n//                       autoPlay={true}\r\n//                       interval={5000}\r\n//                       showStatus={false}\r\n//                     >\r\n//                       {post.media.map((media, idx) => {\r\n//                         if (media.type.startsWith(\"image/\")) {\r\n//                           return (\r\n//                             <div key={idx}>\r\n//                               <img\r\n//                                 src={media.url}\r\n//                                 alt={`${post.title} ${idx}`}\r\n//                                 style={{ objectFit: \"cover\", width: \"100%\" }}\r\n//                               />\r\n//                             </div>\r\n//                           );\r\n//                         } else if (media.type === \"application/pdf\") {\r\n//                           return (\r\n//                             <div key={idx} className=\"pdf-container-postpage\">\r\n//                               <iframe\r\n//                                 src={`https://docs.google.com/gview?url=${media.url}&embedded=true`}\r\n//                                 title=\"PDF Viewer\"\r\n//                                 width=\"100%\"\r\n//                                 height=\"500px\"\r\n//                                 style={{ border: \"none\" }}\r\n//                               ></iframe>\r\n//                             </div>\r\n//                           );\r\n//                         } else if (media.type === \"video/mp4\") {\r\n//                           return (\r\n//                             <div key={idx} className=\"video-container-postpage\">\r\n//                               <video\r\n//                                 src={media.url}\r\n//                                 controls\r\n//                                 style={{ width: \"100%\", height: \"auto\" }}\r\n//                               />\r\n//                             </div>\r\n//                           );\r\n//                         }\r\n//                         return null;\r\n//                       })}\r\n//                     </Carousel>\r\n//                   )}\r\n//                 </div>\r\n//                 <div className=\"feed-content-postpage\">\r\n//                   <h3>{post.title}</h3>\r\n//                   <p>{post.description}</p>\r\n//                   {post.link && (\r\n//                     <a\r\n//                       href={post.link}\r\n//                       target=\"_blank\"\r\n//                       rel=\"noopener noreferrer\"\r\n//                       className=\"post-link-postpage\"\r\n//                     >\r\n//                       {post.link}\r\n//                     </a>\r\n//                   )}\r\n//                 </div>\r\n//                 <button\r\n//                   className=\"delete-post-button-postpage\"\r\n//                   onClick={() => handleDelete(post._id)}\r\n//                 >\r\n//                   Delete\r\n//                 </button>\r\n//               </div>\r\n//             ))\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Postspage;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import axiosInstance from \"./api/axiosfetch\";\r\n// import { Carousel } from \"react-responsive-carousel\";\r\n// import \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\n// import \"./Postspage.css\";\r\n\r\n// const Postspage = ({ userEmail }) => {\r\n//   const [posts, setPosts] = useState([]);\r\n//   const navigate = useNavigate();\r\n//   const [sortOrder, setSortOrder] = useState(\"desc\");\r\n//   const [showFilterOptions, setShowFilterOptions] = useState(false);\r\n//   const [searchTerm, setSearchTerm] = useState(\"\");\r\n//   const [fullscreenImage, setFullscreenImage] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const email = userEmail || localStorage.getItem(\"userEmail\");\r\n\r\n//     if (!email) {\r\n//       return;\r\n//     }\r\n\r\n//     const fetchPosts = async () => {\r\n//       try {\r\n//         const url = `/postview/${encodeURIComponent(email)}`;\r\n//         const response = await axiosInstance.get(url);\r\n//         setPosts(response.data);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching posts:\", error);\r\n//       }\r\n//     };\r\n\r\n//     fetchPosts();\r\n//   }, [userEmail]);\r\n\r\n//   const filteredPosts = posts.filter((post) => {\r\n//     const searchString = searchTerm.toLowerCase();\r\n//     return Object.values(post).some((value) => {\r\n//       if (typeof value === \"string\") {\r\n//         return value.toLowerCase().includes(searchString);\r\n//       } else if (Array.isArray(value)) {\r\n//         return value.some(\r\n//           (item) =>\r\n//             typeof item === \"string\" && item.toLowerCase().includes(searchString)\r\n//         );\r\n//       }\r\n//       return false;\r\n//     });\r\n//   });\r\n\r\n//   const sortedPosts = filteredPosts.sort((a, b) => {\r\n//     return sortOrder === \"desc\"\r\n//       ? new Date(b.createdAt) - new Date(a.createdAt)\r\n//       : new Date(a.createdAt) - new Date(b.createdAt);\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     const handleKeyDown = (event) => {\r\n//       if (event.key === \"Escape\") {\r\n//         setFullscreenImage(null);\r\n//       }\r\n//     };\r\n//     window.addEventListener(\"keydown\", handleKeyDown);\r\n//     return () => window.removeEventListener(\"keydown\", handleKeyDown);\r\n//   }, [fullscreenImage]);\r\n\r\n//   const handleDelete = async (postId) => {\r\n//     try {\r\n//       const confirmation = window.confirm(\r\n//         \"Are you sure you want to delete this post?\"\r\n//       );\r\n//       if (!confirmation) return;\r\n\r\n//       await axiosInstance.delete(`/postview/${postId}`);\r\n//       alert(\"Post deleted successfully\");\r\n//       setPosts(posts.filter((post) => post._id !== postId));\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting post:\", error);\r\n//       alert(\"Failed to delete post.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"posts-container-postpage\">\r\n//       <h1>User Posts</h1>\r\n//       <div className=\"feed-header-postpage\">\r\n//         <input\r\n//           type=\"text\"\r\n//           className=\"search-bar-postpage\"\r\n//           placeholder=\"Search posts...\"\r\n//           value={searchTerm}\r\n//           onChange={(e) => setSearchTerm(e.target.value)}\r\n//         />\r\n//         {searchTerm && (\r\n//           <button\r\n//             className=\"clear-search-postpage\"\r\n//             onClick={() => setSearchTerm(\"\")}\r\n//           >\r\n//             ×\r\n//           </button>\r\n//         )}\r\n//         <div className=\"filter-container-postpage\">\r\n//           <button\r\n//             className=\"filter-button-postpage\"\r\n//             onClick={() => setShowFilterOptions(!showFilterOptions)}\r\n//           >\r\n//             Filter ⌵\r\n//           </button>\r\n//           {showFilterOptions && (\r\n//             <div className=\"filter-dropdown-postpage\">\r\n//               <button\r\n//                 onClick={() => {\r\n//                   setSortOrder(\"desc\");\r\n//                   setShowFilterOptions(false);\r\n//                 }}\r\n//               >\r\n//                 Newest First\r\n//               </button>\r\n//               <button\r\n//                 onClick={() => {\r\n//                   setSortOrder(\"asc\");\r\n//                   setShowFilterOptions(false);\r\n//                 }}\r\n//               >\r\n//                 Oldest First\r\n//               </button>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//         <button\r\n//           className=\"new-post-button-postpage\"\r\n//           onClick={() => navigate(\"/Newpost\")}\r\n//         >\r\n//           New Post\r\n//         </button>\r\n//       </div>\r\n\r\n//       {/* Feed Section */}\r\n//       <div className=\"feed-section-postpage\">\r\n//         <h2>Feed</h2>\r\n//         <div className=\"feed-grid-postpage\">\r\n//           {sortedPosts.length === 0 ? (\r\n//             <p>No posts available.</p>\r\n//           ) : (\r\n//             sortedPosts.map((post) => (\r\n//               <div className=\"feed-item-postpage\" key={post._id}>\r\n//                 <div className=\"feed-image-postpage\">\r\n//                   {post.media.length > 0 && post.media[0].url && (\r\n//                     <Carousel\r\n//                       showThumbs={false}\r\n//                       infiniteLoop={true}\r\n//                       autoPlay={true}\r\n//                       interval={5000}\r\n//                       showStatus={false}\r\n//                     >\r\n//                       {post.media.map((media, idx) => {\r\n//                         if (media.type.startsWith(\"image/\")) {\r\n//                           return (\r\n//                             <div key={idx}>\r\n//                               <img\r\n//                                 src={media.url}\r\n//                                 alt={`${post.title} ${idx}`}\r\n//                                 style={{ objectFit: \"cover\", width: \"100%\" }}\r\n//                                 onClick={() => setFullscreenImage(media.url)}\r\n//                               />\r\n//                             </div>\r\n//                           );\r\n//                         } else if (media.type === \"application/pdf\") {\r\n//                           return (\r\n//                             <div key={idx} className=\"pdf-container-postpage\">\r\n//                               <iframe\r\n//                                 src={`https://docs.google.com/gview?url=${media.url}&embedded=true`}\r\n//                                 title=\"PDF Viewer\"\r\n//                                 width=\"100%\"\r\n//                                 height=\"500px\"\r\n//                                 style={{ border: \"none\" }}\r\n//                               ></iframe>\r\n//                             </div>\r\n//                           );\r\n//                         } else if (media.type === \"video/mp4\") {\r\n//                           return (\r\n//                             <div key={idx} className=\"video-container-postpage\">\r\n//                               <video\r\n//                                 src={media.url}\r\n//                                 controls\r\n//                                 style={{ width: \"100%\", height: \"auto\" }}\r\n//                               />\r\n//                             </div>\r\n//                           );\r\n//                         }\r\n//                         return null;\r\n//                       })}\r\n//                     </Carousel>\r\n//                   )}\r\n//                 </div>\r\n//                 <div className=\"feed-content-postpage\">\r\n//                   <h3>{post.title}</h3>\r\n//                   <p>{post.description}</p>\r\n//                   {post.link && (\r\n//                     <a\r\n//                       href={post.link}\r\n//                       target=\"_blank\"\r\n//                       rel=\"noopener noreferrer\"\r\n//                       className=\"post-link-postpage\"\r\n//                     >\r\n//                       {post.link}\r\n//                     </a>\r\n//                   )}\r\n//                 </div>\r\n//                 <button\r\n//                   className=\"delete-post-button-postpage\"\r\n//                   onClick={() => handleDelete(post._id)}\r\n//                 >\r\n//                   Delete\r\n//                 </button>\r\n//               </div>\r\n//             ))\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Fullscreen Image Overlay */}\r\n//       {fullscreenImage && (\r\n//         <div\r\n//           className=\"fullscreen-overlay-postpage\"\r\n//           onClick={() => setFullscreenImage(null)}\r\n//         >\r\n//           <span\r\n//             className=\"close-button-postpage\"\r\n//             onClick={() => setFullscreenImage(null)}\r\n//           >\r\n//             ×\r\n//           </span>\r\n//           <img\r\n//             src={fullscreenImage}\r\n//             alt=\"Full-Screen Preview\"\r\n//             className=\"fullscreen-image-postpage\"\r\n//           />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Postspage;\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import axiosInstance from \"./api/axiosfetch\";\r\n// import { Carousel } from \"react-responsive-carousel\";\r\n// import \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\n// import \"./Postspage.css\";\r\n\r\n// const Postspage = ({ userEmail }) => {\r\n//   const [posts, setPosts] = useState([]);\r\n//   const navigate = useNavigate();\r\n//   const [sortOrder, setSortOrder] = useState(\"desc\");\r\n//   const [showFilterOptions, setShowFilterOptions] = useState(false);\r\n//   const [searchTerm, setSearchTerm] = useState(\"\");\r\n//   const [fullscreenImage, setFullscreenImage] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const email = userEmail || localStorage.getItem(\"userEmail\");\r\n\r\n//     if (!email) {\r\n//       return;\r\n//     }\r\n\r\n//     const fetchPosts = async () => {\r\n//       try {\r\n//         const url = `/postview/${encodeURIComponent(email)}`;\r\n//         const response = await axiosInstance.get(url);\r\n//         setPosts(response.data);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching posts:\", error);\r\n//       }\r\n//     };\r\n\r\n//     fetchPosts();\r\n//   }, [userEmail]);\r\n\r\n//   const filteredPosts = posts.filter((post) => {\r\n//     const searchString = searchTerm.toLowerCase();\r\n//     return Object.values(post).some((value) => {\r\n//       if (typeof value === \"string\") {\r\n//         return value.toLowerCase().includes(searchString);\r\n//       } else if (Array.isArray(value)) {\r\n//         return value.some(\r\n//           (item) =>\r\n//             typeof item === \"string\" && item.toLowerCase().includes(searchString)\r\n//         );\r\n//       }\r\n//       return false;\r\n//     });\r\n//   });\r\n\r\n//   const sortedPosts = filteredPosts.sort((a, b) => {\r\n//     return sortOrder === \"desc\"\r\n//       ? new Date(b.createdAt) - new Date(a.createdAt)\r\n//       : new Date(a.createdAt) - new Date(b.createdAt);\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     const handleKeyDown = (event) => {\r\n//       if (event.key === \"Escape\") {\r\n//         setFullscreenImage(null);\r\n//       }\r\n//     };\r\n//     window.addEventListener(\"keydown\", handleKeyDown);\r\n//     return () => window.removeEventListener(\"keydown\", handleKeyDown);\r\n//   }, [fullscreenImage]);\r\n\r\n//   const handleDelete = async (postId) => {\r\n//     try {\r\n//       const confirmation = window.confirm(\r\n//         \"Are you sure you want to delete this post?\"\r\n//       );\r\n//       if (!confirmation) return;\r\n\r\n//       await axiosInstance.delete(`/postview/${postId}`);\r\n//       alert(\"Post deleted successfully\");\r\n//       setPosts(posts.filter((post) => post._id !== postId));\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting post:\", error);\r\n//       alert(\"Failed to delete post.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"posts-container-postpage\">\r\n//       <div className=\"feed-header-postpage\">\r\n//         <input\r\n//           type=\"text\"\r\n//           className=\"search-bar-postpage\"\r\n//           placeholder=\"Search posts...\"\r\n//           value={searchTerm}\r\n//           onChange={(e) => setSearchTerm(e.target.value)}\r\n//         />\r\n//         {searchTerm && (\r\n//           <button\r\n//             className=\"clear-search-postpage\"\r\n//             onClick={() => setSearchTerm(\"\")}\r\n//           >\r\n//             ×\r\n//           </button>\r\n//         )}\r\n//         <div className=\"filter-container-postpage\">\r\n//           <button\r\n//             className=\"filter-button-postpage\"\r\n//             onClick={() => setShowFilterOptions(!showFilterOptions)}\r\n//           >\r\n//             Filter ⌵\r\n//           </button>\r\n//           {showFilterOptions && (\r\n//             <div className=\"filter-dropdown-postpage\">\r\n//               <button\r\n//                 onClick={() => {\r\n//                   setSortOrder(\"desc\");\r\n//                   setShowFilterOptions(false);\r\n//                 }}\r\n//               >\r\n//                 Newest First\r\n//               </button>\r\n//               <button\r\n//                 onClick={() => {\r\n//                   setSortOrder(\"asc\");\r\n//                   setShowFilterOptions(false);\r\n//                 }}\r\n//               >\r\n//                 Oldest First\r\n//               </button>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//         <button\r\n//           className=\"new-post-button-postpage\"\r\n//           onClick={() => navigate(\"/Newpost\")}\r\n//         >\r\n//           New Post\r\n//         </button>\r\n//       </div>\r\n\r\n//       <div className=\"feed-section-postpage\">\r\n//         <div className=\"feed-grid-postpage\">\r\n//           {sortedPosts.length === 0 ? (\r\n//             <p>No posts available.</p>\r\n//           ) : (\r\n//             sortedPosts.map((post) => (\r\n//               <div className=\"feed-item-postpage\" key={post._id}>\r\n//                 <div className=\"feed-image-postpage\">\r\n//                   {post.media.length > 0 && post.media[0].url && (\r\n//                     <Carousel\r\n//                       showThumbs={false}\r\n//                       infiniteLoop={true}\r\n//                       autoPlay={true}\r\n//                       interval={5000}\r\n//                       showStatus={false}\r\n//                     >\r\n//                       {post.media.map((media, idx) => {\r\n//                         if (media.type.startsWith(\"image/\")) {\r\n//                           return (\r\n//                             <div key={idx}>\r\n//                               <img\r\n//                                 src={media.url}\r\n//                                 alt={`${post.title} ${idx}`}\r\n//                                 style={{ objectFit: \"cover\", width: \"100%\" }}\r\n//                                 onClick={() => setFullscreenImage(media.url)}\r\n//                               />\r\n//                             </div>\r\n//                           );\r\n//                         } else if (media.type === \"application/pdf\") {\r\n//                           return (\r\n//                             <div key={idx} className=\"pdf-container-postpage\">\r\n//                               <iframe\r\n//                                 src={`https://docs.google.com/gview?url=${media.url}&embedded=true`}\r\n//                                 title=\"PDF Viewer\"\r\n//                                 width=\"100%\"\r\n//                                 height=\"500px\"\r\n//                                 style={{ border: \"none\" }}\r\n//                               ></iframe>\r\n//                             </div>\r\n//                           );\r\n//                         } else if (media.type === \"video/mp4\") {\r\n//                           return (\r\n//                             <div key={idx} className=\"video-container-postpage\">\r\n//                               <video\r\n//                                 src={media.url}\r\n//                                 controls\r\n//                                 style={{ width: \"100%\", height: \"auto\" }}\r\n//                               />\r\n//                             </div>\r\n//                           );\r\n//                         }\r\n//                         return null;\r\n//                       })}\r\n//                     </Carousel>\r\n//                   )}\r\n//                 </div>\r\n//                 <div className=\"feed-content-postpage\">\r\n//                   <h3>{post.title}</h3>\r\n//                   <p>{post.description}</p>\r\n//                   {post.link && (\r\n//                     <a\r\n//                       href={post.link}\r\n//                       target=\"_blank\"\r\n//                       rel=\"noopener noreferrer\"\r\n//                       className=\"post-link-postpage\"\r\n//                     >\r\n//                       {post.link}\r\n//                     </a>\r\n//                   )}\r\n//                 </div>\r\n//                 <button\r\n//                   className=\"delete-post-button-postpage\"\r\n//                   onClick={() => handleDelete(post._id)}\r\n//                 >\r\n//                   Delete\r\n//                 </button>\r\n//               </div>\r\n//             ))\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n\r\n//       {fullscreenImage && (\r\n//         <div\r\n//           className=\"fullscreen-overlay-postpage\"\r\n//           onClick={() => setFullscreenImage(null)}\r\n//         >\r\n//           <span\r\n//             className=\"close-button-postpage\"\r\n//             onClick={() => setFullscreenImage(null)}\r\n//           >\r\n//             ×\r\n//           </span>\r\n//           <img\r\n//             src={fullscreenImage}\r\n//             alt=\"Full-Screen Preview\"\r\n//             className=\"fullscreen-image-postpage\"\r\n//           />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Postspage;\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import axiosInstance from \"./api/axiosfetch\";\r\n// import { Carousel } from \"react-responsive-carousel\";\r\n// import \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\n// import \"./Postspage.css\";\r\n\r\n// const Postspage = ({ userEmail }) => {\r\n//   const [posts, setPosts] = useState([]);\r\n//   const navigate = useNavigate();\r\n//   const [sortOrder, setSortOrder] = useState(\"desc\");\r\n//   const [showFilterOptions, setShowFilterOptions] = useState(false);\r\n//   const [searchTerm, setSearchTerm] = useState(\"\");\r\n//   const [fullscreenImage, setFullscreenImage] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const email = userEmail || localStorage.getItem(\"userEmail\");\r\n\r\n//     if (!email) {\r\n//       return;\r\n//     }\r\n\r\n//     const fetchPosts = async () => {\r\n//       try {\r\n//         const url = `/postview/${encodeURIComponent(email)}`;\r\n//         const response = await axiosInstance.get(url);\r\n//         setPosts(response.data);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching posts:\", error);\r\n//       }\r\n//     };\r\n\r\n//     fetchPosts();\r\n//   }, [userEmail]);\r\n\r\n//   const filteredPosts = posts.filter((post) => {\r\n//     const searchString = searchTerm.toLowerCase();\r\n//     return Object.values(post).some((value) => {\r\n//       if (typeof value === \"string\") {\r\n//         return value.toLowerCase().includes(searchString);\r\n//       } else if (Array.isArray(value)) {\r\n//         return value.some(\r\n//           (item) =>\r\n//             typeof item === \"string\" && item.toLowerCase().includes(searchString)\r\n//         );\r\n//       }\r\n//       return false;\r\n//     });\r\n//   });\r\n\r\n//   const sortedPosts = filteredPosts.sort((a, b) => {\r\n//     return sortOrder === \"desc\"\r\n//       ? new Date(b.createdAt) - new Date(a.createdAt)\r\n//       : new Date(a.createdAt) - new Date(b.createdAt);\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     const handleKeyDown = (event) => {\r\n//       if (event.key === \"Escape\") {\r\n//         setFullscreenImage(null);\r\n//       }\r\n//     };\r\n//     window.addEventListener(\"keydown\", handleKeyDown);\r\n//     return () => window.removeEventListener(\"keydown\", handleKeyDown);\r\n//   }, []);\r\n\r\n//   const handleDelete = async (postId) => {\r\n//     try {\r\n//       const confirmation = window.confirm(\r\n//         \"Are you sure you want to delete this post?\"\r\n//       );\r\n//       if (!confirmation) return;\r\n\r\n//       await axiosInstance.delete(`/postview/${postId}`);\r\n//       alert(\"Post deleted successfully\");\r\n//       setPosts(posts.filter((post) => post._id !== postId));\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting post:\", error);\r\n//       alert(\"Failed to delete post.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"posts-container-postpage\">\r\n//       <div className=\"feed-header-postpage\">\r\n//         <input\r\n//           type=\"text\"\r\n//           className=\"search-bar-postpage\"\r\n//           placeholder=\"Search posts...\"\r\n//           value={searchTerm}\r\n//           onChange={(e) => setSearchTerm(e.target.value)}\r\n//         />\r\n//         {searchTerm && (\r\n//           <button\r\n//             className=\"clear-search-postpage\"\r\n//             onClick={() => setSearchTerm(\"\")}\r\n//           >\r\n//             ×\r\n//           </button>\r\n//         )}\r\n//         <div className=\"filter-container-postpage\">\r\n//           <button\r\n//             className=\"filter-button-postpage\"\r\n//             onClick={() => setShowFilterOptions(!showFilterOptions)}\r\n//           >\r\n//             Filter ⌵\r\n//           </button>\r\n//           {showFilterOptions && (\r\n//             <div className=\"filter-dropdown-postpage\">\r\n//               <button\r\n//                 onClick={() => {\r\n//                   setSortOrder(\"desc\");\r\n//                   setShowFilterOptions(false);\r\n//                 }}\r\n//               >\r\n//                 Newest First\r\n//               </button>\r\n//               <button\r\n//                 onClick={() => {\r\n//                   setSortOrder(\"asc\");\r\n//                   setShowFilterOptions(false);\r\n//                 }}\r\n//               >\r\n//                 Oldest First\r\n//               </button>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//         <button\r\n//           className=\"new-post-button-postpage\"\r\n//           onClick={() => navigate(\"/Newpost\")}\r\n//         >\r\n//           New Post\r\n//         </button>\r\n//       </div>\r\n\r\n//       <div className=\"feed-section-postpage\">\r\n//         <div className=\"feed-grid-postpage\">\r\n//           {sortedPosts.length === 0 ? (\r\n//             <p>No posts available.</p>\r\n//           ) : (\r\n//             sortedPosts.map((post) => (\r\n//               <div className=\"feed-item-postpage\" key={post._id}>\r\n//                 <div className=\"feed-image-postpage\">\r\n//                   {post.media.length > 0 && post.media[0].url && (\r\n//                     <Carousel\r\n//                       showThumbs={false}\r\n//                       infiniteLoop={true}\r\n//                       autoPlay={true}\r\n//                       interval={5000}\r\n//                       showStatus={false}\r\n//                     >\r\n//                       {post.media.map((media, idx) => {\r\n//                         if (media.type.startsWith(\"image/\")) {\r\n//                           return (\r\n//                             <div key={idx}>\r\n//                               <img\r\n//                                 src={media.url}\r\n//                                 alt={`${post.title} ${idx}`}\r\n//                                 style={{ objectFit: \"cover\", width: \"100%\" }}\r\n//                                 onClick={() => setFullscreenImage(media.url)}\r\n//                               />\r\n//                             </div>\r\n//                           );\r\n//                         }\r\n//                         return null;\r\n//                       })}\r\n//                     </Carousel>\r\n//                   )}\r\n//                 </div>\r\n//                 <div className=\"feed-content-postpage\">\r\n//                   <h3>{post.title}</h3>\r\n//                   <p>{post.description}</p>\r\n//                   {post.link && (\r\n//                     <a\r\n//                       href={post.link}\r\n//                       target=\"_blank\"\r\n//                       rel=\"noopener noreferrer\"\r\n//                       className=\"post-link-postpage\"\r\n//                     >\r\n//                       {post.link}\r\n//                     </a>\r\n//                   )}\r\n//                 </div>\r\n//                 <button\r\n//                   className=\"delete-post-button-postpage\"\r\n//                   onClick={() => handleDelete(post._id)}\r\n//                 >\r\n//                   Delete\r\n//                 </button>\r\n//               </div>\r\n//             ))\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n\r\n//        {fullscreenImage && (\r\n//         <div className=\"fullscreen-overlay-postpage\" onClick={() => setFullscreenImage(null)}>\r\n//           <span className=\"close-button-postpage\" onClick={() => setFullscreenImage(null)}>\r\n//             ×\r\n//           </span>\r\n//           <img src={fullscreenImage} alt=\"Full-Screen Preview\" className=\"fullscreen-image-postpage\" />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Postspage;\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import axiosInstance from \"./api/axiosfetch\";\r\n// import { Carousel } from \"react-responsive-carousel\";\r\n// import \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\n// import \"./Postspage.css\";\r\n\r\n// const Postspage = ({ userEmail }) => {\r\n//   const [posts, setPosts] = useState([]);\r\n//   const navigate = useNavigate();\r\n//   const [sortOrder, setSortOrder] = useState(\"desc\");\r\n//   const [showFilterOptions, setShowFilterOptions] = useState(false);\r\n//   const [searchTerm, setSearchTerm] = useState(\"\");\r\n//   const [fullscreenImage, setFullscreenImage] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const email = userEmail || localStorage.getItem(\"userEmail\");\r\n\r\n//     if (!email) {\r\n//       return;\r\n//     }\r\n\r\n//     const fetchPosts = async () => {\r\n//       try {\r\n//         const url = `/postview/${encodeURIComponent(email)}`;\r\n//         const response = await axiosInstance.get(url);\r\n//         setPosts(response.data);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching posts:\", error);\r\n//       }\r\n//     };\r\n\r\n//     fetchPosts();\r\n//   }, [userEmail]);\r\n\r\n//   const filteredPosts = posts.filter((post) => {\r\n//     const searchString = searchTerm.toLowerCase();\r\n//     return Object.values(post).some((value) => {\r\n//       if (typeof value === \"string\") {\r\n//         return value.toLowerCase().includes(searchString);\r\n//       } else if (Array.isArray(value)) {\r\n//         return value.some(\r\n//           (item) =>\r\n//             typeof item === \"string\" && item.toLowerCase().includes(searchString)\r\n//         );\r\n//       }\r\n//       return false;\r\n//     });\r\n//   });\r\n\r\n//   const sortedPosts = filteredPosts.sort((a, b) => {\r\n//     return sortOrder === \"desc\"\r\n//       ? new Date(b.createdAt) - new Date(a.createdAt)\r\n//       : new Date(a.createdAt) - new Date(b.createdAt);\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     const handleKeyDown = (event) => {\r\n//       if (event.key === \"Escape\") {\r\n//         setFullscreenImage(null);\r\n//       }\r\n//     };\r\n//     window.addEventListener(\"keydown\", handleKeyDown);\r\n//     return () => window.removeEventListener(\"keydown\", handleKeyDown);\r\n//   }, []);\r\n\r\n//   const handleDelete = async (postId) => {\r\n//     try {\r\n//       const confirmation = window.confirm(\r\n//         \"Are you sure you want to delete this post?\"\r\n//       );\r\n//       if (!confirmation) return;\r\n\r\n//       await axiosInstance.delete(`/postview/${postId}`);\r\n//       alert(\"Post deleted successfully\");\r\n//       setPosts(posts.filter((post) => post._id !== postId));\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting post:\", error);\r\n//       alert(\"Failed to delete post.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"posts-container-postpage\">\r\n//       <div className=\"feed-header-postpage\">\r\n//         <input\r\n//           type=\"text\"\r\n//           className=\"search-bar-postpage\"\r\n//           placeholder=\"Search posts...\"\r\n//           value={searchTerm}\r\n//           onChange={(e) => setSearchTerm(e.target.value)}\r\n//         />\r\n//         {searchTerm && (\r\n//           <button\r\n//             className=\"clear-search-postpage\"\r\n//             onClick={() => setSearchTerm(\"\")}\r\n//           >\r\n//             ×\r\n//           </button>\r\n//         )}\r\n//         <div className=\"filter-container-postpage\">\r\n//           <button\r\n//             className=\"filter-button-postpage\"\r\n//             onClick={() => setShowFilterOptions(!showFilterOptions)}\r\n//           >\r\n//             Filter ⌵\r\n//           </button>\r\n//           {showFilterOptions && (\r\n//             <div className=\"filter-dropdown-postpage\">\r\n//               <button\r\n//                 onClick={() => {\r\n//                   setSortOrder(\"desc\");\r\n//                   setShowFilterOptions(false);\r\n//                 }}\r\n//               >\r\n//                 Newest First\r\n//               </button>\r\n//               <button\r\n//                 onClick={() => {\r\n//                   setSortOrder(\"asc\");\r\n//                   setShowFilterOptions(false);\r\n//                 }}\r\n//               >\r\n//                 Oldest First\r\n//               </button>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//         <button\r\n//           className=\"new-post-button-postpage\"\r\n//           onClick={() => navigate(\"/Newpost\")}\r\n//         >\r\n//           New Post\r\n//         </button>\r\n//       </div>\r\n\r\n//       <div className=\"feed-grid-postpage\">\r\n//         {sortedPosts.length > 0 ? (\r\n//           sortedPosts.map((post, index) => (\r\n//             <div className=\"feed-item-postpage\" key={index}>\r\n//               <div className=\"feed-image-postpage\">\r\n//                 {post.media?.length > 0 && post.media[0]?.url && (\r\n//                   <Carousel\r\n//                     showThumbs={false}\r\n//                     infiniteLoop\r\n//                     autoPlay\r\n//                     interval={5000}\r\n//                     showStatus={false}\r\n//                   >\r\n//                     {post.media.map((media, idx) => (\r\n//                       <div key={idx} className=\"carousel-item-postpage\">\r\n//                         {media.type.startsWith(\"image/\") ? (\r\n//                           <div\r\n//                             onClick={() => setFullscreenImage(media.url)}\r\n//                             style={{ cursor: \"pointer\" }}\r\n//                           >\r\n//                             <img\r\n//                               src={media.url}\r\n//                               alt={`${post.title} ${idx}`}\r\n//                               style={{ objectFit: \"cover\", width: \"100%\" }}\r\n//                             />\r\n//                           </div>\r\n//                         ) : media.type === \"video/mp4\" ? (\r\n//                           <video\r\n//                             src={media.url}\r\n//                             controls\r\n//                             style={{ width: \"100%\", height: \"auto\" }}\r\n//                           />\r\n//                         ) : media.type === \"application/pdf\" ? (\r\n//                           <div className=\"pdf-container-postpage\">\r\n//                             <iframe\r\n//                               src={`https://docs.google.com/gview?url=${media.url}&embedded=true`}\r\n//                               title=\"PDF Viewer\"\r\n//                             ></iframe>\r\n//                           </div>\r\n//                         ) : null}\r\n//                       </div>\r\n//                     ))}\r\n//                   </Carousel>\r\n//                 )}\r\n//               </div>\r\n//               <div className=\"feed-content-postpage\">\r\n//                 <h3>{post.title}</h3>\r\n//                 <p>{post.description}</p>\r\n//                 {post.link && (\r\n//                   <a\r\n//                     href={post.link}\r\n//                     target=\"_blank\"\r\n//                     rel=\"noopener noreferrer\"\r\n//                     className=\"post-link-postpage\"\r\n//                   >\r\n//                     {post.link}\r\n//                   </a>\r\n//                 )}\r\n//                 <button\r\n//                   className=\"delete-post-button-postpage\"\r\n//                   onClick={() => handleDelete(post._id)}\r\n//                 >\r\n//                   Delete\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           ))\r\n//         ) : (\r\n//           <p>No posts available</p>\r\n//         )}\r\n//       </div>\r\n\r\n//       {fullscreenImage && (\r\n//         <div\r\n//           className=\"fullscreen-overlay-postpage\"\r\n//           onClick={() => setFullscreenImage(null)}\r\n//         >\r\n//           <span\r\n//             className=\"close-button-postpage\"\r\n//             onClick={() => setFullscreenImage(null)}\r\n//           >\r\n//             ×\r\n//           </span>\r\n//           <img\r\n//             src={fullscreenImage}\r\n//             alt=\"Full-Screen Preview\"\r\n//             className=\"fullscreen-image-postpage\"\r\n//           />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Postspage;\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import axiosInstance from \"./api/axiosfetch\";\r\n// import { Carousel } from \"react-responsive-carousel\";\r\n// import \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\n// import \"./Postspage.css\";\r\n\r\n// const Postspage = ({ userEmail }) => {\r\n//   const [posts, setPosts] = useState([]);\r\n//   const navigate = useNavigate();\r\n//   const [sortOrder, setSortOrder] = useState(\"desc\");\r\n//   const [showFilterOptions, setShowFilterOptions] = useState(false);\r\n//   const [searchTerm, setSearchTerm] = useState(\"\");\r\n//   const [fullscreenImage, setFullscreenImage] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const email = userEmail || localStorage.getItem(\"userEmail\");\r\n\r\n//     if (!email) {\r\n//       return;\r\n//     }\r\n\r\n//     const fetchPosts = async () => {\r\n//       try {\r\n//         const url = `/postview/${encodeURIComponent(email)}`;\r\n//         const response = await axiosInstance.get(url);\r\n//         setPosts(response.data);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching posts:\", error);\r\n//       }\r\n//     };\r\n\r\n//     fetchPosts();\r\n//   }, [userEmail]);\r\n\r\n//   const filteredPosts = posts.filter((post) => {\r\n//     const searchString = searchTerm.toLowerCase();\r\n//     return Object.values(post).some((value) => {\r\n//       if (typeof value === \"string\") {\r\n//         return value.toLowerCase().includes(searchString);\r\n//       } else if (Array.isArray(value)) {\r\n//         return value.some(\r\n//           (item) =>\r\n//             typeof item === \"string\" && item.toLowerCase().includes(searchString)\r\n//         );\r\n//       }\r\n//       return false;\r\n//     });\r\n//   });\r\n\r\n//   const sortedPosts = filteredPosts.sort((a, b) => {\r\n//     return sortOrder === \"desc\"\r\n//       ? new Date(b.createdAt) - new Date(a.createdAt)\r\n//       : new Date(a.createdAt) - new Date(b.createdAt);\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     const handleKeyDown = (event) => {\r\n//       if (event.key === \"Escape\") {\r\n//         setFullscreenImage(null);\r\n//       }\r\n//     };\r\n//     window.addEventListener(\"keydown\", handleKeyDown);\r\n//     return () => window.removeEventListener(\"keydown\", handleKeyDown);\r\n//   }, []);\r\n\r\n//   const handleDelete = async (postId) => {\r\n//     try {\r\n//       const confirmation = window.confirm(\r\n//         \"Are you sure you want to delete this post?\"\r\n//       );\r\n//       if (!confirmation) return;\r\n\r\n//       await axiosInstance.delete(`/postview/${postId}`);\r\n//       alert(\"Post deleted successfully\");\r\n//       setPosts(posts.filter((post) => post._id !== postId));\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting post:\", error);\r\n//       alert(\"Failed to delete post.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"posts-container-postpage\">\r\n//       {/* HEADER */}\r\n//       <div className=\"feed-header-postpage\">\r\n//         <input\r\n//           type=\"text\"\r\n//           className=\"search-bar-postpage\"\r\n//           placeholder=\"Search posts...\"\r\n//           value={searchTerm}\r\n//           onChange={(e) => setSearchTerm(e.target.value)}\r\n//         />\r\n//         {searchTerm && (\r\n//           <button\r\n//             className=\"clear-search-postpage\"\r\n//             onClick={() => setSearchTerm(\"\")}\r\n//           >\r\n//             ×\r\n//           </button>\r\n//         )}\r\n//         <div className=\"filter-container-postpage\">\r\n//           <button\r\n//             className=\"filter-button-postpage\"\r\n//             onClick={() => setShowFilterOptions(!showFilterOptions)}\r\n//           >\r\n//             Filter ⌵\r\n//           </button>\r\n//           {showFilterOptions && (\r\n//             <div className=\"filter-dropdown-postpage\">\r\n//               <button\r\n//                 onClick={() => {\r\n//                   setSortOrder(\"desc\");\r\n//                   setShowFilterOptions(false);\r\n//                 }}\r\n//               >\r\n//                 Newest First\r\n//               </button>\r\n//               <button\r\n//                 onClick={() => {\r\n//                   setSortOrder(\"asc\");\r\n//                   setShowFilterOptions(false);\r\n//                 }}\r\n//               >\r\n//                 Oldest First\r\n//               </button>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//         <button\r\n//           className=\"new-post-button-postpage\"\r\n//           onClick={() => navigate(\"/Newpost\")}\r\n//         >\r\n//           New Post\r\n//         </button>\r\n//       </div>\r\n\r\n//       {/* FEED SECTION */}\r\n//       <div className=\"feed-section-postpage\">\r\n//         {sortedPosts.length === 0 ? (\r\n//           <p>No posts available.</p>\r\n//         ) : (\r\n//           <div className=\"feed-grid-postpage\">\r\n//             {sortedPosts.map((post, index) => (\r\n//               <div className=\"feed-item-postpage\" key={index}>\r\n//                 <div className=\"feed-image-postpage\">\r\n//                   {post.media?.length > 0 && post.media[0]?.url && (\r\n//                     <Carousel\r\n//                       showThumbs={false}\r\n//                       infiniteLoop\r\n//                       autoPlay\r\n//                       interval={5000}\r\n//                       showStatus={false}\r\n//                     >\r\n//                       {post.media.map((media, idx) => (\r\n//                         <div key={idx} className=\"carousel-item-postpage\">\r\n//                           {media.type.startsWith(\"image/\") ? (\r\n//                             <div\r\n//                               onClick={() => setFullscreenImage(media.url)}\r\n//                               style={{ cursor: \"pointer\" }}\r\n//                             >\r\n//                               <img\r\n//                                 src={media.url}\r\n//                                 alt={`${post.title} ${idx}`}\r\n//                                 style={{ objectFit: \"cover\", width: \"100%\" }}\r\n//                               />\r\n//                             </div>\r\n//                           ) : media.type === \"video/mp4\" ? (\r\n//                             <video\r\n//                               src={media.url}\r\n//                               controls\r\n//                               style={{ width: \"100%\", height: \"auto\" }}\r\n//                             />\r\n//                           ) : media.type === \"application/pdf\" ? (\r\n//                             <div className=\"pdf-container-postpage\">\r\n//                               <iframe\r\n//                                 src={`https://docs.google.com/gview?url=${media.url}&embedded=true`}\r\n//                                 title=\"PDF Viewer\"\r\n//                               ></iframe>\r\n//                             </div>\r\n//                           ) : null}\r\n//                         </div>\r\n//                       ))}\r\n//                     </Carousel>\r\n//                   )}\r\n//                 </div>\r\n//                 <div className=\"feed-content-postpage\">\r\n//                   <h3>{post.title}</h3>\r\n//                   <p>{post.description}</p>\r\n//                   {post.link && (\r\n//                     <a\r\n//                       href={post.link}\r\n//                       target=\"_blank\"\r\n//                       rel=\"noopener noreferrer\"\r\n//                       className=\"post-link-postpage\"\r\n//                     >\r\n//                       {post.link}\r\n//                     </a>\r\n//                   )}\r\n//                   <button\r\n//                     className=\"delete-post-button-postpage\"\r\n//                     onClick={() => handleDelete(post._id)}\r\n//                   >\r\n//                     Delete\r\n//                   </button>\r\n//                 </div>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n\r\n//       {/* FULLSCREEN IMAGE OVERLAY */}\r\n//       {fullscreenImage && (\r\n//         <div\r\n//           className=\"fullscreen-overlay-postpage\"\r\n//           onClick={() => setFullscreenImage(null)}\r\n//         >\r\n//           <span\r\n//             className=\"close-button-postpage\"\r\n//             onClick={() => setFullscreenImage(null)}\r\n//           >\r\n//             ×\r\n//           </span>\r\n//           <img\r\n//             src={fullscreenImage}\r\n//             alt=\"Full-Screen Preview\"\r\n//             className=\"fullscreen-image-postpage\"\r\n//           />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Postspage;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}