{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chpre\\\\OneDrive\\\\Desktop\\\\college\\\\PROJECTS\\\\miniproject\\\\college_activity\\\\src\\\\Postspage.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axiosInstance from \"./api/axiosfetch\";\n// import { Carousel } from \"react-responsive-carousel\";\n// import \"react-responsive-carousel/lib/styles/carousel.min.css\";\n// import \"./Postspage.css\";\n\n// const Postspage = ({ userEmail }) => {\n//   const [posts, setPosts] = useState([]);\n//   const navigate = useNavigate();\n\n//   // Fetch posts on component load\n//   useEffect(() => {\n//     const email = userEmail || localStorage.getItem(\"userEmail\");\n\n//     if (!email) {\n//       return;\n//     }\n\n//     const fetchPosts = async () => {\n//       try {\n//         const url = `/postview/${encodeURIComponent(email)}`;\n//         const response = await axiosInstance.get(url);\n//         setPosts(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching posts:\", error);\n//       }\n//     };\n\n//     fetchPosts();\n//   }, [userEmail]); // Removed axiosInstance as a dependency\n\n//   // Delete post handler\n//   const handleDelete = async (postId) => {\n//     try {\n//       console.log(\"Attempting to delete post with ID:\", postId);\n\n//       const confirmation = window.confirm(\n//         \"Are you sure you want to delete this post?\"\n//       );\n//       if (!confirmation) return;\n\n//       await axiosInstance.delete(`/postview/${postId}`);\n//       alert(\"Post deleted successfully\");\n\n//       // Update the state to reflect the deletion\n//       setPosts(posts.filter((post) => post._id !== postId));\n//     } catch (error) {\n//       console.error(\"Error deleting post:\", error);\n//       alert(\"Failed to delete post.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"posts-container-postpage\">\n//       <h1>User Posts</h1>\n\n//       {/* New Post Button */}\n//       <button\n//         className=\"new-post-button-postpage\"\n//         onClick={() => navigate(\"/Newpost\")}\n//       >\n//         New Post\n//       </button>\n\n//       {/* Feed Section */}\n//       <div className=\"feed-section-postpage\">\n//         <h2>Feed</h2>\n//         <div className=\"feed-grid-postpage\">\n//           {posts.length === 0 ? (\n//             <p>No posts available.</p>\n//           ) : (\n//             posts.map((post) => (\n//               <div className=\"feed-item-postpage\" key={post._id}>\n//                 <div className=\"feed-image-postpage\">\n//                   {post.media.length > 0 && post.media[0].url && (\n//                     <Carousel\n//                       showThumbs={false}\n//                       infiniteLoop={true}\n//                       autoPlay={true}\n//                       interval={5000}\n//                       showStatus={false}\n//                     >\n//                       {post.media.map((media, idx) => {\n//                         if (media.type.startsWith(\"image/\")) {\n//                           return (\n//                             <div key={idx}>\n//                               <img\n//                                 src={media.url}\n//                                 alt={`${post.title} ${idx}`}\n//                                 style={{ objectFit: \"cover\", width: \"100%\" }}\n//                               />\n//                             </div>\n//                           );\n//                         } else if (media.type === \"application/pdf\") {\n//                           return (\n//                             <div key={idx} className=\"pdf-container-postpage\">\n//                               <iframe\n//                                 src={`https://docs.google.com/gview?url=${media.url}&embedded=true`}\n//                                 title=\"PDF Viewer\"\n//                                 width=\"100%\"\n//                                 height=\"500px\"\n//                                 style={{ border: \"none\" }}\n//                               ></iframe>\n//                             </div>\n//                           );\n//                         } else if (media.type === \"video/mp4\") {\n//                           return (\n//                             <div key={idx} className=\"video-container-postpage\">\n//                               <video\n//                                 src={media.url}\n//                                 controls\n//                                 style={{ width: \"100%\", height: \"auto\" }}\n//                               />\n//                             </div>\n//                           );\n//                         }\n//                         return null;\n//                       })}\n//                     </Carousel>\n//                   )}\n//                 </div>\n//                 <div className=\"feed-content-postpage\">\n//                   <h3>{post.title}</h3>\n//                   <p>{post.description}</p>\n//                   {post.link && (\n//                     <a\n//                       href={post.link}\n//                       target=\"_blank\"\n//                       rel=\"noopener noreferrer\"\n//                       className=\"post-link-postpage\"\n//                     >\n//                       {post.link}\n//                     </a>\n//                   )}\n//                 </div>\n//                 <button\n//                   className=\"delete-post-button-postpage\"\n//                   onClick={() => handleDelete(post._id)}\n//                 >\n//                   Delete\n//                 </button>\n//               </div>\n//             ))\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Postspage;\n\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axiosInstance from \"./api/axiosfetch\";\n// import { Carousel } from \"react-responsive-carousel\";\n// import \"react-responsive-carousel/lib/styles/carousel.min.css\";\n// import \"./Postspage.css\";\n\n// const Postspage = ({ userEmail }) => {\n//   const [posts, setPosts] = useState([]);\n//   const navigate = useNavigate();\n//   const [sortOrder, setSortOrder] = useState(\"desc\");\n//   const [showFilterOptions, setShowFilterOptions] = useState(false);\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [fullscreenImage, setFullscreenImage] = useState(null);\n\n//   useEffect(() => {\n//     const email = userEmail || localStorage.getItem(\"userEmail\");\n\n//     if (!email) {\n//       return;\n//     }\n\n//     const fetchPosts = async () => {\n//       try {\n//         const url = `/postview/${encodeURIComponent(email)}`;\n//         const response = await axiosInstance.get(url);\n//         setPosts(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching posts:\", error);\n//       }\n//     };\n\n//     fetchPosts();\n//   }, [userEmail]);\n\n//   const filteredPosts = posts.filter((post) => {\n//     const searchString = searchTerm.toLowerCase();\n//     return Object.values(post).some((value) => {\n//       if (typeof value === \"string\") {\n//         return value.toLowerCase().includes(searchString);\n//       } else if (Array.isArray(value)) {\n//         return value.some(\n//           (item) =>\n//             typeof item === \"string\" && item.toLowerCase().includes(searchString)\n//         );\n//       }\n//       return false;\n//     });\n//   });\n\n//   const sortedPosts = filteredPosts.sort((a, b) => {\n//     return sortOrder === \"desc\"\n//       ? new Date(b.createdAt) - new Date(a.createdAt)\n//       : new Date(a.createdAt) - new Date(b.createdAt);\n//   });\n\n//   useEffect(() => {\n//     const handleKeyDown = (event) => {\n//       if (event.key === \"Escape\") {\n//         setFullscreenImage(null);\n//       }\n//     };\n//     window.addEventListener(\"keydown\", handleKeyDown);\n//     return () => window.removeEventListener(\"keydown\", handleKeyDown);\n//   }, [fullscreenImage]);\n\n//   const handleDelete = async (postId) => {\n//     try {\n//       const confirmation = window.confirm(\n//         \"Are you sure you want to delete this post?\"\n//       );\n//       if (!confirmation) return;\n\n//       await axiosInstance.delete(`/postview/${postId}`);\n//       alert(\"Post deleted successfully\");\n//       setPosts(posts.filter((post) => post._id !== postId));\n//     } catch (error) {\n//       console.error(\"Error deleting post:\", error);\n//       alert(\"Failed to delete post.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"posts-container-postpage\">\n//       <h1>User Posts</h1>\n//       <div className=\"feed-header-postpage\">\n//         <input\n//           type=\"text\"\n//           className=\"search-bar-postpage\"\n//           placeholder=\"Search posts...\"\n//           value={searchTerm}\n//           onChange={(e) => setSearchTerm(e.target.value)}\n//         />\n//         {searchTerm && (\n//           <button\n//             className=\"clear-search-postpage\"\n//             onClick={() => setSearchTerm(\"\")}\n//           >\n//             ×\n//           </button>\n//         )}\n//         <div className=\"filter-container-postpage\">\n//           <button\n//             className=\"filter-button-postpage\"\n//             onClick={() => setShowFilterOptions(!showFilterOptions)}\n//           >\n//             Filter ⌵\n//           </button>\n//           {showFilterOptions && (\n//             <div className=\"filter-dropdown-postpage\">\n//               <button\n//                 onClick={() => {\n//                   setSortOrder(\"desc\");\n//                   setShowFilterOptions(false);\n//                 }}\n//               >\n//                 Newest First\n//               </button>\n//               <button\n//                 onClick={() => {\n//                   setSortOrder(\"asc\");\n//                   setShowFilterOptions(false);\n//                 }}\n//               >\n//                 Oldest First\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//         <button\n//           className=\"new-post-button-postpage\"\n//           onClick={() => navigate(\"/Newpost\")}\n//         >\n//           New Post\n//         </button>\n//       </div>\n\n//       {/* Feed Section */}\n//       <div className=\"feed-section-postpage\">\n//         <h2>Feed</h2>\n//         <div className=\"feed-grid-postpage\">\n//           {sortedPosts.length === 0 ? (\n//             <p>No posts available.</p>\n//           ) : (\n//             sortedPosts.map((post) => (\n//               <div className=\"feed-item-postpage\" key={post._id}>\n//                 <div className=\"feed-image-postpage\">\n//                   {post.media.length > 0 && post.media[0].url && (\n//                     <Carousel\n//                       showThumbs={false}\n//                       infiniteLoop={true}\n//                       autoPlay={true}\n//                       interval={5000}\n//                       showStatus={false}\n//                     >\n//                       {post.media.map((media, idx) => {\n//                         if (media.type.startsWith(\"image/\")) {\n//                           return (\n//                             <div key={idx}>\n//                               <img\n//                                 src={media.url}\n//                                 alt={`${post.title} ${idx}`}\n//                                 style={{ objectFit: \"cover\", width: \"100%\" }}\n//                                 onClick={() => setFullscreenImage(media.url)}\n//                               />\n//                             </div>\n//                           );\n//                         } else if (media.type === \"application/pdf\") {\n//                           return (\n//                             <div key={idx} className=\"pdf-container-postpage\">\n//                               <iframe\n//                                 src={`https://docs.google.com/gview?url=${media.url}&embedded=true`}\n//                                 title=\"PDF Viewer\"\n//                                 width=\"100%\"\n//                                 height=\"500px\"\n//                                 style={{ border: \"none\" }}\n//                               ></iframe>\n//                             </div>\n//                           );\n//                         } else if (media.type === \"video/mp4\") {\n//                           return (\n//                             <div key={idx} className=\"video-container-postpage\">\n//                               <video\n//                                 src={media.url}\n//                                 controls\n//                                 style={{ width: \"100%\", height: \"auto\" }}\n//                               />\n//                             </div>\n//                           );\n//                         }\n//                         return null;\n//                       })}\n//                     </Carousel>\n//                   )}\n//                 </div>\n//                 <div className=\"feed-content-postpage\">\n//                   <h3>{post.title}</h3>\n//                   <p>{post.description}</p>\n//                   {post.link && (\n//                     <a\n//                       href={post.link}\n//                       target=\"_blank\"\n//                       rel=\"noopener noreferrer\"\n//                       className=\"post-link-postpage\"\n//                     >\n//                       {post.link}\n//                     </a>\n//                   )}\n//                 </div>\n//                 <button\n//                   className=\"delete-post-button-postpage\"\n//                   onClick={() => handleDelete(post._id)}\n//                 >\n//                   Delete\n//                 </button>\n//               </div>\n//             ))\n//           )}\n//         </div>\n//       </div>\n\n//       {/* Fullscreen Image Overlay */}\n//       {fullscreenImage && (\n//         <div\n//           className=\"fullscreen-overlay-postpage\"\n//           onClick={() => setFullscreenImage(null)}\n//         >\n//           <span\n//             className=\"close-button-postpage\"\n//             onClick={() => setFullscreenImage(null)}\n//           >\n//             ×\n//           </span>\n//           <img\n//             src={fullscreenImage}\n//             alt=\"Full-Screen Preview\"\n//             className=\"fullscreen-image-postpage\"\n//           />\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Postspage;\n\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axiosInstance from \"./api/axiosfetch\";\n// import { Carousel } from \"react-responsive-carousel\";\n// import \"react-responsive-carousel/lib/styles/carousel.min.css\";\n// import \"./Postspage.css\";\n\n// const Postspage = ({ userEmail }) => {\n//   const [posts, setPosts] = useState([]);\n//   const navigate = useNavigate();\n//   const [sortOrder, setSortOrder] = useState(\"desc\");\n//   const [showFilterOptions, setShowFilterOptions] = useState(false);\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [fullscreenImage, setFullscreenImage] = useState(null);\n\n//   useEffect(() => {\n//     const email = userEmail || localStorage.getItem(\"userEmail\");\n\n//     if (!email) {\n//       return;\n//     }\n\n//     const fetchPosts = async () => {\n//       try {\n//         const url = `/postview/${encodeURIComponent(email)}`;\n//         const response = await axiosInstance.get(url);\n//         setPosts(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching posts:\", error);\n//       }\n//     };\n\n//     fetchPosts();\n//   }, [userEmail]);\n\n//   const filteredPosts = posts.filter((post) => {\n//     const searchString = searchTerm.toLowerCase();\n//     return Object.values(post).some((value) => {\n//       if (typeof value === \"string\") {\n//         return value.toLowerCase().includes(searchString);\n//       } else if (Array.isArray(value)) {\n//         return value.some(\n//           (item) =>\n//             typeof item === \"string\" && item.toLowerCase().includes(searchString)\n//         );\n//       }\n//       return false;\n//     });\n//   });\n\n//   const sortedPosts = filteredPosts.sort((a, b) => {\n//     return sortOrder === \"desc\"\n//       ? new Date(b.createdAt) - new Date(a.createdAt)\n//       : new Date(a.createdAt) - new Date(b.createdAt);\n//   });\n\n//   useEffect(() => {\n//     const handleKeyDown = (event) => {\n//       if (event.key === \"Escape\") {\n//         setFullscreenImage(null);\n//       }\n//     };\n//     window.addEventListener(\"keydown\", handleKeyDown);\n//     return () => window.removeEventListener(\"keydown\", handleKeyDown);\n//   }, [fullscreenImage]);\n\n//   const handleDelete = async (postId) => {\n//     try {\n//       const confirmation = window.confirm(\n//         \"Are you sure you want to delete this post?\"\n//       );\n//       if (!confirmation) return;\n\n//       await axiosInstance.delete(`/postview/${postId}`);\n//       alert(\"Post deleted successfully\");\n//       setPosts(posts.filter((post) => post._id !== postId));\n//     } catch (error) {\n//       console.error(\"Error deleting post:\", error);\n//       alert(\"Failed to delete post.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"posts-container-postpage\">\n//       <div className=\"feed-header-postpage\">\n//         <input\n//           type=\"text\"\n//           className=\"search-bar-postpage\"\n//           placeholder=\"Search posts...\"\n//           value={searchTerm}\n//           onChange={(e) => setSearchTerm(e.target.value)}\n//         />\n//         {searchTerm && (\n//           <button\n//             className=\"clear-search-postpage\"\n//             onClick={() => setSearchTerm(\"\")}\n//           >\n//             ×\n//           </button>\n//         )}\n//         <div className=\"filter-container-postpage\">\n//           <button\n//             className=\"filter-button-postpage\"\n//             onClick={() => setShowFilterOptions(!showFilterOptions)}\n//           >\n//             Filter ⌵\n//           </button>\n//           {showFilterOptions && (\n//             <div className=\"filter-dropdown-postpage\">\n//               <button\n//                 onClick={() => {\n//                   setSortOrder(\"desc\");\n//                   setShowFilterOptions(false);\n//                 }}\n//               >\n//                 Newest First\n//               </button>\n//               <button\n//                 onClick={() => {\n//                   setSortOrder(\"asc\");\n//                   setShowFilterOptions(false);\n//                 }}\n//               >\n//                 Oldest First\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//         <button\n//           className=\"new-post-button-postpage\"\n//           onClick={() => navigate(\"/Newpost\")}\n//         >\n//           New Post\n//         </button>\n//       </div>\n\n//       <div className=\"feed-section-postpage\">\n//         <div className=\"feed-grid-postpage\">\n//           {sortedPosts.length === 0 ? (\n//             <p>No posts available.</p>\n//           ) : (\n//             sortedPosts.map((post) => (\n//               <div className=\"feed-item-postpage\" key={post._id}>\n//                 <div className=\"feed-image-postpage\">\n//                   {post.media.length > 0 && post.media[0].url && (\n//                     <Carousel\n//                       showThumbs={false}\n//                       infiniteLoop={true}\n//                       autoPlay={true}\n//                       interval={5000}\n//                       showStatus={false}\n//                     >\n//                       {post.media.map((media, idx) => {\n//                         if (media.type.startsWith(\"image/\")) {\n//                           return (\n//                             <div key={idx}>\n//                               <img\n//                                 src={media.url}\n//                                 alt={`${post.title} ${idx}`}\n//                                 style={{ objectFit: \"cover\", width: \"100%\" }}\n//                                 onClick={() => setFullscreenImage(media.url)}\n//                               />\n//                             </div>\n//                           );\n//                         } else if (media.type === \"application/pdf\") {\n//                           return (\n//                             <div key={idx} className=\"pdf-container-postpage\">\n//                               <iframe\n//                                 src={`https://docs.google.com/gview?url=${media.url}&embedded=true`}\n//                                 title=\"PDF Viewer\"\n//                                 width=\"100%\"\n//                                 height=\"500px\"\n//                                 style={{ border: \"none\" }}\n//                               ></iframe>\n//                             </div>\n//                           );\n//                         } else if (media.type === \"video/mp4\") {\n//                           return (\n//                             <div key={idx} className=\"video-container-postpage\">\n//                               <video\n//                                 src={media.url}\n//                                 controls\n//                                 style={{ width: \"100%\", height: \"auto\" }}\n//                               />\n//                             </div>\n//                           );\n//                         }\n//                         return null;\n//                       })}\n//                     </Carousel>\n//                   )}\n//                 </div>\n//                 <div className=\"feed-content-postpage\">\n//                   <h3>{post.title}</h3>\n//                   <p>{post.description}</p>\n//                   {post.link && (\n//                     <a\n//                       href={post.link}\n//                       target=\"_blank\"\n//                       rel=\"noopener noreferrer\"\n//                       className=\"post-link-postpage\"\n//                     >\n//                       {post.link}\n//                     </a>\n//                   )}\n//                 </div>\n//                 <button\n//                   className=\"delete-post-button-postpage\"\n//                   onClick={() => handleDelete(post._id)}\n//                 >\n//                   Delete\n//                 </button>\n//               </div>\n//             ))\n//           )}\n//         </div>\n//       </div>\n\n//       {fullscreenImage && (\n//         <div\n//           className=\"fullscreen-overlay-postpage\"\n//           onClick={() => setFullscreenImage(null)}\n//         >\n//           <span\n//             className=\"close-button-postpage\"\n//             onClick={() => setFullscreenImage(null)}\n//           >\n//             ×\n//           </span>\n//           <img\n//             src={fullscreenImage}\n//             alt=\"Full-Screen Preview\"\n//             className=\"fullscreen-image-postpage\"\n//           />\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Postspage;\n\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axiosInstance from \"./api/axiosfetch\";\n// import { Carousel } from \"react-responsive-carousel\";\n// import \"react-responsive-carousel/lib/styles/carousel.min.css\";\n// import \"./Postspage.css\";\n\n// const Postspage = ({ userEmail }) => {\n//   const [posts, setPosts] = useState([]);\n//   const navigate = useNavigate();\n//   const [sortOrder, setSortOrder] = useState(\"desc\");\n//   const [showFilterOptions, setShowFilterOptions] = useState(false);\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [fullscreenImage, setFullscreenImage] = useState(null);\n\n//   useEffect(() => {\n//     const email = userEmail || localStorage.getItem(\"userEmail\");\n\n//     if (!email) {\n//       return;\n//     }\n\n//     const fetchPosts = async () => {\n//       try {\n//         const url = `/postview/${encodeURIComponent(email)}`;\n//         const response = await axiosInstance.get(url);\n//         setPosts(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching posts:\", error);\n//       }\n//     };\n\n//     fetchPosts();\n//   }, [userEmail]);\n\n//   const filteredPosts = posts.filter((post) => {\n//     const searchString = searchTerm.toLowerCase();\n//     return Object.values(post).some((value) => {\n//       if (typeof value === \"string\") {\n//         return value.toLowerCase().includes(searchString);\n//       } else if (Array.isArray(value)) {\n//         return value.some(\n//           (item) =>\n//             typeof item === \"string\" && item.toLowerCase().includes(searchString)\n//         );\n//       }\n//       return false;\n//     });\n//   });\n\n//   const sortedPosts = filteredPosts.sort((a, b) => {\n//     return sortOrder === \"desc\"\n//       ? new Date(b.createdAt) - new Date(a.createdAt)\n//       : new Date(a.createdAt) - new Date(b.createdAt);\n//   });\n\n//   useEffect(() => {\n//     const handleKeyDown = (event) => {\n//       if (event.key === \"Escape\") {\n//         setFullscreenImage(null);\n//       }\n//     };\n//     window.addEventListener(\"keydown\", handleKeyDown);\n//     return () => window.removeEventListener(\"keydown\", handleKeyDown);\n//   }, []);\n\n//   const handleDelete = async (postId) => {\n//     try {\n//       const confirmation = window.confirm(\n//         \"Are you sure you want to delete this post?\"\n//       );\n//       if (!confirmation) return;\n\n//       await axiosInstance.delete(`/postview/${postId}`);\n//       alert(\"Post deleted successfully\");\n//       setPosts(posts.filter((post) => post._id !== postId));\n//     } catch (error) {\n//       console.error(\"Error deleting post:\", error);\n//       alert(\"Failed to delete post.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"posts-container-postpage\">\n//       <div className=\"feed-header-postpage\">\n//         <input\n//           type=\"text\"\n//           className=\"search-bar-postpage\"\n//           placeholder=\"Search posts...\"\n//           value={searchTerm}\n//           onChange={(e) => setSearchTerm(e.target.value)}\n//         />\n//         {searchTerm && (\n//           <button\n//             className=\"clear-search-postpage\"\n//             onClick={() => setSearchTerm(\"\")}\n//           >\n//             ×\n//           </button>\n//         )}\n//         <div className=\"filter-container-postpage\">\n//           <button\n//             className=\"filter-button-postpage\"\n//             onClick={() => setShowFilterOptions(!showFilterOptions)}\n//           >\n//             Filter ⌵\n//           </button>\n//           {showFilterOptions && (\n//             <div className=\"filter-dropdown-postpage\">\n//               <button\n//                 onClick={() => {\n//                   setSortOrder(\"desc\");\n//                   setShowFilterOptions(false);\n//                 }}\n//               >\n//                 Newest First\n//               </button>\n//               <button\n//                 onClick={() => {\n//                   setSortOrder(\"asc\");\n//                   setShowFilterOptions(false);\n//                 }}\n//               >\n//                 Oldest First\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//         <button\n//           className=\"new-post-button-postpage\"\n//           onClick={() => navigate(\"/Newpost\")}\n//         >\n//           New Post\n//         </button>\n//       </div>\n\n//       <div className=\"feed-section-postpage\">\n//         <div className=\"feed-grid-postpage\">\n//           {sortedPosts.length === 0 ? (\n//             <p>No posts available.</p>\n//           ) : (\n//             sortedPosts.map((post) => (\n//               <div className=\"feed-item-postpage\" key={post._id}>\n//                 <div className=\"feed-image-postpage\">\n//                   {post.media.length > 0 && post.media[0].url && (\n//                     <Carousel\n//                       showThumbs={false}\n//                       infiniteLoop={true}\n//                       autoPlay={true}\n//                       interval={5000}\n//                       showStatus={false}\n//                     >\n//                       {post.media.map((media, idx) => {\n//                         if (media.type.startsWith(\"image/\")) {\n//                           return (\n//                             <div key={idx}>\n//                               <img\n//                                 src={media.url}\n//                                 alt={`${post.title} ${idx}`}\n//                                 style={{ objectFit: \"cover\", width: \"100%\" }}\n//                                 onClick={() => setFullscreenImage(media.url)}\n//                               />\n//                             </div>\n//                           );\n//                         }\n//                         return null;\n//                       })}\n//                     </Carousel>\n//                   )}\n//                 </div>\n//                 <div className=\"feed-content-postpage\">\n//                   <h3>{post.title}</h3>\n//                   <p>{post.description}</p>\n//                   {post.link && (\n//                     <a\n//                       href={post.link}\n//                       target=\"_blank\"\n//                       rel=\"noopener noreferrer\"\n//                       className=\"post-link-postpage\"\n//                     >\n//                       {post.link}\n//                     </a>\n//                   )}\n//                 </div>\n//                 <button\n//                   className=\"delete-post-button-postpage\"\n//                   onClick={() => handleDelete(post._id)}\n//                 >\n//                   Delete\n//                 </button>\n//               </div>\n//             ))\n//           )}\n//         </div>\n//       </div>\n\n//        {fullscreenImage && (\n//         <div className=\"fullscreen-overlay-postpage\" onClick={() => setFullscreenImage(null)}>\n//           <span className=\"close-button-postpage\" onClick={() => setFullscreenImage(null)}>\n//             ×\n//           </span>\n//           <img src={fullscreenImage} alt=\"Full-Screen Preview\" className=\"fullscreen-image-postpage\" />\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Postspage;\n\n// import React, { useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axiosInstance from \"./api/axiosfetch\";\n// import { Carousel } from \"react-responsive-carousel\";\n// import \"react-responsive-carousel/lib/styles/carousel.min.css\";\n// import \"./Postspage.css\";\n\n// const Postspage = ({ userEmail }) => {\n//   const [posts, setPosts] = useState([]);\n//   const navigate = useNavigate();\n//   const [sortOrder, setSortOrder] = useState(\"desc\");\n//   const [showFilterOptions, setShowFilterOptions] = useState(false);\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [fullscreenImage, setFullscreenImage] = useState(null);\n\n//   useEffect(() => {\n//     const email = userEmail || localStorage.getItem(\"userEmail\");\n\n//     if (!email) {\n//       return;\n//     }\n\n//     const fetchPosts = async () => {\n//       try {\n//         const url = `/postview/${encodeURIComponent(email)}`;\n//         const response = await axiosInstance.get(url);\n//         setPosts(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching posts:\", error);\n//       }\n//     };\n\n//     fetchPosts();\n//   }, [userEmail]);\n\n//   const filteredPosts = posts.filter((post) => {\n//     const searchString = searchTerm.toLowerCase();\n//     return Object.values(post).some((value) => {\n//       if (typeof value === \"string\") {\n//         return value.toLowerCase().includes(searchString);\n//       } else if (Array.isArray(value)) {\n//         return value.some(\n//           (item) =>\n//             typeof item === \"string\" && item.toLowerCase().includes(searchString)\n//         );\n//       }\n//       return false;\n//     });\n//   });\n\n//   const sortedPosts = filteredPosts.sort((a, b) => {\n//     return sortOrder === \"desc\"\n//       ? new Date(b.createdAt) - new Date(a.createdAt)\n//       : new Date(a.createdAt) - new Date(b.createdAt);\n//   });\n\n//   useEffect(() => {\n//     const handleKeyDown = (event) => {\n//       if (event.key === \"Escape\") {\n//         setFullscreenImage(null);\n//       }\n//     };\n//     window.addEventListener(\"keydown\", handleKeyDown);\n//     return () => window.removeEventListener(\"keydown\", handleKeyDown);\n//   }, []);\n\n//   const handleDelete = async (postId) => {\n//     try {\n//       const confirmation = window.confirm(\n//         \"Are you sure you want to delete this post?\"\n//       );\n//       if (!confirmation) return;\n\n//       await axiosInstance.delete(`/postview/${postId}`);\n//       alert(\"Post deleted successfully\");\n//       setPosts(posts.filter((post) => post._id !== postId));\n//     } catch (error) {\n//       console.error(\"Error deleting post:\", error);\n//       alert(\"Failed to delete post.\");\n//     }\n//   };\n\n//   return (\n//     <div className=\"posts-container-postpage\">\n//       <div className=\"feed-header-postpage\">\n//         <input\n//           type=\"text\"\n//           className=\"search-bar-postpage\"\n//           placeholder=\"Search posts...\"\n//           value={searchTerm}\n//           onChange={(e) => setSearchTerm(e.target.value)}\n//         />\n//         {searchTerm && (\n//           <button\n//             className=\"clear-search-postpage\"\n//             onClick={() => setSearchTerm(\"\")}\n//           >\n//             ×\n//           </button>\n//         )}\n//         <div className=\"filter-container-postpage\">\n//           <button\n//             className=\"filter-button-postpage\"\n//             onClick={() => setShowFilterOptions(!showFilterOptions)}\n//           >\n//             Filter ⌵\n//           </button>\n//           {showFilterOptions && (\n//             <div className=\"filter-dropdown-postpage\">\n//               <button\n//                 onClick={() => {\n//                   setSortOrder(\"desc\");\n//                   setShowFilterOptions(false);\n//                 }}\n//               >\n//                 Newest First\n//               </button>\n//               <button\n//                 onClick={() => {\n//                   setSortOrder(\"asc\");\n//                   setShowFilterOptions(false);\n//                 }}\n//               >\n//                 Oldest First\n//               </button>\n//             </div>\n//           )}\n//         </div>\n//         <button\n//           className=\"new-post-button-postpage\"\n//           onClick={() => navigate(\"/Newpost\")}\n//         >\n//           New Post\n//         </button>\n//       </div>\n\n//       <div className=\"feed-grid-postpage\">\n//         {sortedPosts.length > 0 ? (\n//           sortedPosts.map((post, index) => (\n//             <div className=\"feed-item-postpage\" key={index}>\n//               <div className=\"feed-image-postpage\">\n//                 {post.media?.length > 0 && post.media[0]?.url && (\n//                   <Carousel\n//                     showThumbs={false}\n//                     infiniteLoop\n//                     autoPlay\n//                     interval={5000}\n//                     showStatus={false}\n//                   >\n//                     {post.media.map((media, idx) => (\n//                       <div key={idx} className=\"carousel-item-postpage\">\n//                         {media.type.startsWith(\"image/\") ? (\n//                           <div\n//                             onClick={() => setFullscreenImage(media.url)}\n//                             style={{ cursor: \"pointer\" }}\n//                           >\n//                             <img\n//                               src={media.url}\n//                               alt={`${post.title} ${idx}`}\n//                               style={{ objectFit: \"cover\", width: \"100%\" }}\n//                             />\n//                           </div>\n//                         ) : media.type === \"video/mp4\" ? (\n//                           <video\n//                             src={media.url}\n//                             controls\n//                             style={{ width: \"100%\", height: \"auto\" }}\n//                           />\n//                         ) : media.type === \"application/pdf\" ? (\n//                           <div className=\"pdf-container-postpage\">\n//                             <iframe\n//                               src={`https://docs.google.com/gview?url=${media.url}&embedded=true`}\n//                               title=\"PDF Viewer\"\n//                             ></iframe>\n//                           </div>\n//                         ) : null}\n//                       </div>\n//                     ))}\n//                   </Carousel>\n//                 )}\n//               </div>\n//               <div className=\"feed-content-postpage\">\n//                 <h3>{post.title}</h3>\n//                 <p>{post.description}</p>\n//                 {post.link && (\n//                   <a\n//                     href={post.link}\n//                     target=\"_blank\"\n//                     rel=\"noopener noreferrer\"\n//                     className=\"post-link-postpage\"\n//                   >\n//                     {post.link}\n//                   </a>\n//                 )}\n//                 <button\n//                   className=\"delete-post-button-postpage\"\n//                   onClick={() => handleDelete(post._id)}\n//                 >\n//                   Delete\n//                 </button>\n//               </div>\n//             </div>\n//           ))\n//         ) : (\n//           <p>No posts available</p>\n//         )}\n//       </div>\n\n//       {fullscreenImage && (\n//         <div\n//           className=\"fullscreen-overlay-postpage\"\n//           onClick={() => setFullscreenImage(null)}\n//         >\n//           <span\n//             className=\"close-button-postpage\"\n//             onClick={() => setFullscreenImage(null)}\n//           >\n//             ×\n//           </span>\n//           <img\n//             src={fullscreenImage}\n//             alt=\"Full-Screen Preview\"\n//             className=\"fullscreen-image-postpage\"\n//           />\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Postspage;\n\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axiosInstance from \"./api/axiosfetch\";\nimport { Carousel } from \"react-responsive-carousel\";\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\nimport \"./Postspage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Postspage = ({\n  userEmail\n}) => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const navigate = useNavigate();\n  const [sortOrder, setSortOrder] = useState(\"desc\");\n  const [showFilterOptions, setShowFilterOptions] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [fullscreenImage, setFullscreenImage] = useState(null);\n  useEffect(() => {\n    const email = userEmail || localStorage.getItem(\"userEmail\");\n    if (!email) {\n      return;\n    }\n    const fetchPosts = async () => {\n      try {\n        const url = `/postview/${encodeURIComponent(email)}`;\n        const response = await axiosInstance.get(url);\n        setPosts(response.data);\n      } catch (error) {\n        console.error(\"Error fetching posts:\", error);\n      }\n    };\n    fetchPosts();\n  }, [userEmail]);\n  const filteredPosts = posts.filter(post => {\n    const searchString = searchTerm.toLowerCase();\n    return Object.values(post).some(value => {\n      if (typeof value === \"string\") {\n        return value.toLowerCase().includes(searchString);\n      } else if (Array.isArray(value)) {\n        return value.some(item => typeof item === \"string\" && item.toLowerCase().includes(searchString));\n      }\n      return false;\n    });\n  });\n  const sortedPosts = filteredPosts.sort((a, b) => {\n    return sortOrder === \"desc\" ? new Date(b.createdAt) - new Date(a.createdAt) : new Date(a.createdAt) - new Date(b.createdAt);\n  });\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (event.key === \"Escape\") {\n        setFullscreenImage(null);\n      }\n    };\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, []);\n  const handleDelete = async postId => {\n    try {\n      const confirmation = window.confirm(\"Are you sure you want to delete this post?\");\n      if (!confirmation) return;\n      await axiosInstance.delete(`/postview/${postId}`);\n      alert(\"Post deleted successfully\");\n      setPosts(posts.filter(post => post._id !== postId));\n    } catch (error) {\n      console.error(\"Error deleting post:\", error);\n      alert(\"Failed to delete post.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"posts-container-postpage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feed-header-postpage\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"search-bar-postpage\",\n        placeholder: \"Search posts...\",\n        value: searchTerm,\n        onChange: e => setSearchTerm(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1182,\n        columnNumber: 9\n      }, this), searchTerm && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"clear-search-postpage\",\n        onClick: () => setSearchTerm(\"\"),\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1190,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-container-postpage\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"filter-button-postpage\",\n          onClick: () => setShowFilterOptions(!showFilterOptions),\n          children: \"Filter \\u2335\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1198,\n          columnNumber: 11\n        }, this), showFilterOptions && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-dropdown-postpage\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setSortOrder(\"desc\");\n              setShowFilterOptions(false);\n            },\n            children: \"Newest First\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1206,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setSortOrder(\"asc\");\n              setShowFilterOptions(false);\n            },\n            children: \"Oldest First\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1214,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1205,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"new-post-button-postpage\",\n        onClick: () => navigate(\"/Newpost\"),\n        children: \"New Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1225,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feed-box-postpage\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"feed-header-box-postpage\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Posts Feed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1236,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"feed-grid-postpage\",\n        children: sortedPosts.length > 0 ? sortedPosts.map((post, index) => {\n          var _post$media, _post$media$;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"feed-item-postpage\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"feed-image-postpage\",\n              children: ((_post$media = post.media) === null || _post$media === void 0 ? void 0 : _post$media.length) > 0 && ((_post$media$ = post.media[0]) === null || _post$media$ === void 0 ? void 0 : _post$media$.url) && /*#__PURE__*/_jsxDEV(Carousel, {\n                showThumbs: false,\n                infiniteLoop: true,\n                autoPlay: true,\n                interval: 5000,\n                showStatus: false,\n                children: post.media.map((media, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"carousel-item-postpage\",\n                  children: media.type.startsWith(\"image/\") ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    onClick: () => setFullscreenImage(media.url),\n                    style: {\n                      cursor: \"pointer\"\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"img\", {\n                      src: media.url,\n                      alt: `${post.title} ${idx}`,\n                      style: {\n                        objectFit: \"cover\",\n                        width: \"100%\"\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1258,\n                      columnNumber: 31\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1254,\n                    columnNumber: 29\n                  }, this) : media.type === \"video/mp4\" ? /*#__PURE__*/_jsxDEV(\"video\", {\n                    src: media.url,\n                    controls: true,\n                    style: {\n                      width: \"100%\",\n                      height: \"auto\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1265,\n                    columnNumber: 29\n                  }, this) : media.type === \"application/pdf\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"pdf-container-postpage\",\n                    children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n                      src: `https://docs.google.com/gview?url=${media.url}&embedded=true`,\n                      title: \"PDF Viewer\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1272,\n                      columnNumber: 31\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1271,\n                    columnNumber: 29\n                  }, this) : null\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1252,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1244,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1242,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"feed-content-postpage\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: post.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1284,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: post.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1285,\n                columnNumber: 19\n              }, this), post.link && /*#__PURE__*/_jsxDEV(\"a\", {\n                href: post.link,\n                target: \"_blank\",\n                rel: \"noopener noreferrer\",\n                className: \"post-link-postpage\",\n                children: post.link\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1287,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"delete-post-button-postpage\",\n                onClick: () => handleDelete(post._id),\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1296,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1283,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1241,\n            columnNumber: 15\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No posts available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1306,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1238,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1234,\n      columnNumber: 7\n    }, this), fullscreenImage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fullscreen-overlay-postpage\",\n      onClick: () => setFullscreenImage(null),\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"close-button-postpage\",\n        onClick: () => setFullscreenImage(null),\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1316,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: fullscreenImage,\n        alt: \"Full-Screen Preview\",\n        className: \"fullscreen-image-postpage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1322,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1312,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1180,\n    columnNumber: 5\n  }, this);\n};\n_s(Postspage, \"Ogw3X3yXCQeX0ZOyMprny6K8dpU=\", false, function () {\n  return [useNavigate];\n});\n_c = Postspage;\nexport default Postspage;\nvar _c;\n$RefreshReg$(_c, \"Postspage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","axiosInstance","Carousel","jsxDEV","_jsxDEV","Postspage","userEmail","_s","posts","setPosts","navigate","sortOrder","setSortOrder","showFilterOptions","setShowFilterOptions","searchTerm","setSearchTerm","fullscreenImage","setFullscreenImage","email","localStorage","getItem","fetchPosts","url","encodeURIComponent","response","get","data","error","console","filteredPosts","filter","post","searchString","toLowerCase","Object","values","some","value","includes","Array","isArray","item","sortedPosts","sort","a","b","Date","createdAt","handleKeyDown","event","key","window","addEventListener","removeEventListener","handleDelete","postId","confirmation","confirm","delete","alert","_id","className","children","type","placeholder","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","map","index","_post$media","_post$media$","media","showThumbs","infiniteLoop","autoPlay","interval","showStatus","idx","startsWith","style","cursor","src","alt","title","objectFit","width","controls","height","description","link","href","rel","_c","$RefreshReg$"],"sources":["C:/Users/chpre/OneDrive/Desktop/college/PROJECTS/miniproject/college_activity/src/Postspage.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import axiosInstance from \"./api/axiosfetch\";\r\n// import { Carousel } from \"react-responsive-carousel\";\r\n// import \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\n// import \"./Postspage.css\";\r\n\r\n// const Postspage = ({ userEmail }) => {\r\n//   const [posts, setPosts] = useState([]);\r\n//   const navigate = useNavigate();\r\n\r\n//   // Fetch posts on component load\r\n//   useEffect(() => {\r\n//     const email = userEmail || localStorage.getItem(\"userEmail\");\r\n\r\n//     if (!email) {\r\n//       return;\r\n//     }\r\n\r\n//     const fetchPosts = async () => {\r\n//       try {\r\n//         const url = `/postview/${encodeURIComponent(email)}`;\r\n//         const response = await axiosInstance.get(url);\r\n//         setPosts(response.data);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching posts:\", error);\r\n//       }\r\n//     };\r\n\r\n//     fetchPosts();\r\n//   }, [userEmail]); // Removed axiosInstance as a dependency\r\n\r\n//   // Delete post handler\r\n//   const handleDelete = async (postId) => {\r\n//     try {\r\n//       console.log(\"Attempting to delete post with ID:\", postId);\r\n\r\n//       const confirmation = window.confirm(\r\n//         \"Are you sure you want to delete this post?\"\r\n//       );\r\n//       if (!confirmation) return;\r\n\r\n//       await axiosInstance.delete(`/postview/${postId}`);\r\n//       alert(\"Post deleted successfully\");\r\n\r\n//       // Update the state to reflect the deletion\r\n//       setPosts(posts.filter((post) => post._id !== postId));\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting post:\", error);\r\n//       alert(\"Failed to delete post.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"posts-container-postpage\">\r\n//       <h1>User Posts</h1>\r\n\r\n//       {/* New Post Button */}\r\n//       <button\r\n//         className=\"new-post-button-postpage\"\r\n//         onClick={() => navigate(\"/Newpost\")}\r\n//       >\r\n//         New Post\r\n//       </button>\r\n\r\n//       {/* Feed Section */}\r\n//       <div className=\"feed-section-postpage\">\r\n//         <h2>Feed</h2>\r\n//         <div className=\"feed-grid-postpage\">\r\n//           {posts.length === 0 ? (\r\n//             <p>No posts available.</p>\r\n//           ) : (\r\n//             posts.map((post) => (\r\n//               <div className=\"feed-item-postpage\" key={post._id}>\r\n//                 <div className=\"feed-image-postpage\">\r\n//                   {post.media.length > 0 && post.media[0].url && (\r\n//                     <Carousel\r\n//                       showThumbs={false}\r\n//                       infiniteLoop={true}\r\n//                       autoPlay={true}\r\n//                       interval={5000}\r\n//                       showStatus={false}\r\n//                     >\r\n//                       {post.media.map((media, idx) => {\r\n//                         if (media.type.startsWith(\"image/\")) {\r\n//                           return (\r\n//                             <div key={idx}>\r\n//                               <img\r\n//                                 src={media.url}\r\n//                                 alt={`${post.title} ${idx}`}\r\n//                                 style={{ objectFit: \"cover\", width: \"100%\" }}\r\n//                               />\r\n//                             </div>\r\n//                           );\r\n//                         } else if (media.type === \"application/pdf\") {\r\n//                           return (\r\n//                             <div key={idx} className=\"pdf-container-postpage\">\r\n//                               <iframe\r\n//                                 src={`https://docs.google.com/gview?url=${media.url}&embedded=true`}\r\n//                                 title=\"PDF Viewer\"\r\n//                                 width=\"100%\"\r\n//                                 height=\"500px\"\r\n//                                 style={{ border: \"none\" }}\r\n//                               ></iframe>\r\n//                             </div>\r\n//                           );\r\n//                         } else if (media.type === \"video/mp4\") {\r\n//                           return (\r\n//                             <div key={idx} className=\"video-container-postpage\">\r\n//                               <video\r\n//                                 src={media.url}\r\n//                                 controls\r\n//                                 style={{ width: \"100%\", height: \"auto\" }}\r\n//                               />\r\n//                             </div>\r\n//                           );\r\n//                         }\r\n//                         return null;\r\n//                       })}\r\n//                     </Carousel>\r\n//                   )}\r\n//                 </div>\r\n//                 <div className=\"feed-content-postpage\">\r\n//                   <h3>{post.title}</h3>\r\n//                   <p>{post.description}</p>\r\n//                   {post.link && (\r\n//                     <a\r\n//                       href={post.link}\r\n//                       target=\"_blank\"\r\n//                       rel=\"noopener noreferrer\"\r\n//                       className=\"post-link-postpage\"\r\n//                     >\r\n//                       {post.link}\r\n//                     </a>\r\n//                   )}\r\n//                 </div>\r\n//                 <button\r\n//                   className=\"delete-post-button-postpage\"\r\n//                   onClick={() => handleDelete(post._id)}\r\n//                 >\r\n//                   Delete\r\n//                 </button>\r\n//               </div>\r\n//             ))\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Postspage;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import axiosInstance from \"./api/axiosfetch\";\r\n// import { Carousel } from \"react-responsive-carousel\";\r\n// import \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\n// import \"./Postspage.css\";\r\n\r\n// const Postspage = ({ userEmail }) => {\r\n//   const [posts, setPosts] = useState([]);\r\n//   const navigate = useNavigate();\r\n//   const [sortOrder, setSortOrder] = useState(\"desc\");\r\n//   const [showFilterOptions, setShowFilterOptions] = useState(false);\r\n//   const [searchTerm, setSearchTerm] = useState(\"\");\r\n//   const [fullscreenImage, setFullscreenImage] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const email = userEmail || localStorage.getItem(\"userEmail\");\r\n\r\n//     if (!email) {\r\n//       return;\r\n//     }\r\n\r\n//     const fetchPosts = async () => {\r\n//       try {\r\n//         const url = `/postview/${encodeURIComponent(email)}`;\r\n//         const response = await axiosInstance.get(url);\r\n//         setPosts(response.data);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching posts:\", error);\r\n//       }\r\n//     };\r\n\r\n//     fetchPosts();\r\n//   }, [userEmail]);\r\n\r\n//   const filteredPosts = posts.filter((post) => {\r\n//     const searchString = searchTerm.toLowerCase();\r\n//     return Object.values(post).some((value) => {\r\n//       if (typeof value === \"string\") {\r\n//         return value.toLowerCase().includes(searchString);\r\n//       } else if (Array.isArray(value)) {\r\n//         return value.some(\r\n//           (item) =>\r\n//             typeof item === \"string\" && item.toLowerCase().includes(searchString)\r\n//         );\r\n//       }\r\n//       return false;\r\n//     });\r\n//   });\r\n\r\n//   const sortedPosts = filteredPosts.sort((a, b) => {\r\n//     return sortOrder === \"desc\"\r\n//       ? new Date(b.createdAt) - new Date(a.createdAt)\r\n//       : new Date(a.createdAt) - new Date(b.createdAt);\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     const handleKeyDown = (event) => {\r\n//       if (event.key === \"Escape\") {\r\n//         setFullscreenImage(null);\r\n//       }\r\n//     };\r\n//     window.addEventListener(\"keydown\", handleKeyDown);\r\n//     return () => window.removeEventListener(\"keydown\", handleKeyDown);\r\n//   }, [fullscreenImage]);\r\n\r\n//   const handleDelete = async (postId) => {\r\n//     try {\r\n//       const confirmation = window.confirm(\r\n//         \"Are you sure you want to delete this post?\"\r\n//       );\r\n//       if (!confirmation) return;\r\n\r\n//       await axiosInstance.delete(`/postview/${postId}`);\r\n//       alert(\"Post deleted successfully\");\r\n//       setPosts(posts.filter((post) => post._id !== postId));\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting post:\", error);\r\n//       alert(\"Failed to delete post.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"posts-container-postpage\">\r\n//       <h1>User Posts</h1>\r\n//       <div className=\"feed-header-postpage\">\r\n//         <input\r\n//           type=\"text\"\r\n//           className=\"search-bar-postpage\"\r\n//           placeholder=\"Search posts...\"\r\n//           value={searchTerm}\r\n//           onChange={(e) => setSearchTerm(e.target.value)}\r\n//         />\r\n//         {searchTerm && (\r\n//           <button\r\n//             className=\"clear-search-postpage\"\r\n//             onClick={() => setSearchTerm(\"\")}\r\n//           >\r\n//             ×\r\n//           </button>\r\n//         )}\r\n//         <div className=\"filter-container-postpage\">\r\n//           <button\r\n//             className=\"filter-button-postpage\"\r\n//             onClick={() => setShowFilterOptions(!showFilterOptions)}\r\n//           >\r\n//             Filter ⌵\r\n//           </button>\r\n//           {showFilterOptions && (\r\n//             <div className=\"filter-dropdown-postpage\">\r\n//               <button\r\n//                 onClick={() => {\r\n//                   setSortOrder(\"desc\");\r\n//                   setShowFilterOptions(false);\r\n//                 }}\r\n//               >\r\n//                 Newest First\r\n//               </button>\r\n//               <button\r\n//                 onClick={() => {\r\n//                   setSortOrder(\"asc\");\r\n//                   setShowFilterOptions(false);\r\n//                 }}\r\n//               >\r\n//                 Oldest First\r\n//               </button>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//         <button\r\n//           className=\"new-post-button-postpage\"\r\n//           onClick={() => navigate(\"/Newpost\")}\r\n//         >\r\n//           New Post\r\n//         </button>\r\n//       </div>\r\n\r\n//       {/* Feed Section */}\r\n//       <div className=\"feed-section-postpage\">\r\n//         <h2>Feed</h2>\r\n//         <div className=\"feed-grid-postpage\">\r\n//           {sortedPosts.length === 0 ? (\r\n//             <p>No posts available.</p>\r\n//           ) : (\r\n//             sortedPosts.map((post) => (\r\n//               <div className=\"feed-item-postpage\" key={post._id}>\r\n//                 <div className=\"feed-image-postpage\">\r\n//                   {post.media.length > 0 && post.media[0].url && (\r\n//                     <Carousel\r\n//                       showThumbs={false}\r\n//                       infiniteLoop={true}\r\n//                       autoPlay={true}\r\n//                       interval={5000}\r\n//                       showStatus={false}\r\n//                     >\r\n//                       {post.media.map((media, idx) => {\r\n//                         if (media.type.startsWith(\"image/\")) {\r\n//                           return (\r\n//                             <div key={idx}>\r\n//                               <img\r\n//                                 src={media.url}\r\n//                                 alt={`${post.title} ${idx}`}\r\n//                                 style={{ objectFit: \"cover\", width: \"100%\" }}\r\n//                                 onClick={() => setFullscreenImage(media.url)}\r\n//                               />\r\n//                             </div>\r\n//                           );\r\n//                         } else if (media.type === \"application/pdf\") {\r\n//                           return (\r\n//                             <div key={idx} className=\"pdf-container-postpage\">\r\n//                               <iframe\r\n//                                 src={`https://docs.google.com/gview?url=${media.url}&embedded=true`}\r\n//                                 title=\"PDF Viewer\"\r\n//                                 width=\"100%\"\r\n//                                 height=\"500px\"\r\n//                                 style={{ border: \"none\" }}\r\n//                               ></iframe>\r\n//                             </div>\r\n//                           );\r\n//                         } else if (media.type === \"video/mp4\") {\r\n//                           return (\r\n//                             <div key={idx} className=\"video-container-postpage\">\r\n//                               <video\r\n//                                 src={media.url}\r\n//                                 controls\r\n//                                 style={{ width: \"100%\", height: \"auto\" }}\r\n//                               />\r\n//                             </div>\r\n//                           );\r\n//                         }\r\n//                         return null;\r\n//                       })}\r\n//                     </Carousel>\r\n//                   )}\r\n//                 </div>\r\n//                 <div className=\"feed-content-postpage\">\r\n//                   <h3>{post.title}</h3>\r\n//                   <p>{post.description}</p>\r\n//                   {post.link && (\r\n//                     <a\r\n//                       href={post.link}\r\n//                       target=\"_blank\"\r\n//                       rel=\"noopener noreferrer\"\r\n//                       className=\"post-link-postpage\"\r\n//                     >\r\n//                       {post.link}\r\n//                     </a>\r\n//                   )}\r\n//                 </div>\r\n//                 <button\r\n//                   className=\"delete-post-button-postpage\"\r\n//                   onClick={() => handleDelete(post._id)}\r\n//                 >\r\n//                   Delete\r\n//                 </button>\r\n//               </div>\r\n//             ))\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Fullscreen Image Overlay */}\r\n//       {fullscreenImage && (\r\n//         <div\r\n//           className=\"fullscreen-overlay-postpage\"\r\n//           onClick={() => setFullscreenImage(null)}\r\n//         >\r\n//           <span\r\n//             className=\"close-button-postpage\"\r\n//             onClick={() => setFullscreenImage(null)}\r\n//           >\r\n//             ×\r\n//           </span>\r\n//           <img\r\n//             src={fullscreenImage}\r\n//             alt=\"Full-Screen Preview\"\r\n//             className=\"fullscreen-image-postpage\"\r\n//           />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Postspage;\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import axiosInstance from \"./api/axiosfetch\";\r\n// import { Carousel } from \"react-responsive-carousel\";\r\n// import \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\n// import \"./Postspage.css\";\r\n\r\n// const Postspage = ({ userEmail }) => {\r\n//   const [posts, setPosts] = useState([]);\r\n//   const navigate = useNavigate();\r\n//   const [sortOrder, setSortOrder] = useState(\"desc\");\r\n//   const [showFilterOptions, setShowFilterOptions] = useState(false);\r\n//   const [searchTerm, setSearchTerm] = useState(\"\");\r\n//   const [fullscreenImage, setFullscreenImage] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const email = userEmail || localStorage.getItem(\"userEmail\");\r\n\r\n//     if (!email) {\r\n//       return;\r\n//     }\r\n\r\n//     const fetchPosts = async () => {\r\n//       try {\r\n//         const url = `/postview/${encodeURIComponent(email)}`;\r\n//         const response = await axiosInstance.get(url);\r\n//         setPosts(response.data);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching posts:\", error);\r\n//       }\r\n//     };\r\n\r\n//     fetchPosts();\r\n//   }, [userEmail]);\r\n\r\n//   const filteredPosts = posts.filter((post) => {\r\n//     const searchString = searchTerm.toLowerCase();\r\n//     return Object.values(post).some((value) => {\r\n//       if (typeof value === \"string\") {\r\n//         return value.toLowerCase().includes(searchString);\r\n//       } else if (Array.isArray(value)) {\r\n//         return value.some(\r\n//           (item) =>\r\n//             typeof item === \"string\" && item.toLowerCase().includes(searchString)\r\n//         );\r\n//       }\r\n//       return false;\r\n//     });\r\n//   });\r\n\r\n//   const sortedPosts = filteredPosts.sort((a, b) => {\r\n//     return sortOrder === \"desc\"\r\n//       ? new Date(b.createdAt) - new Date(a.createdAt)\r\n//       : new Date(a.createdAt) - new Date(b.createdAt);\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     const handleKeyDown = (event) => {\r\n//       if (event.key === \"Escape\") {\r\n//         setFullscreenImage(null);\r\n//       }\r\n//     };\r\n//     window.addEventListener(\"keydown\", handleKeyDown);\r\n//     return () => window.removeEventListener(\"keydown\", handleKeyDown);\r\n//   }, [fullscreenImage]);\r\n\r\n//   const handleDelete = async (postId) => {\r\n//     try {\r\n//       const confirmation = window.confirm(\r\n//         \"Are you sure you want to delete this post?\"\r\n//       );\r\n//       if (!confirmation) return;\r\n\r\n//       await axiosInstance.delete(`/postview/${postId}`);\r\n//       alert(\"Post deleted successfully\");\r\n//       setPosts(posts.filter((post) => post._id !== postId));\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting post:\", error);\r\n//       alert(\"Failed to delete post.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"posts-container-postpage\">\r\n//       <div className=\"feed-header-postpage\">\r\n//         <input\r\n//           type=\"text\"\r\n//           className=\"search-bar-postpage\"\r\n//           placeholder=\"Search posts...\"\r\n//           value={searchTerm}\r\n//           onChange={(e) => setSearchTerm(e.target.value)}\r\n//         />\r\n//         {searchTerm && (\r\n//           <button\r\n//             className=\"clear-search-postpage\"\r\n//             onClick={() => setSearchTerm(\"\")}\r\n//           >\r\n//             ×\r\n//           </button>\r\n//         )}\r\n//         <div className=\"filter-container-postpage\">\r\n//           <button\r\n//             className=\"filter-button-postpage\"\r\n//             onClick={() => setShowFilterOptions(!showFilterOptions)}\r\n//           >\r\n//             Filter ⌵\r\n//           </button>\r\n//           {showFilterOptions && (\r\n//             <div className=\"filter-dropdown-postpage\">\r\n//               <button\r\n//                 onClick={() => {\r\n//                   setSortOrder(\"desc\");\r\n//                   setShowFilterOptions(false);\r\n//                 }}\r\n//               >\r\n//                 Newest First\r\n//               </button>\r\n//               <button\r\n//                 onClick={() => {\r\n//                   setSortOrder(\"asc\");\r\n//                   setShowFilterOptions(false);\r\n//                 }}\r\n//               >\r\n//                 Oldest First\r\n//               </button>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//         <button\r\n//           className=\"new-post-button-postpage\"\r\n//           onClick={() => navigate(\"/Newpost\")}\r\n//         >\r\n//           New Post\r\n//         </button>\r\n//       </div>\r\n\r\n//       <div className=\"feed-section-postpage\">\r\n//         <div className=\"feed-grid-postpage\">\r\n//           {sortedPosts.length === 0 ? (\r\n//             <p>No posts available.</p>\r\n//           ) : (\r\n//             sortedPosts.map((post) => (\r\n//               <div className=\"feed-item-postpage\" key={post._id}>\r\n//                 <div className=\"feed-image-postpage\">\r\n//                   {post.media.length > 0 && post.media[0].url && (\r\n//                     <Carousel\r\n//                       showThumbs={false}\r\n//                       infiniteLoop={true}\r\n//                       autoPlay={true}\r\n//                       interval={5000}\r\n//                       showStatus={false}\r\n//                     >\r\n//                       {post.media.map((media, idx) => {\r\n//                         if (media.type.startsWith(\"image/\")) {\r\n//                           return (\r\n//                             <div key={idx}>\r\n//                               <img\r\n//                                 src={media.url}\r\n//                                 alt={`${post.title} ${idx}`}\r\n//                                 style={{ objectFit: \"cover\", width: \"100%\" }}\r\n//                                 onClick={() => setFullscreenImage(media.url)}\r\n//                               />\r\n//                             </div>\r\n//                           );\r\n//                         } else if (media.type === \"application/pdf\") {\r\n//                           return (\r\n//                             <div key={idx} className=\"pdf-container-postpage\">\r\n//                               <iframe\r\n//                                 src={`https://docs.google.com/gview?url=${media.url}&embedded=true`}\r\n//                                 title=\"PDF Viewer\"\r\n//                                 width=\"100%\"\r\n//                                 height=\"500px\"\r\n//                                 style={{ border: \"none\" }}\r\n//                               ></iframe>\r\n//                             </div>\r\n//                           );\r\n//                         } else if (media.type === \"video/mp4\") {\r\n//                           return (\r\n//                             <div key={idx} className=\"video-container-postpage\">\r\n//                               <video\r\n//                                 src={media.url}\r\n//                                 controls\r\n//                                 style={{ width: \"100%\", height: \"auto\" }}\r\n//                               />\r\n//                             </div>\r\n//                           );\r\n//                         }\r\n//                         return null;\r\n//                       })}\r\n//                     </Carousel>\r\n//                   )}\r\n//                 </div>\r\n//                 <div className=\"feed-content-postpage\">\r\n//                   <h3>{post.title}</h3>\r\n//                   <p>{post.description}</p>\r\n//                   {post.link && (\r\n//                     <a\r\n//                       href={post.link}\r\n//                       target=\"_blank\"\r\n//                       rel=\"noopener noreferrer\"\r\n//                       className=\"post-link-postpage\"\r\n//                     >\r\n//                       {post.link}\r\n//                     </a>\r\n//                   )}\r\n//                 </div>\r\n//                 <button\r\n//                   className=\"delete-post-button-postpage\"\r\n//                   onClick={() => handleDelete(post._id)}\r\n//                 >\r\n//                   Delete\r\n//                 </button>\r\n//               </div>\r\n//             ))\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n\r\n//       {fullscreenImage && (\r\n//         <div\r\n//           className=\"fullscreen-overlay-postpage\"\r\n//           onClick={() => setFullscreenImage(null)}\r\n//         >\r\n//           <span\r\n//             className=\"close-button-postpage\"\r\n//             onClick={() => setFullscreenImage(null)}\r\n//           >\r\n//             ×\r\n//           </span>\r\n//           <img\r\n//             src={fullscreenImage}\r\n//             alt=\"Full-Screen Preview\"\r\n//             className=\"fullscreen-image-postpage\"\r\n//           />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Postspage;\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import axiosInstance from \"./api/axiosfetch\";\r\n// import { Carousel } from \"react-responsive-carousel\";\r\n// import \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\n// import \"./Postspage.css\";\r\n\r\n// const Postspage = ({ userEmail }) => {\r\n//   const [posts, setPosts] = useState([]);\r\n//   const navigate = useNavigate();\r\n//   const [sortOrder, setSortOrder] = useState(\"desc\");\r\n//   const [showFilterOptions, setShowFilterOptions] = useState(false);\r\n//   const [searchTerm, setSearchTerm] = useState(\"\");\r\n//   const [fullscreenImage, setFullscreenImage] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const email = userEmail || localStorage.getItem(\"userEmail\");\r\n\r\n//     if (!email) {\r\n//       return;\r\n//     }\r\n\r\n//     const fetchPosts = async () => {\r\n//       try {\r\n//         const url = `/postview/${encodeURIComponent(email)}`;\r\n//         const response = await axiosInstance.get(url);\r\n//         setPosts(response.data);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching posts:\", error);\r\n//       }\r\n//     };\r\n\r\n//     fetchPosts();\r\n//   }, [userEmail]);\r\n\r\n//   const filteredPosts = posts.filter((post) => {\r\n//     const searchString = searchTerm.toLowerCase();\r\n//     return Object.values(post).some((value) => {\r\n//       if (typeof value === \"string\") {\r\n//         return value.toLowerCase().includes(searchString);\r\n//       } else if (Array.isArray(value)) {\r\n//         return value.some(\r\n//           (item) =>\r\n//             typeof item === \"string\" && item.toLowerCase().includes(searchString)\r\n//         );\r\n//       }\r\n//       return false;\r\n//     });\r\n//   });\r\n\r\n//   const sortedPosts = filteredPosts.sort((a, b) => {\r\n//     return sortOrder === \"desc\"\r\n//       ? new Date(b.createdAt) - new Date(a.createdAt)\r\n//       : new Date(a.createdAt) - new Date(b.createdAt);\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     const handleKeyDown = (event) => {\r\n//       if (event.key === \"Escape\") {\r\n//         setFullscreenImage(null);\r\n//       }\r\n//     };\r\n//     window.addEventListener(\"keydown\", handleKeyDown);\r\n//     return () => window.removeEventListener(\"keydown\", handleKeyDown);\r\n//   }, []);\r\n\r\n//   const handleDelete = async (postId) => {\r\n//     try {\r\n//       const confirmation = window.confirm(\r\n//         \"Are you sure you want to delete this post?\"\r\n//       );\r\n//       if (!confirmation) return;\r\n\r\n//       await axiosInstance.delete(`/postview/${postId}`);\r\n//       alert(\"Post deleted successfully\");\r\n//       setPosts(posts.filter((post) => post._id !== postId));\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting post:\", error);\r\n//       alert(\"Failed to delete post.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"posts-container-postpage\">\r\n//       <div className=\"feed-header-postpage\">\r\n//         <input\r\n//           type=\"text\"\r\n//           className=\"search-bar-postpage\"\r\n//           placeholder=\"Search posts...\"\r\n//           value={searchTerm}\r\n//           onChange={(e) => setSearchTerm(e.target.value)}\r\n//         />\r\n//         {searchTerm && (\r\n//           <button\r\n//             className=\"clear-search-postpage\"\r\n//             onClick={() => setSearchTerm(\"\")}\r\n//           >\r\n//             ×\r\n//           </button>\r\n//         )}\r\n//         <div className=\"filter-container-postpage\">\r\n//           <button\r\n//             className=\"filter-button-postpage\"\r\n//             onClick={() => setShowFilterOptions(!showFilterOptions)}\r\n//           >\r\n//             Filter ⌵\r\n//           </button>\r\n//           {showFilterOptions && (\r\n//             <div className=\"filter-dropdown-postpage\">\r\n//               <button\r\n//                 onClick={() => {\r\n//                   setSortOrder(\"desc\");\r\n//                   setShowFilterOptions(false);\r\n//                 }}\r\n//               >\r\n//                 Newest First\r\n//               </button>\r\n//               <button\r\n//                 onClick={() => {\r\n//                   setSortOrder(\"asc\");\r\n//                   setShowFilterOptions(false);\r\n//                 }}\r\n//               >\r\n//                 Oldest First\r\n//               </button>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//         <button\r\n//           className=\"new-post-button-postpage\"\r\n//           onClick={() => navigate(\"/Newpost\")}\r\n//         >\r\n//           New Post\r\n//         </button>\r\n//       </div>\r\n\r\n//       <div className=\"feed-section-postpage\">\r\n//         <div className=\"feed-grid-postpage\">\r\n//           {sortedPosts.length === 0 ? (\r\n//             <p>No posts available.</p>\r\n//           ) : (\r\n//             sortedPosts.map((post) => (\r\n//               <div className=\"feed-item-postpage\" key={post._id}>\r\n//                 <div className=\"feed-image-postpage\">\r\n//                   {post.media.length > 0 && post.media[0].url && (\r\n//                     <Carousel\r\n//                       showThumbs={false}\r\n//                       infiniteLoop={true}\r\n//                       autoPlay={true}\r\n//                       interval={5000}\r\n//                       showStatus={false}\r\n//                     >\r\n//                       {post.media.map((media, idx) => {\r\n//                         if (media.type.startsWith(\"image/\")) {\r\n//                           return (\r\n//                             <div key={idx}>\r\n//                               <img\r\n//                                 src={media.url}\r\n//                                 alt={`${post.title} ${idx}`}\r\n//                                 style={{ objectFit: \"cover\", width: \"100%\" }}\r\n//                                 onClick={() => setFullscreenImage(media.url)}\r\n//                               />\r\n//                             </div>\r\n//                           );\r\n//                         }\r\n//                         return null;\r\n//                       })}\r\n//                     </Carousel>\r\n//                   )}\r\n//                 </div>\r\n//                 <div className=\"feed-content-postpage\">\r\n//                   <h3>{post.title}</h3>\r\n//                   <p>{post.description}</p>\r\n//                   {post.link && (\r\n//                     <a\r\n//                       href={post.link}\r\n//                       target=\"_blank\"\r\n//                       rel=\"noopener noreferrer\"\r\n//                       className=\"post-link-postpage\"\r\n//                     >\r\n//                       {post.link}\r\n//                     </a>\r\n//                   )}\r\n//                 </div>\r\n//                 <button\r\n//                   className=\"delete-post-button-postpage\"\r\n//                   onClick={() => handleDelete(post._id)}\r\n//                 >\r\n//                   Delete\r\n//                 </button>\r\n//               </div>\r\n//             ))\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n\r\n//        {fullscreenImage && (\r\n//         <div className=\"fullscreen-overlay-postpage\" onClick={() => setFullscreenImage(null)}>\r\n//           <span className=\"close-button-postpage\" onClick={() => setFullscreenImage(null)}>\r\n//             ×\r\n//           </span>\r\n//           <img src={fullscreenImage} alt=\"Full-Screen Preview\" className=\"fullscreen-image-postpage\" />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Postspage;\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import axiosInstance from \"./api/axiosfetch\";\r\n// import { Carousel } from \"react-responsive-carousel\";\r\n// import \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\n// import \"./Postspage.css\";\r\n\r\n// const Postspage = ({ userEmail }) => {\r\n//   const [posts, setPosts] = useState([]);\r\n//   const navigate = useNavigate();\r\n//   const [sortOrder, setSortOrder] = useState(\"desc\");\r\n//   const [showFilterOptions, setShowFilterOptions] = useState(false);\r\n//   const [searchTerm, setSearchTerm] = useState(\"\");\r\n//   const [fullscreenImage, setFullscreenImage] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const email = userEmail || localStorage.getItem(\"userEmail\");\r\n\r\n//     if (!email) {\r\n//       return;\r\n//     }\r\n\r\n//     const fetchPosts = async () => {\r\n//       try {\r\n//         const url = `/postview/${encodeURIComponent(email)}`;\r\n//         const response = await axiosInstance.get(url);\r\n//         setPosts(response.data);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching posts:\", error);\r\n//       }\r\n//     };\r\n\r\n//     fetchPosts();\r\n//   }, [userEmail]);\r\n\r\n//   const filteredPosts = posts.filter((post) => {\r\n//     const searchString = searchTerm.toLowerCase();\r\n//     return Object.values(post).some((value) => {\r\n//       if (typeof value === \"string\") {\r\n//         return value.toLowerCase().includes(searchString);\r\n//       } else if (Array.isArray(value)) {\r\n//         return value.some(\r\n//           (item) =>\r\n//             typeof item === \"string\" && item.toLowerCase().includes(searchString)\r\n//         );\r\n//       }\r\n//       return false;\r\n//     });\r\n//   });\r\n\r\n//   const sortedPosts = filteredPosts.sort((a, b) => {\r\n//     return sortOrder === \"desc\"\r\n//       ? new Date(b.createdAt) - new Date(a.createdAt)\r\n//       : new Date(a.createdAt) - new Date(b.createdAt);\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     const handleKeyDown = (event) => {\r\n//       if (event.key === \"Escape\") {\r\n//         setFullscreenImage(null);\r\n//       }\r\n//     };\r\n//     window.addEventListener(\"keydown\", handleKeyDown);\r\n//     return () => window.removeEventListener(\"keydown\", handleKeyDown);\r\n//   }, []);\r\n\r\n//   const handleDelete = async (postId) => {\r\n//     try {\r\n//       const confirmation = window.confirm(\r\n//         \"Are you sure you want to delete this post?\"\r\n//       );\r\n//       if (!confirmation) return;\r\n\r\n//       await axiosInstance.delete(`/postview/${postId}`);\r\n//       alert(\"Post deleted successfully\");\r\n//       setPosts(posts.filter((post) => post._id !== postId));\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting post:\", error);\r\n//       alert(\"Failed to delete post.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"posts-container-postpage\">\r\n//       <div className=\"feed-header-postpage\">\r\n//         <input\r\n//           type=\"text\"\r\n//           className=\"search-bar-postpage\"\r\n//           placeholder=\"Search posts...\"\r\n//           value={searchTerm}\r\n//           onChange={(e) => setSearchTerm(e.target.value)}\r\n//         />\r\n//         {searchTerm && (\r\n//           <button\r\n//             className=\"clear-search-postpage\"\r\n//             onClick={() => setSearchTerm(\"\")}\r\n//           >\r\n//             ×\r\n//           </button>\r\n//         )}\r\n//         <div className=\"filter-container-postpage\">\r\n//           <button\r\n//             className=\"filter-button-postpage\"\r\n//             onClick={() => setShowFilterOptions(!showFilterOptions)}\r\n//           >\r\n//             Filter ⌵\r\n//           </button>\r\n//           {showFilterOptions && (\r\n//             <div className=\"filter-dropdown-postpage\">\r\n//               <button\r\n//                 onClick={() => {\r\n//                   setSortOrder(\"desc\");\r\n//                   setShowFilterOptions(false);\r\n//                 }}\r\n//               >\r\n//                 Newest First\r\n//               </button>\r\n//               <button\r\n//                 onClick={() => {\r\n//                   setSortOrder(\"asc\");\r\n//                   setShowFilterOptions(false);\r\n//                 }}\r\n//               >\r\n//                 Oldest First\r\n//               </button>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//         <button\r\n//           className=\"new-post-button-postpage\"\r\n//           onClick={() => navigate(\"/Newpost\")}\r\n//         >\r\n//           New Post\r\n//         </button>\r\n//       </div>\r\n\r\n//       <div className=\"feed-grid-postpage\">\r\n//         {sortedPosts.length > 0 ? (\r\n//           sortedPosts.map((post, index) => (\r\n//             <div className=\"feed-item-postpage\" key={index}>\r\n//               <div className=\"feed-image-postpage\">\r\n//                 {post.media?.length > 0 && post.media[0]?.url && (\r\n//                   <Carousel\r\n//                     showThumbs={false}\r\n//                     infiniteLoop\r\n//                     autoPlay\r\n//                     interval={5000}\r\n//                     showStatus={false}\r\n//                   >\r\n//                     {post.media.map((media, idx) => (\r\n//                       <div key={idx} className=\"carousel-item-postpage\">\r\n//                         {media.type.startsWith(\"image/\") ? (\r\n//                           <div\r\n//                             onClick={() => setFullscreenImage(media.url)}\r\n//                             style={{ cursor: \"pointer\" }}\r\n//                           >\r\n//                             <img\r\n//                               src={media.url}\r\n//                               alt={`${post.title} ${idx}`}\r\n//                               style={{ objectFit: \"cover\", width: \"100%\" }}\r\n//                             />\r\n//                           </div>\r\n//                         ) : media.type === \"video/mp4\" ? (\r\n//                           <video\r\n//                             src={media.url}\r\n//                             controls\r\n//                             style={{ width: \"100%\", height: \"auto\" }}\r\n//                           />\r\n//                         ) : media.type === \"application/pdf\" ? (\r\n//                           <div className=\"pdf-container-postpage\">\r\n//                             <iframe\r\n//                               src={`https://docs.google.com/gview?url=${media.url}&embedded=true`}\r\n//                               title=\"PDF Viewer\"\r\n//                             ></iframe>\r\n//                           </div>\r\n//                         ) : null}\r\n//                       </div>\r\n//                     ))}\r\n//                   </Carousel>\r\n//                 )}\r\n//               </div>\r\n//               <div className=\"feed-content-postpage\">\r\n//                 <h3>{post.title}</h3>\r\n//                 <p>{post.description}</p>\r\n//                 {post.link && (\r\n//                   <a\r\n//                     href={post.link}\r\n//                     target=\"_blank\"\r\n//                     rel=\"noopener noreferrer\"\r\n//                     className=\"post-link-postpage\"\r\n//                   >\r\n//                     {post.link}\r\n//                   </a>\r\n//                 )}\r\n//                 <button\r\n//                   className=\"delete-post-button-postpage\"\r\n//                   onClick={() => handleDelete(post._id)}\r\n//                 >\r\n//                   Delete\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           ))\r\n//         ) : (\r\n//           <p>No posts available</p>\r\n//         )}\r\n//       </div>\r\n\r\n//       {fullscreenImage && (\r\n//         <div\r\n//           className=\"fullscreen-overlay-postpage\"\r\n//           onClick={() => setFullscreenImage(null)}\r\n//         >\r\n//           <span\r\n//             className=\"close-button-postpage\"\r\n//             onClick={() => setFullscreenImage(null)}\r\n//           >\r\n//             ×\r\n//           </span>\r\n//           <img\r\n//             src={fullscreenImage}\r\n//             alt=\"Full-Screen Preview\"\r\n//             className=\"fullscreen-image-postpage\"\r\n//           />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Postspage;\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axiosInstance from \"./api/axiosfetch\";\r\nimport { Carousel } from \"react-responsive-carousel\";\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\nimport \"./Postspage.css\";\r\n\r\nconst Postspage = ({ userEmail }) => {\r\n  const [posts, setPosts] = useState([]);\r\n  const navigate = useNavigate();\r\n  const [sortOrder, setSortOrder] = useState(\"desc\");\r\n  const [showFilterOptions, setShowFilterOptions] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [fullscreenImage, setFullscreenImage] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const email = userEmail || localStorage.getItem(\"userEmail\");\r\n\r\n    if (!email) {\r\n      return;\r\n    }\r\n\r\n    const fetchPosts = async () => {\r\n      try {\r\n        const url = `/postview/${encodeURIComponent(email)}`;\r\n        const response = await axiosInstance.get(url);\r\n        setPosts(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching posts:\", error);\r\n      }\r\n    };\r\n\r\n    fetchPosts();\r\n  }, [userEmail]);\r\n\r\n  const filteredPosts = posts.filter((post) => {\r\n    const searchString = searchTerm.toLowerCase();\r\n    return Object.values(post).some((value) => {\r\n      if (typeof value === \"string\") {\r\n        return value.toLowerCase().includes(searchString);\r\n      } else if (Array.isArray(value)) {\r\n        return value.some(\r\n          (item) =>\r\n            typeof item === \"string\" && item.toLowerCase().includes(searchString)\r\n        );\r\n      }\r\n      return false;\r\n    });\r\n  });\r\n\r\n  const sortedPosts = filteredPosts.sort((a, b) => {\r\n    return sortOrder === \"desc\"\r\n      ? new Date(b.createdAt) - new Date(a.createdAt)\r\n      : new Date(a.createdAt) - new Date(b.createdAt);\r\n  });\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (event) => {\r\n      if (event.key === \"Escape\") {\r\n        setFullscreenImage(null);\r\n      }\r\n    };\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\r\n  }, []);\r\n\r\n  const handleDelete = async (postId) => {\r\n    try {\r\n      const confirmation = window.confirm(\r\n        \"Are you sure you want to delete this post?\"\r\n      );\r\n      if (!confirmation) return;\r\n\r\n      await axiosInstance.delete(`/postview/${postId}`);\r\n      alert(\"Post deleted successfully\");\r\n      setPosts(posts.filter((post) => post._id !== postId));\r\n    } catch (error) {\r\n      console.error(\"Error deleting post:\", error);\r\n      alert(\"Failed to delete post.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"posts-container-postpage\">\r\n      <div className=\"feed-header-postpage\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"search-bar-postpage\"\r\n          placeholder=\"Search posts...\"\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n        {searchTerm && (\r\n          <button\r\n            className=\"clear-search-postpage\"\r\n            onClick={() => setSearchTerm(\"\")}\r\n          >\r\n            ×\r\n          </button>\r\n        )}\r\n        <div className=\"filter-container-postpage\">\r\n          <button\r\n            className=\"filter-button-postpage\"\r\n            onClick={() => setShowFilterOptions(!showFilterOptions)}\r\n          >\r\n            Filter ⌵\r\n          </button>\r\n          {showFilterOptions && (\r\n            <div className=\"filter-dropdown-postpage\">\r\n              <button\r\n                onClick={() => {\r\n                  setSortOrder(\"desc\");\r\n                  setShowFilterOptions(false);\r\n                }}\r\n              >\r\n                Newest First\r\n              </button>\r\n              <button\r\n                onClick={() => {\r\n                  setSortOrder(\"asc\");\r\n                  setShowFilterOptions(false);\r\n                }}\r\n              >\r\n                Oldest First\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <button\r\n          className=\"new-post-button-postpage\"\r\n          onClick={() => navigate(\"/Newpost\")}\r\n        >\r\n          New Post\r\n        </button>\r\n      </div>\r\n\r\n      {/* Feed Section */}\r\n      <div className=\"feed-box-postpage\">\r\n        <div className=\"feed-header-box-postpage\">\r\n          <h2>Posts Feed</h2>\r\n        </div>\r\n        <div className=\"feed-grid-postpage\">\r\n          {sortedPosts.length > 0 ? (\r\n            sortedPosts.map((post, index) => (\r\n              <div className=\"feed-item-postpage\" key={index}>\r\n                <div className=\"feed-image-postpage\">\r\n                  {post.media?.length > 0 && post.media[0]?.url && (\r\n                    <Carousel\r\n                      showThumbs={false}\r\n                      infiniteLoop\r\n                      autoPlay\r\n                      interval={5000}\r\n                      showStatus={false}\r\n                    >\r\n                      {post.media.map((media, idx) => (\r\n                        <div key={idx} className=\"carousel-item-postpage\">\r\n                          {media.type.startsWith(\"image/\") ? (\r\n                            <div\r\n                              onClick={() => setFullscreenImage(media.url)}\r\n                              style={{ cursor: \"pointer\" }}\r\n                            >\r\n                              <img\r\n                                src={media.url}\r\n                                alt={`${post.title} ${idx}`}\r\n                                style={{ objectFit: \"cover\", width: \"100%\" }}\r\n                              />\r\n                            </div>\r\n                          ) : media.type === \"video/mp4\" ? (\r\n                            <video\r\n                              src={media.url}\r\n                              controls\r\n                              style={{ width: \"100%\", height: \"auto\" }}\r\n                            />\r\n                          ) : media.type === \"application/pdf\" ? (\r\n                            <div className=\"pdf-container-postpage\">\r\n                              <iframe\r\n                                src={`https://docs.google.com/gview?url=${media.url}&embedded=true`}\r\n                                title=\"PDF Viewer\"\r\n                              ></iframe>\r\n                            </div>\r\n                          ) : null}\r\n                        </div>\r\n                      ))}\r\n                    </Carousel>\r\n                  )}\r\n                </div>\r\n                <div className=\"feed-content-postpage\">\r\n                  <h3>{post.title}</h3>\r\n                  <p>{post.description}</p>\r\n                  {post.link && (\r\n                    <a\r\n                      href={post.link}\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                      className=\"post-link-postpage\"\r\n                    >\r\n                      {post.link}\r\n                    </a>\r\n                  )}\r\n                  <button\r\n                    className=\"delete-post-button-postpage\"\r\n                    onClick={() => handleDelete(post._id)}\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <p>No posts available</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {fullscreenImage && (\r\n        <div\r\n          className=\"fullscreen-overlay-postpage\"\r\n          onClick={() => setFullscreenImage(null)}\r\n        >\r\n          <span\r\n            className=\"close-button-postpage\"\r\n            onClick={() => setFullscreenImage(null)}\r\n          >\r\n            ×\r\n          </span>\r\n          <img\r\n            src={fullscreenImage}\r\n            alt=\"Full-Screen Preview\"\r\n            className=\"fullscreen-image-postpage\"\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Postspage;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}